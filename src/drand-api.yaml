openapi: 3.0.3
info:
  title: drand HTTP API
  description: |
    Drand provides a JSON HTTP interface that clients can use to fetch randomness from each drand network running on nodes. If you're using drand in an application, it may be easier and more secure to use one of the client libraries, which will also perform verification of randomness rounds and add additional features like failover, racing, aggregation, and caching.
    
    All that's required is the address of the HTTP interface and way to fetch from HTTP, e.g. curl.

  version: 0.1.0
  contact:
    name: drand Team
    url: https://drand.love/
  license:
    name: Apache 2.0 or MIT
    url: https://github.com/drand/drand/blob/main/LICENSE

servers:
  # Public Endpoints
  - url: https://api.drand.sh/v2
    description: Protocol Labs - Primary public endpoint for the League of Entropy mainnet
  - url: https://api2.drand.sh/v2
    description: Protocol Labs - Secondary public endpoint for the League of Entropy mainnet
  - url: https://api3.drand.sh/v2
    description: Protocol Labs - Tertiary public endpoint for the League of Entropy mainnet
  - url: https://drand.cloudflare.com
    description: Cloudflare - Public endpoint for the League of Entropy mainnet
  - url: https://api.drand.secureweb3.com:6875
    description: Storswift - Public endpoint for the League of Entropy mainnet

  # Testnet Endpoints
  - url: https://pl-us.testnet.drand.sh
    description: Protocol Labs - US-based testnet endpoint
  - url: https://pl-eu.testnet.drand.sh
    description: Protocol Labs - EU-based testnet endpoint
  - url: https://testnet-api.drand.cloudflare.com
    description: Cloudflare - Testnet endpoint

paths:
  /chains:
    get:
      summary: List available chains
      description: Returns a list of chain hashes supported by this drand node, which can be used to query chain-specific endpoints.
      responses:
        '200':
          description: List of chain hashes
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  pattern: '^[0-9a-fA-F]{64}$'
                description: An array of hexadecimal chain hashes.
                example:
                  - "52db9ba70e0cc0f6eaf7803dd07447a1f5477735fd3f661792ba94600c84e971"
                  - "8990e7a9aaed2ffed73dbd7092123d6f289930540d7651336225dc172e51b2ce"
                  - "04f1e9062b8a81f848fded9c12306733282b2727ecced50032187751166ec8c3"

  /{chain-hash}/info:
    get:
      summary: Get chain information
      description: Retrieves metadata about a specific randomness chain, identified by its chain hash.
      parameters:
        - name: chain-hash
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{64}$'
            example: "8990e7a9aaed2ffed73dbd7092123d6f289930540d7651336225dc172e51b2ce"
          description: The hexadecimal hash identifying the chain (e.g., default chained network).
      responses:
        '200':
          description: |
            Chain information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChainInfo'
              example:
                public_key: "868f005eb8e6e4ca0a47c8a77ceaa5309a47978a7c71bc5cce96366b5d7a569937c529eeda66c7293784a9402801af31"
                period: 30
                genesis_time: 1595431050
                hash: "8990e7a9aaed2ffed73dbd7092123d6f289930540d7651336225dc172e51b2ce"
                groupHash: "176f93498eac9ca337150b46d21dd58673ea4e3581185f869672e59fa4cb390a"
                schemeID: "pedersen-bls-chained"
                metadata:
                  beaconID: "default"
        '404':
          description: Chain not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "chain not found"

  /{chain-hash}/public/latest:
    get:
      summary: Get the latest randomness
      description: Retrieves the most recent randomness value from the default chain. Note this might not be available on all chained networks; prefer using chain-specific endpoints or relays for consistency.
      responses:
        '200':
          description: |
            Randomness data for the latest round
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Randomness'
        '503':
          description: Latest randomness unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "latest randomness not available"


  /{chain-hash}/public/{round}:
    get:
      summary: Get chain-specific randomness for a round
      description: Fetches randomness for a specific round on a given chain, identified by its chain hash.
      parameters:
        - name: chain-hash
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{64}$'
            example: "8990e7a9aaed2ffed73dbd7092123d6f289930540d7651336225dc172e51b2ce"
          description: The hexadecimal hash identifying the chain.
        - name: round
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
            example: 12345
          description: The round number for which to fetch randomness.
      responses:
        '200':
          description: |
            Randomness data for the specified round
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Randomness'
        '404':
          description: Round or chain not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "round or chain not found"


components:
  schemas:
    ChainInfo:
      type: object
      properties:
        public_key:
          type: string
          description: The distributed public key of the drand group
          example: "868f005eb8e6e4ca0a47c8a77ceaa5309a47978a7c71bc5cce96366b5d7a569937c529eeda66c7293784a9402801af31"
        period:
          type: integer
          description: The time in seconds between randomness beacon rounds
          example: 30
        genesis_time:
          type: integer
          description:  The time in seconds since the Unix Epoch that the group began generating randomness
          example: 1595431050
        hash:
          type: string
          description: The chain hash, which uniquely identifies the drand chain. It is used as a root of trust for validation of the first round of randomness.
          example: "8990e7a9aaed2ffed73dbd7092123d6f289930540d7651336225dc172e51b2ce"
        groupHash:
          type: string
          description: The hash of a file containing the current set of nodes participating in the network. The group file is updated on every resharing
          example: "176f93498eac9ca337150b46d21dd58673ea4e3581185f869672e59fa4cb390a"
        schemeID:
          type: string
          description: The name of the scheme this network uses. The scheme specifies the type of cryptography being used to generate the randomness beacons
          example: "pedersen-bls-chained"
        metadata:
          type: object
          properties:
            beaconID:
              type: string
              description: The identifier for the beacon.
              example: "default"
          description: Contains some miscellaneous metadata about the network that is added to most packets during operation

      required:
        - public_key
        - period
        - genesis_time
        - hash
        - groupHash
        - schemeID
        - metadata

    Randomness:
      type: object
      properties:
        round:
          type: integer
          description: A monotonically increasing integer - the randomness round index
          example: 367
        randomness:
          type: string
          description: A SHA-256 hash of the signature
          example: "3439d92d58e47d342131d446a3abe264396dd264717897af30525c98408c834f"
        signature:
          type: string
          description: The Boneh-Lynn-Shacham (BLS) signature for this round of randomness
          example: "90957ebc0719f8bfb67640aff8ca219bf9f2c5240e60a8711c968d93370d38f87b38ed234a8c63863eb81f234efce55b047478848c0de025527b3d3476dfe860632c1b799550de50a6b9540463e9fb66c8016b89c04a9f52dabdc988e69463c1"
        previous_signature:
          type: string
          description: The signature of the previous round of randomness (this will is omitted for unchained networks)
          example: "859504eade86790ad09b2b3474d5e09d1718b549ef7107d7bbd18f5e221765ce8252d7db02664c1f6b20f40c6e8e138704d2acfeb6c5abcc14c77e3a842b2f84515e7366248ca37b1460d23b4f98493c246fbb02851f2a43a710c968a349f8d6"
      required:
        - round
        - randomness
        - signature
