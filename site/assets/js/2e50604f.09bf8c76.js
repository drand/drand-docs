"use strict";(self.webpackChunkdrand_docs=self.webpackChunkdrand_docs||[]).push([[963],{5572:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>c,toc:()=>d});var i=s(4848),r=s(8453);const t={id:"2-2-concepts-security-model",title:"2.2 Security Model",description:"Describes drand\u2019s security assumptions."},o="2.2 Security Model",c={id:"concepts/2-2-concepts-security-model",title:"2.2 Security Model",description:"Describes drand\u2019s security assumptions.",source:"@site/docs/02_concepts/02-02-Security_Model.md",sourceDirName:"02_concepts",slug:"/concepts/2-2-concepts-security-model",permalink:"/docs/concepts/2-2-concepts-security-model",draft:!1,unlisted:!1,editUrl:"https://github.com/drand/drand-docs/tree/master/docs/02_concepts/02-02-Security_Model.md",tags:[],version:"current",frontMatter:{id:"2-2-concepts-security-model",title:"2.2 Security Model",description:"Describes drand\u2019s security assumptions."},sidebar:"docsSidebar",previous:{title:"2.1 Cryptography",permalink:"/docs/concepts/2-1-concepts-cryptography"},next:{title:"2.3 Specification",permalink:"/docs/concepts/2-3-concepts-specification"}},a={},d=[{value:"\ud83d\udcd5 Key Terminology",id:"-key-terminology",level:2},{value:"\ud83c\udf12 Security Phases",id:"-security-phases",level:2},{value:"Phase 1. Distributed Key Generation (DKG) Setup",id:"phase-1-distributed-key-generation-dkg-setup",level:3},{value:"Phase 2. Randomness Generation",id:"phase-2-randomness-generation",level:3},{value:"\ud83d\udca5 Attack Vectors &amp; Mitigations",id:"-attack-vectors--mitigations",level:2},{value:"Randomness Generation Attacks",id:"randomness-generation-attacks",level:3},{value:"Distributed Key Generation Attacks",id:"distributed-key-generation-attacks",level:3},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const n={h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"22-security-model",children:"2.2 Security Model"})}),"\n",(0,i.jsx)(n.h2,{id:"-key-terminology",children:"\ud83d\udcd5 Key Terminology"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Drand Node"}),": A node running the drand daemon, participating in generating randomness across one or multiple networks. A drand network consists of interconnected drand nodes, each with a long-term public key and a private share."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Relay Node"}),": A node connected to a drand daemon, providing an Internet-facing interface to fetch public randomness. The relay network consists of relay nodes that may be partially connected."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Corrupted Node"}),": A node controlled by an attacker, giving access to all its cryptographic material and network authorizations."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Offline Node"}),": A node that is unreachable from an external point of view."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Online Node"}),": A node that is running and correctly transmitting packets over the Internet."]}),"\n",(0,i.jsx)(n.h2,{id:"-security-phases",children:"\ud83c\udf12 Security Phases"}),"\n",(0,i.jsx)(n.p,{children:"In drand, there are two main phases, each with specific security assumptions:"}),"\n",(0,i.jsx)(n.h3,{id:"phase-1-distributed-key-generation-dkg-setup",children:"Phase 1. Distributed Key Generation (DKG) Setup"}),"\n",(0,i.jsx)(n.p,{children:"The DKG protocol follows Pedersen's protocol, ensuring:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Synchronous Network"}),": Packets reach their destination within a bounded time."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Synchronized Clocks"}),": Nodes have synchronized clocks with minimal offset."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reliable Broadcast Channel"}),": All nodes receive the same packet within a bounded time."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Authenticated Channel"}),": All communications are authenticated."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Public Group"}),": Nodes know each other's public keys before starting the DKG."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"phase-2-randomness-generation",children:"Phase 2. Randomness Generation"}),"\n",(0,i.jsx)(n.p,{children:"The randomness generation phase ensures:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Network Flexibility"}),": No strict network bounds; nodes process packets as they arrive."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Synchronized Clocks"}),": Nodes start rounds simultaneously with accurate clock synchronization."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Broadcast Channel"}),": A regular broadcast channel suffices for partial beacon transmission."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Threshold"}),": A specific number of nodes must be online and honest to create the final random beacon."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Determinism"}),": The chain is deterministic with respect to a fresh DKG phase."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-attack-vectors--mitigations",children:"\ud83d\udca5 Attack Vectors & Mitigations"}),"\n",(0,i.jsx)(n.h3,{id:"randomness-generation-attacks",children:"Randomness Generation Attacks"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Front Running"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Passive Adversary"}),": An attacker listening to traffic might aggregate the final beacon before others."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Active Adversary"}),": An attacker tries to disable half of the nodes, deciding whether to release the final beacon."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Denial of Service (DoS) Attacks"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scenario"}),": Sustained DoS attacks can halt the chain if enough nodes are disabled."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Defense"}),": Block incoming traffic early, allowing only known IP addresses."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Corruption"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scenario #1"}),": Attacker corrupts less than the threshold of nodes, gaining no meaningful information."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scenario #2"}),": Attacker corrupts more than the threshold, deriving the entire chain."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"distributed-key-generation-attacks",children:"Distributed Key Generation Attacks"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"DoS During DKG"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Nodes may miss shares or replies, risking exclusion."}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Remediation"}),": Manual verification of the final group and decision to re-run DKG if necessary."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Corruption During DKG"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scenario 1"}),": Attacker influences the distribution of private shares without biasing randomness."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scenario 2"}),": Attacker controls more than the threshold, knowing the randomness chain."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Broadcast Channel Assumption"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Attacker sends inconsistent shares, causing verification issues."}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Observation"}),": Nodes publish the distributed public key and start randomness rounds, enabling third-party verification."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"drand employs robust security measures, including pairing-based cryptography and threshold BLS signatures, to ensure publicly verifiable, unbiased, and unpredictable randomness. Regular resharing and strict network protocols further enhance security and resilience against attacks."}),"\n",(0,i.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var i=s(6540);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);