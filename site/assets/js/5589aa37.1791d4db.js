"use strict";(self.webpackChunkdrand_docs=self.webpackChunkdrand_docs||[]).push([[2268],{3018:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=s(4848),t=s(8453);const o={id:"4-2-ops-guide-docker-install",title:"4.2 Docker Install",description:"Detailed instructions for running a production drand node using Docker."},d="4.2 DevOps: Docker Install",i={id:"ops-guide/4-2-ops-guide-docker-install",title:"4.2 Docker Install",description:"Detailed instructions for running a production drand node using Docker.",source:"@site/docs/04_ops-guide/04-02-DevOps_Docker_Install.md",sourceDirName:"04_ops-guide",slug:"/ops-guide/4-2-ops-guide-docker-install",permalink:"/docs/ops-guide/4-2-ops-guide-docker-install",draft:!1,unlisted:!1,editUrl:"https://github.com/drand/drand-docs/tree/main/docs/04_ops-guide/04-02-DevOps_Docker_Install.md",tags:[],version:"current",frontMatter:{id:"4-2-ops-guide-docker-install",title:"4.2 Docker Install",description:"Detailed instructions for running a production drand node using Docker."},sidebar:"docsSidebar",previous:{title:"4.1 Deployment",permalink:"/docs/ops-guide/4-1-ops-guide-deployment"},next:{title:"4.3 Storage Backends",permalink:"/docs/ops-guide/4-3-ops-guide-storage-backends"}},c={},l=[{value:"<strong>Prerequisites for this Guide</strong>",id:"prerequisites-for-this-guide",level:2},{value:"<strong>First Steps</strong>",id:"first-steps",level:2},{value:"<strong>Setting up TLS</strong>",id:"setting-up-tls",level:2},{value:"<strong>First option: use TLS within drand</strong>",id:"first-option-use-tls-within-drand",level:3},{value:"<strong>Second option: disable TLS in drand</strong>",id:"second-option-disable-tls-in-drand",level:3},{value:"<strong>Public HTTP API</strong>",id:"public-http-api",level:2},{value:"<strong>Generate drand Keys</strong>",id:"generate-drand-keys",level:2},{value:"<strong>Docker-compose Setup</strong>",id:"docker-compose-setup",level:2},{value:"<strong>Distributed Key Generation (DKG)</strong>",id:"distributed-key-generation-dkg",level:2},{value:"<strong>Other Topics</strong>",id:"other-topics",level:2},{value:"<strong>Updating drand</strong>",id:"updating-drand",level:3},{value:"<strong>Reset the Docker State (without losing the Keys)</strong>",id:"reset-the-docker-state-without-losing-the-keys",level:3},{value:"<strong>Method 1: using\xa0<code>drand clean</code></strong>",id:"method-1-usingdrand-clean",level:3},{value:"<strong>Method 2: performing a Manual Reset</strong>",id:"method-2-performing-a-manual-reset",level:3},{value:"<strong>Docker behind Reverse Proxy Setup</strong>",id:"docker-behind-reverse-proxy-setup",level:3}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"42-devops-docker-install",children:"4.2 DevOps: Docker Install"})}),"\n",(0,r.jsx)(n.h1,{id:"install-drand-with-docker",children:(0,r.jsx)(n.strong,{children:"Install drand with Docker"})}),"\n",(0,r.jsxs)(n.p,{children:["This page describes how to run a\xa0",(0,r.jsx)(n.em,{children:"production"}),"\xa0version of\xa0",(0,r.jsx)(n.code,{children:"drand"}),"\xa0based on\xa0",(0,r.jsx)(n.code,{children:"docker-compose"}),". This is meant as a\xa0",(0,r.jsx)(n.strong,{children:"production setup"}),". It notably involves generating TLS certificates for your public-facing server. Check out the\xa0",(0,r.jsx)(n.a,{href:"4-5-ops-guide-command-line-tools",children:(0,r.jsx)(n.strong,{children:"simple install if you just want a local drand demo \u2192"})})]}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites-for-this-guide",children:(0,r.jsx)(n.strong,{children:"Prerequisites for this Guide"})}),"\n",(0,r.jsx)(n.p,{children:"a VPS with the following software setup:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"docker >= 17.12"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"docker-compose >= 1.18"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"go >= 1.12"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"certbot"}),', a TLS-capable reverse-proxy, or any other way to get TLS certificates (see section "Setting up TLS")']}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"first-steps",children:(0,r.jsx)(n.strong,{children:"First Steps"})}),"\n",(0,r.jsxs)(n.p,{children:["Copy/send this folder on your server, then open a shell in it. You may place this directory where you want, e.g.\xa0",(0,r.jsx)(n.code,{children:"~/deploy-example"}),". Its name is irrelevant too, should you want to change it (just don't call it\xa0",(0,r.jsx)(n.code,{children:"~/.drand"}),"\xa0which is used for the config files)."]}),"\n",(0,r.jsx)(n.p,{children:"At this point, your current working directory should look like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"$ pwd\n/home/drand/deploy-example\n------------------------------------------------------------\n$ tree\n.\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 tls_certificates\n\u2502   \u2514\u2500\u2500 tls_keypair\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 README.md\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Also make sure\xa0",(0,r.jsx)(n.code,{children:"data"}),"\xa0is owned by your user, and have rights\xa0",(0,r.jsx)(n.code,{children:"740"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"chmod -R 740 data\n"})}),"\n",(0,r.jsx)(n.h2,{id:"setting-up-tls",children:(0,r.jsx)(n.strong,{children:"Setting up TLS"})}),"\n",(0,r.jsx)(n.p,{children:"To be secure, drand needs authenticated channels to talk to other drand nodes. This can be currently done in two ways:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"via the TLS module within drand; in that case, you need to give TLS certificates to drand itself."}),"\n",(0,r.jsx)(n.li,{children:"via a reverse-proxy in front of drand; in that case, drand itself is unaware of TLS, and your reverse proxy is handling TLS itself."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"first-option-use-tls-within-drand",children:(0,r.jsx)(n.strong,{children:"First option: use TLS within drand"})}),"\n",(0,r.jsxs)(n.p,{children:["One way to get a TLS certificate is through ",(0,r.jsx)(n.a,{href:"https://certbot.eff.org/lets-encrypt/debianjessie-other",children:"LetsEncrypt"})," and their command-line tool\xa0",(0,r.jsx)(n.code,{children:"certbot"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Use\xa0",(0,r.jsx)(n.code,{children:"certbox"}),"\xa0to generate TLS certificates. The command will depend on your setup, but typically can be\xa0",(0,r.jsx)(n.code,{children:"sudo certbot certonly --standalone"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Once done,\xa0",(0,r.jsx)(n.code,{children:"certbot"}),"\xa0put the files in\xa0",(0,r.jsx)(n.code,{children:"/etc/letsencrypt/live"}),". We are interested in\xa0",(0,r.jsx)(n.code,{children:"/etc/letsencrypt/live/YOURSERVER/certX.pem"}),"\xa0and\xa0",(0,r.jsx)(n.code,{children:"/etc/letsencrypt/live/YOURSERVER/privkeyX.pem"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Copy those two files into\xa0",(0,r.jsx)(n.code,{children:"data/tls_keypair"}),", renaming them as\xa0",(0,r.jsx)(n.code,{children:"cert.pem"}),"\xa0and\xa0",(0,r.jsx)(n.code,{children:"privkey.pem"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"cp /etc/letsencrypt/live/YOURSERVER/certX.pem data/cert.pem\ncp /etc/letsencrypt/live/YOURSERVER/privX.pem data/priv.pem\n"})}),"\n",(0,r.jsx)(n.p,{children:"The TLS setup is done."}),"\n",(0,r.jsx)(n.h3,{id:"second-option-disable-tls-in-drand",children:(0,r.jsx)(n.strong,{children:"Second option: disable TLS in drand"})}),"\n",(0,r.jsxs)(n.p,{children:["Note:\xa0",(0,r.jsx)(n.strong,{children:"only"}),"\xa0do this if you intend to setup TLS with your reverse proxy. If you don't use TLS at all, there's no point in doing this setup, it won't be secure ! If you're just trying to run an insecure demo, run\xa0",(0,r.jsx)(n.code,{children:"make demo"}),"\xa0in the root folder of this repository instead of following this guide."]}),"\n",(0,r.jsxs)(n.p,{children:["In this case, replace the following line in the\xa0",(0,r.jsx)(n.code,{children:"docker-compose.yml"}),"\xa0file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'    command: --verbose 2 start --private-listen 0.0.0.0:8080 --cert-dir "/data/drand/.drand/tls_certificates" --tls-cert "/data/drand/.drand/tls_keypair/cert.pem" --tls-key "/data/drand/.drand/tls_keypair/key.pem"\n'})}),"\n",(0,r.jsx)(n.p,{children:"by:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"    command: --verbose 2 -tls-disable start --private-listen 0.0.0.0:8080\n"})}),"\n",(0,r.jsx)(n.p,{children:"This guide will continue focusing on drand; jump to the end of this guide to configure the reverse proxy."}),"\n",(0,r.jsx)(n.h2,{id:"public-http-api",children:(0,r.jsx)(n.strong,{children:"Public HTTP API"})}),"\n",(0,r.jsxs)(n.p,{children:["The compose file also opens a public http API to be consumed by the clients. This public endpoint is exposed on the 8081 port (specified with\xa0",(0,r.jsx)(n.code,{children:"--public-listen"}),"]). If you wish to not expose the public http endpoint, you need to change the docker file to remove references to public port."]}),"\n",(0,r.jsx)(n.h2,{id:"generate-drand-keys",children:(0,r.jsx)(n.strong,{children:"Generate drand Keys"})}),"\n",(0,r.jsx)(n.p,{children:"Now, let's generate keys for drand:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"go get -u github.com/drand/drand\ndrand generate-keypair <address>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Where\xa0",(0,r.jsx)(n.code,{children:"<address>"}),"\xa0is for instance\xa0",(0,r.jsx)(n.code,{children:"drand.yourserver.com:8080"}),"\xa0or\xa0",(0,r.jsx)(n.code,{children:"yourserver.com:8080"}),". If you'll be using a reverse-proxy, make sure you enter the public-facing port."]}),"\n",(0,r.jsxs)(n.p,{children:["This generates keys in\xa0",(0,r.jsx)(n.code,{children:"~/.drand/keys/"}),". Let's move them into\xa0",(0,r.jsx)(n.code,{children:"data"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"mv ~/.drand/key data\n"})}),"\n",(0,r.jsx)(n.h2,{id:"docker-compose-setup",children:(0,r.jsx)(n.strong,{children:"Docker-compose Setup"})}),"\n",(0,r.jsx)(n.p,{children:"Drand can now be started as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"docker-compose up -d\n"})}),"\n",(0,r.jsx)(n.p,{children:"To check what is happening, access the docker-compose logs via"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"docker-compose logs\n"})}),"\n",(0,r.jsx)(n.h2,{id:"distributed-key-generation-dkg",children:(0,r.jsx)(n.strong,{children:"Distributed Key Generation (DKG)"})}),"\n",(0,r.jsx)(n.p,{children:"If you did the setup above, you have a container running the drand deamon, loaded with your keys. It still misses two things:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["the\xa0",(0,r.jsx)(n.code,{children:"group.toml"}),"\xa0file corresponding to other participants. For this, you have to exchange keys manually, e.g., via email."]}),"\n",(0,r.jsx)(n.li,{children:"running the DKG protocol to bootstrap drand."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Fortunately, with our docker-compose volumes, it's now very easy to add things into the running container. Just add your\xa0",(0,r.jsx)(n.code,{children:"group.toml"}),"\xa0into the root of the\xa0",(0,r.jsx)(n.code,{children:"data"}),"\xa0folder (",(0,r.jsx)(n.strong,{children:"NOT"}),"\xa0in the\xa0",(0,r.jsx)(n.code,{children:"data/groups/"}),"\xa0folder; this one is manually managed by drand, don't touch it)."]}),"\n",(0,r.jsx)(n.p,{children:"Then, open a CLI into your running docker."}),"\n",(0,r.jsx)(n.p,{children:"First find its id on the host:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'$ docker ps\n697e4766f8b2        drand_drand             "drand --verbose 2 s\u2026"   11 minutes ago      Up 9 minutes\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The id of the container is\xa0",(0,r.jsx)(n.code,{children:"697e4766f8b2"}),". Enter it by running:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"docker exec -it 697e4766f8b2 /bin/sh\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then, you're inside the container; tell drand to run the DKG like so:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand share --connect <leader address> --nodes <expected nodes> --threshold <expected threshold>\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Notice the full path"}),"\xa0",(0,r.jsx)(n.code,{children:"/data/drand/.drand/group.toml"}),"\xa0and not\xa0",(0,r.jsx)(n.code,{children:"group.toml"}),"\xa0nor\xa0",(0,r.jsx)(n.code,{children:"./group.toml"})]}),"\n",(0,r.jsxs)(n.p,{children:["At this point, once\xa0",(0,r.jsx)(n.em,{children:"everybody"}),"\xa0in the group.toml has run the same command (at the same time), the randomness generation starts. Well done! Simply let it run, there's nothing else to do."]}),"\n",(0,r.jsx)(n.h2,{id:"other-topics",children:(0,r.jsx)(n.strong,{children:"Other Topics"})}),"\n",(0,r.jsx)(n.h3,{id:"updating-drand",children:(0,r.jsx)(n.strong,{children:"Updating drand"})}),"\n",(0,r.jsx)(n.p,{children:"To update drand, simply shut it the container"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"docker-compose down\n"})}),"\n",(0,r.jsxs)(n.p,{children:["and to fully rebuild it, you need to first clean the already-used layers (for some reason Docker is confused and thinks nothing has changed, and it keeps rebuilding the old version). Caution! this delete\xa0",(0,r.jsx)(n.em,{children:"all"}),"\xa0your\xa0",(0,r.jsx)(n.em,{children:"unused"}),"\xa0containers and networks; it's typically fine, but just be aware of it."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"docker system prune -a\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then rebuild and restart it"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"docker-compose up --build -d\n"})}),"\n",(0,r.jsx)(n.h3,{id:"reset-the-docker-state-without-losing-the-keys",children:(0,r.jsx)(n.strong,{children:"Reset the Docker State (without losing the Keys)"})}),"\n",(0,r.jsx)(n.p,{children:"This part is if you need to reset drand's internal state without loosing the keys."}),"\n",(0,r.jsx)(n.h3,{id:"method-1-usingdrand-clean",children:(0,r.jsxs)(n.strong,{children:["Method 1: using\xa0",(0,r.jsx)(n.code,{children:"drand clean"})]})}),"\n",(0,r.jsx)(n.p,{children:"First, try using this method. If that doesn't work, use the method below."}),"\n",(0,r.jsx)(n.p,{children:"Find drand's container id on the host, and enter it:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'$ docker ps\n697e4766f8b2        drand_drand             "drand --verbose 2 s\u2026"   11 minutes ago      Up 9 minutes\n\n$ docker exec -it 697e4766f8b2 /bin/sh\n'})}),"\n",(0,r.jsx)(n.p,{children:"Then simply call:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand reset\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Exit the container with\xa0",(0,r.jsx)(n.code,{children:"CTRL-C"}),". Then, on the host, I advise you to restart the container (to make sure the drand deamon has a clean restart and can reload its cleaned config):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"docker-compose down\ndocker-compose up --build -d\n"})}),"\n",(0,r.jsx)(n.h3,{id:"method-2-performing-a-manual-reset",children:(0,r.jsx)(n.strong,{children:"Method 2: performing a Manual Reset"})}),"\n",(0,r.jsxs)(n.p,{children:["The method above relies on\xa0",(0,r.jsx)(n.code,{children:"drand clean"}),", which could theoretically fail. If you want a manual hard-reset, start by killing the container:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"docker-compose down\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Delete what you want to reset in\xa0",(0,r.jsx)(n.code,{children:"data"}),": typically, you absolutely want to\xa0",(0,r.jsx)(n.strong,{children:"keep"}),"\xa0",(0,r.jsx)(n.code,{children:"data/keys"}),",\xa0",(0,r.jsx)(n.strong,{children:"especially"}),"\xa0if you shared those keys to create a\xa0",(0,r.jsx)(n.code,{children:"group.toml"}),"\xa0with other people. For instance if the DKG failed, remove\xa0",(0,r.jsx)(n.code,{children:"data/db"}),"\xa0and\xa0",(0,r.jsx)(n.code,{children:"data/groups"}),". Notice that if you added the\xa0",(0,r.jsx)(n.code,{children:"group.toml"}),"\xa0into the root of\xa0",(0,r.jsx)(n.code,{children:"data"}),"\xa0as suggested, it should still be there (don't delete it unless you want to change the group)."]}),"\n",(0,r.jsx)(n.p,{children:"Then, rebuild the image from scratch:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"docker system prune -a\ndocker-compose up --build -d\n"})}),"\n",(0,r.jsx)(n.p,{children:"Check that things are running with"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"docker-compose logs\n"})}),"\n",(0,r.jsx)(n.p,{children:'You\'re now back to the step "Distributed Key Generation" of this guide.'}),"\n",(0,r.jsx)(n.h3,{id:"docker-behind-reverse-proxy-setup",children:(0,r.jsx)(n.strong,{children:"Docker behind Reverse Proxy Setup"})}),"\n",(0,r.jsx)(n.p,{children:"Typically, the TLS part of my VPS is managed by a single reverse proxy, which then proxies multiple services running locally with docker."}),"\n",(0,r.jsxs)(n.p,{children:["There is one subtletly: you need to forward\xa0",(0,r.jsx)(n.em,{children:"both"}),'\xa0GRPC (used by drand "core") and web traffic (for the web interface). To forward GRPC, you need to have nginx\xa0',(0,r.jsx)(n.code,{children:"1.13.10"}),"\xa0or above, it's a fairly recent addition."]}),"\n",(0,r.jsxs)(n.p,{children:["Then, you need to forward differently traffic to private API port and the HTTP public API port. Here's an example configuration for\xa0",(0,r.jsx)(n.code,{children:"nginx"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"server {\n  server_name drand.lbarman.ch;\n  listen 443 ssl http2;\n  ssl_protocols   SSLv3 TLSv1 TLSv1.1 TLSv1.2;\n  ssl_ciphers   HIGH:!aNULL:!MD5;\n\n  location / {\n    // default --private-listen port specified in the docker compose\n    grpc_pass grpc://localhost:1234;\n    grpc_set_header X-Real-IP $remote_addr;\n  }\n\n  location /info {\n    // default --public-listen flag specified in the docker compose\n    proxy_pass http://localhost:8081;\n    proxy_set_header Host $host;\n  }\n\n  location /public/ {\n    // default --public-listen flag specified in the docker compose\n    proxy_pass http://localhost:8081;\n    proxy_set_header Host $host;\n  }\n\n  ssl_certificate /etc/letsencrypt/live/.../fullchain.pem; # managed by Certbot\n  ssl_certificate_key /etc/letsencrypt/live/.../privkey.pem; # managed by Certbot\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can separate the entries in two in nginx by having two\xa0",(0,r.jsx)(n.code,{children:"server"}),"\xa0blocks to apply different configurations."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Note:"}),"\xa0to others, you'll still be using TLS (handled by your reverse proxy), so make sure you generate your drand-keys using an https address, and the flag\xa0",(0,r.jsx)(n.code,{children:"TLS=true"}),"."]}),"\n",(0,r.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>i});var r=s(6540);const t={},o=r.createContext(t);function d(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);