"use strict";(self.webpackChunkdrand_docs=self.webpackChunkdrand_docs||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"fastnet-sunsetting-dates-set","metadata":{"permalink":"/blog/fastnet-sunsetting-dates-set","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2024-09-14-fastnet-sunsetting-dates-set.mdx","source":"@site/blog/2024-09-14-fastnet-sunsetting-dates-set.mdx","title":"fastnet sunsetting dates are set","description":"The drand fastnet network is being shut down. This post contains the dates and other important information.","date":"2024-09-14T00:00:00.000Z","tags":[{"inline":false,"label":"News","permalink":"/blog/tags/news","description":"news tag"},{"inline":false,"label":"update","permalink":"/blog/tags/update","description":"update tag"},{"inline":false,"label":"League-of-Entropy","permalink":"/blog/tags/League-of_entropy","description":"league of entropy tag"},{"inline":false,"label":"Major","permalink":"/blog/tags/major","description":"major tag"}],"readingTime":3.04,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"fastnet-sunsetting-dates-set","title":"fastnet sunsetting dates are set","description":"The drand fastnet network is being shut down. This post contains the dates and other important information.","authors":["yolan"],"tags":["news","update","league-of-entropy","major"],"date":"2024-09-14T00:00:00.000Z"},"unlisted":false,"nextItem":{"title":"Notion Widget for drand Public Randomness!","permalink":"/blog/create-a-notion-widget"}},"content":"export const Highlight = ({children, color = \'green\'}) => (\\n    <span style={{color: color}}>{children}</span>\\n);\\n\\n### TL;DR\\n\\nIf you\u2019re currently using <Highlight>`fastnet`</Highlight> you must migrate to <Highlight>`quicknet`</Highlight> by October 31st.\\n\\n\x3c!-- truncate --\x3e\\n\\n## The Details\\n\\nIt\u2019s been a little over a year since we [announced](https://drand.love/blog/fastnet-is-being-sunset-long-live-quicknet) that the League of Entropy <Highlight>`fastnet`</Highlight> Mainnet network would be discontinued.\\n\\nIt is being discontinued as it uses a Domain Separation Tag (DST) in its HashToCurve functions that is non-conformant to the HashToCurve [RFC9380](https://datatracker.ietf.org/doc/html/rfc9380) specification.\\n\\nIt is now time for us to finally decommission it, since our newer, RFC-conforming Mainnet network, <Highlight>`quicknet`</Highlight>, has been operating flawlessly.\\nOur biggest consumer (the Filecoin network) [recently started using it](https://github.com/drand/FIPs/blob/master/FIPS/fip-0063.md) rather than our older, less storage-efficient default one.\\n\\n### Timeline\\n\\nWe will deprecate the <Highlight>`fastnet`</Highlight> network in gradual steps:\\n\\n1. This post is the first step: we\u2019re publicly announcing its deprecation timeline!\\n2. We will be performing so-called \u201cscream tests\u201d in September, starting on **September 30th** until the end of the month.\\n   This will translate in practice to stopping all of our HTTP(S) and Gossipsub relays from serving the beacons created by the network for small periods of time, starting with an hour and increasing up to a full day by mid-October.\\n   Our other relay partners Cloudflare and Storswift will be shutting down their <Highlight>`fastnet`</Highlight> relays in September in order to enable us to execute these scream tests.\\n   (As usual, note that you should not be relying on any specific relay but have some sort of fallback mechanism using all available relays if liveness is critical to your project.)\\n3. We will stop operating HTTP and Gossipsub relays for the <Highlight>`fastnet`</Highlight> network completely on **October 21st**. The nodes and the network itself will continue to run until November 6th.\\n4. On **November 6th**, the League of Entropy nodes running the <Highlight>`fastnet`</Highlight> network will stop operating it and **delete ALL secret key material** related to it, effectively preventing any future beacons being produced or the network restarting.\\n\\n## Why a scream test?\\nThe goal of a scream test is that any affected users should notice that the network is not being relayed anymore and should be able to take action to prevent any significant downtime of their own services.\\n\\nNote that the network will continue to operate without disturbance during this time and all beacons that are meant to be produced in September and October will still be produced.\\n\\n## Effect on timelocked ciphertexts\\n\\nAs you may know, the League of Entropy <Highlight>`fastnet`</Highlight> and <Highlight>`quicknet`</Highlight> networks both enable you to timelock messages that cannot be decrypted until a given beacon round has been emitted by the network. You can read more about timelock in [our documentation](https://docs.drand.love/docs/concepts/2-4-concepts-timelock-encryption).\\n\\nThe destruction of all key material related to the <Highlight>`fastnet`</Highlight> network has the unfortunate side-effect of preventing ciphertexts that were timelocked using it towards later dates to ever be decryptable.\\n\\nThe alternative to allow timelocked ciphertexts to be decryptable in the future would be to reveal all key material, however this would mean that ciphertexts not meant to be decrypted for years and years could be decrypted early, which would break the security guarantees that the League of Entropy timelock service, tlock, strives to achieve.\\n\\nIf you believe there would be value in having a timelock service with the guarantee that ciphertexts can be decrypted, even in the case of a network deprecation even if that means decrypting them too early, please come and discuss it with us on our Slack workspace.\\nIf there is high demand, the League of Entropy could create a new network with the promise of revealing secret material should it ever need to shut it down.\\nHowever this is currently not the case for the <Highlight>`fastnet`</Highlight> and <Highlight>`quicknet`</Highlight> networks and therefore we prefer to destroy all key material.\\n\\n## Wait, I\u2019m using <Highlight>`fastnet`</Highlight>\\n\\nIf you are still using the <Highlight>`fastnet`</Highlight> network, we recommend you plan migrating to our <Highlight>`quicknet`</Highlight> network.\\n\\nThey are both operating with signatures on the smaller G1 group of BLS12-381, they are both enabling timelock encryption and they are both running with a period of 3 seconds.\\n\\nThere are only two gotchas with migrating to the <Highlight>`quicknet`</Highlight> network.\\n\\nThe first gotcha is that you will have to properly \u201cmap\u201d which <Highlight>`quicknet`</Highlight> round corresponds to what \u201cepoch\u201d in your own systems, since the <Highlight>`fastnet`</Highlight> network is older and running at the same frequency as <Highlight>`quicknet`</Highlight>, you will be \u201cre-using\u201d the same round numbers as you\u2019ve already used in <Highlight>`fastnet`</Highlight> for the next year or so.\\n\\nIf you were previously just using the drand rounds based on the genesis time and the current time, note that you might not have to change anything other than using the new genesis time and the new public key for the network.\\n\\nThe second one is that we\u2019re now conforming to RFC9380 and using the correct DST on G1, so if you\u2019ve re-implemented the cryptographic operations needed to verify signatures or do timelock encryption, you might have to change your code\\n\\nOtherwise if you\u2019re relying on one of our own libraries in [Go](https://github.com/drand/go-clients), [Typescript](https://github.com/drand/drand-client), or [Rust](https://github.com/randa-mu/drand-client-rs), as well as the third party rust libraries [drand-verify](https://github.com/noislabs/drand-verify/) or Rust client [dee](https://github.com/thibmeu/drand-rs), these already support the <Highlight>`quicknet`</Highlight> network.\\n\\nIf you need help or advice with migrating away from <Highlight>`fastnet`</Highlight> to <Highlight>`quicknet`</Highlight>, once again, don\u2019t be shy: there are many members in the League of Entropy, and we\u2019re always delighted to discuss with our users in our Slack workspace.\\nYou can also reach us by email: <Highlight>`leagueofentropy@googlegroups.com`</Highlight>\\n\\n---"},{"id":"create-a-notion-widget","metadata":{"permalink":"/blog/create-a-notion-widget","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2024-07-26-creating-a-notion-widget-to-display-the-latest-pub.md","source":"@site/blog/2024-07-26-creating-a-notion-widget-to-display-the-latest-pub.md","title":"Notion Widget for drand Public Randomness!","description":"Creating a Notion Widget to display the latest Public Randomness from drand!","date":"2024-07-26T00:00:00.000Z","tags":[{"inline":false,"label":"How-to","permalink":"/blog/tags/how-to","description":"how to tag"},{"inline":false,"label":"Beginner","permalink":"/blog/tags/beginner","description":"beginner tag"},{"inline":false,"label":"Features","permalink":"/blog/tags/features","description":"begginer tag"}],"readingTime":5.536666666666667,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"create-a-notion-widget","title":"Notion Widget for drand Public Randomness!","description":"Creating a Notion Widget to display the latest Public Randomness from drand!","authors":["yolan"],"tags":["how-to","beginner","features"],"date":"2024-07-26T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"fastnet sunsetting dates are set","permalink":"/blog/fastnet-sunsetting-dates-set"},"nextItem":{"title":"Retro on the drand testnet outage of Feb 21, 2024","permalink":"/blog/retro-drand-testnet-outage-2024-02-21"}},"content":"## Creating a Notion Widget to display the latest Public Randomness from drand!\\n\\nIn this blog post, we\u2019ll dive into creating a simple Notion widget that displays the latest public randomness from drand (for both the `default` and `quicknet` beacons from the League of Entropy network).\\n\\n\x3c!-- truncate --\x3e\\n\\n## An overview of drand\\n\\nOur earlier [blog](/blog/a-guide-on-how-to-use-drand) post titled \\"A Guide on How to Use drand\\", explains the importance of public randomness and how drand provides it using a threshold network. It offers a step-by-step tutorial on setting up and using drand\'s randomness in applications, including fetching randomness with JavaScript, verifying it, and using it in real-life scenarios like coin flips and random selection. The guide emphasizes fairness and verifiability in applications requiring random numbers.\\n\\nIn a nutshell, drand uses a threshold network, where multiple parties collaborate to generate random numbers, ensuring no single entity can predict or bias the outcome. By leveraging hashed signatures without a complete secret key held by any party, drand achieves verifiable randomness. This system\'s reliability and unpredictability make it ideal for projects with a dependency on secure and verifiable randomness.\\n\\n## Step into Notion Widgets\\n\\nNotion widgets are customizable, embedded elements that can be added to Notion pages to enhance functionality and interactivity. These widgets can display real-time information, like clocks, weather updates, calendars, or external content such as videos, and integrate third-party services directly within Notion. They are typically created using code snippets or widget creation tools and then embedded in Notion using the embed block feature. This enhances productivity and information accessibility within Notion workspaces.\\n\\nLet\u2019s make a drand notion widget!\\n\\n## ReactJS Component\\n\\nThe first step is to create a basic ReactJS application that can be embedded in any Notion page. To fetch the latest randomness beacon, the application will need to integrate drand JavaScript client. The client is publicly available https://github.com/drand/drand-client.\\n\\nFirstly, we will create a new React project and then install the [drand client](https://www.npmjs.com/package/drand-client). It is the same client used in the previous blog post. We will use it to interact with the drand randomness beacon networks (default network and quicknet) in our ReactJS code. \\n\\n```bash\\nnpm install drand-client\\n```\\n\\nOnce the drand client is installed, we\u2019re ready to start implementing our simple ReactJS application! The application will allow users to select their desired network (i.e., default or quicknet) from a dropdown menu and display the latest randomness after each round, the round number and a countdown to the next randomness generation round or ETA. \\n\\nAppropriate API URLs for the mainnet default and quicknet networks can be found here: [https://docs.drand.love/docs/dev-guide/3-0-dev-guide](https://docs.drand.love/docs/dev-guide/3-0-dev-guide)\\n\\nLet\u2019s implement the reactjs component in our `App.js` file.\\n\\n```jsx\\n// React is the main library for building the UI components\\n// useState, useEffect, useRef are React hooks for managing state, side effects, and mutable references, respectively.\\nimport React, { useState, useEffect, useRef } from \'react\';\\n// This library is used to interact with the drand (decentralized randomness) network.\\nimport { watch, FastestNodeClient } from \'drand-client\';\\n// A built-in JavaScript object for handling large integers, declared global to avoid ESLint issues.\\n/* global BigInt */\\n```\\n\\nThe main functional component of the React app is the App() function. Let\u2019s go ahead and start implementing it.\\n\\n```jsx\\nfunction App() {\\n```\\n\\nLet\u2019s add some state variables!\\n\\n```jsx\\n// The latest randomness value\\nconst [latestRandomness, setLatestRandomness] = useState(null);\\n// The estimated time of arrival of the next randomness\\nconst [eta, setETA] = useState(null);\\n// The current round number\\nconst [round, setRound] = useState(null);\\n// The current selected network\\nconst [network, setNetwork] = useState(\'default\');\\n// A reference to the drand client instance\\nconst clientRef = useRef(null);\\n// A reference to an AbortController for managing asynchronous tasks\\nconst abortControllerRef = useRef(null);\\n```\\n\\nFollowing the state variables, we will implement the rest of the JavaScript fo the App component.\\n\\n```jsx\\n// useEffect runs the fetchLatestRandomness function when the component \\n// mounts or when network changes.\\nuseEffect(() => {\\n\\t\\t// fetchLatestRandomness async function to fetch randomness data.\\n    const fetchLatestRandomness = async () => {\\n      try {\\n\\t      // chainHash, publicKey are set based on the selected network.\\n        let chainHash, publicKey;\\n        let updateInterval = 30 * 1000;\\n\\n        if (network === \'default\') {\\n          chainHash = \'8990e7a9aaed2ffed73dbd7092123d6f289930540d7651336225dc172e51b2ce\';\\n          publicKey = \'868f005eb8e6e4ca0a47c8a77ceaa5309a47978a7c71bc5cce96366b5d7a569937c529eeda66c7293784a9402801af31\';\\n        } else if (network === \'quicknet\') {\\n          chainHash = \'52db9ba70e0cc0f6eaf7803dd07447a1f5477735fd3f661792ba94600c84e971\';\\n          publicKey = \'83cf0f2896adee7eb8b5f01fcad3912212c437e0073e911fb90022d3e760183c8c4b450b6a0a6c3ac6a5776a2d1064510d1fec758c921cc22b0e17e63aaf4bcb5ed66304de9cf809bd274ca73bab4af5a6e9c76a4bc09e76eae8991ef5ece45a\';\\n          updateInterval = 3 * 1000;\\n        }\\n\\n        const options = {\\n          disableBeaconVerification: false,\\n          noCache: false,\\n          chainVerificationParams: { chainHash, publicKey }\\n        };\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// List of drand API endpoints\\n        let urls = [\\n          \'https://api.drand.sh\',\\n          \'https://api2.drand.sh\',\\n          \'https://api3.drand.sh\',\\n          \'https://drand.cloudflare.com\'\\n        ];\\n\\n        if (network === \'quicknet\') {\\n          urls = urls.map(url => `${url}/${chainHash}`);\\n        }\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// Create an instance of FastestNodeClient from drand-client\\n        const headers = { \'Access-Control-Allow-Origin\': \'*\', \'Access-Control-Allow-Credentials\': \'true\' };\\n        const client = new FastestNodeClient(urls, options, { headers });\\n\\n        if (clientRef.current) {\\n          clientRef.current.stop();\\n        }\\n        if (abortControllerRef.current) {\\n          abortControllerRef.current.abort();\\n        }\\n\\n        clientRef.current = client;\\n        client.start();\\n\\n        const abortController = new AbortController();\\n        abortControllerRef.current = abortController;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// Asynchronously iterates over beacons (randomness values) \\n\\t\\t\\t\\t// from the drand network\\n        for await (const beacon of watch(client, abortController)) {\\n          const currentTime = new Date().getTime();\\n          // Calculate and set the next ETA for randomness\\n          const nextETA = new Date(currentTime + updateInterval);\\n          // Update state with new randomness data\\n          setETA(nextETA.toLocaleTimeString());\\n          setRound(beacon.round);\\n          setLatestRandomness(BigInt(`0x${beacon.randomness}`).toString());\\n        }\\n      } catch (error) {\\n        console.error(\'Error fetching randomness:\', error);\\n      }\\n    };\\n\\n    fetchLatestRandomness();\\n\\n    return () => {\\n      if (clientRef.current) {\\n        clientRef.current.stop();\\n      }\\n      if (abortControllerRef.current) {\\n        abortControllerRef.current.abort();\\n      }\\n    };\\n  }, [network]);\\n```\\n\\nNext, we will add a function called `handleNetworkChange` to update the `network` state when the user selects a different network.\\n\\n```jsx\\nconst handleNetworkChange = (event) => {\\n    setNetwork(event.target.value);\\n  };\\n```\\n\\nIn the next part of the react component implementation, customise the JSX to render the UI as preferred. In our example, the UI displays a dropdown menu for users to select the preferred network (i.e., default or quicknet), the ETA of the next randomness, the latest round and the latest randomness.\\n\\n```jsx\\nreturn (\\n    <div className=\\"App\\">\\n      <header className=\\"App-header\\">\\n        <h1>Latest Randomness from drand Beacon</h1>\\n\\n        <div>\\n          Select Beacon Network:\\n          <select value={network} onChange={handleNetworkChange} style={{ marginLeft: \'10px\' }}>\\n            <option value=\\"default\\">Default</option>\\n            <option value=\\"quicknet\\">Quicknet</option>\\n          </select>\\n        </div>\\n\\n        <br />\\n\\n        Next Randomness ETA: {eta ? (\\n          <p>{eta}</p>\\n        ) : (\\n          <p>Loading...</p>\\n        )}\\n\\n        Latest Round: {round ? (\\n          <p>{round}</p>\\n        ) : (\\n          <p>Loading...</p>\\n        )}\\n\\n        Latest Randomness: {latestRandomness ? (\\n          <p>{latestRandomness}</p>\\n        ) : (\\n          <p>Loading...</p>\\n        )}\\n      </header>\\n    </div>\\n  );\\n\\nexport default App;\\n```\\n\\nOnce implemented, to start the React application, run \\n\\n```bash\\nnpm start\\n```\\n\\nThis will launch the application on\xa0`http://localhost:3000`. Open this URL in your browser to see the latest randomness from the drand beacon.\\n\\nAt this point, you\'ve successfully created a React web page that fetches and displays randomness from the drand distributed randomness beacon! This setup can be a foundation for more complex applications requiring secure and verifiable randomness. \\n\\nBefore embedding our react app into a Notion page, we need to create a GitHub repository and push our code to the repository. This will allow us to use GitHub Pages to publish our React application to the web!\\n\\n## GitHub Pages Component\\n\\nNow that you\'ve built a React app to display randomness from the drand beacon, the next step is to deploy it on GitHub Pages. This will make your application accessible on the web.\\n\\n### Step 1: Install GitHub Pages Package\\n\\nFirst, you need to install the\xa0[`gh-pages`](https://www.npmjs.com/package/gh-pages)\xa0package, which will help you deploy your app to GitHub Pages.\\n\\n### Step 2: Update\xa0`package.json`\\n\\nNext, update your\xa0`package.json`\xa0file to include the homepage, predeploy, and deploy scripts.\\n\\n1. **Homepage**: Add a\xa0`homepage`\xa0field to specify the URL where your app will be hosted. This is typically\xa0`https://<username>.github.io/<repository-name>`.\\n2. **Scripts**: Add\xa0`predeploy`\xa0and\xa0`deploy`\xa0scripts.\\n\\nHere\u2019s an example of how your\xa0`package.json`\xa0should look:\\n\\n```jsx\\n{\\n  \\"name\\": \\"drand-notion-widget\\",\\n  \\"version\\": \\"0.1.0\\",\\n  \\"private\\": true,\\n  \\"homepage\\": \\"<https://yourusername.github.io/drand-notion-widget>\\",\\n  \\"dependencies\\": {\\n    \\"drand-client\\": \\"^0.3.1\\",\\n    \\"react\\": \\"^17.0.2\\",\\n    \\"react-dom\\": \\"^17.0.2\\",\\n    \\"react-scripts\\": \\"4.0.3\\"\\n  },\\n  \\"scripts\\": {\\n    \\"start\\": \\"react-scripts start\\",\\n    \\"build\\": \\"react-scripts build\\",\\n    \\"predeploy\\": \\"npm run build\\",\\n    \\"deploy\\": \\"gh-pages -d build\\"\\n  },\\n  \\"devDependencies\\": {\\n    \\"gh-pages\\": \\"^3.2.3\\"\\n  }\\n}\\n```\\n\\nReplace\xa0`<username>`\xa0with your GitHub username and\xa0`<repository-name>`\xa0with the name of your GitHub repository.\\n\\n### Step 3: Initialize Git Repository\\n\\nGo to [GitHub](https://github.com/) and create a new repository with the same name you used in the `homepage` field of your `package.json`. \\n\\nFollow the instructions provided by GitHub to link your local repository to the newly created GitHub repository. \\n\\n### Step 4: Deploy to GitHub Pages\\n\\nFinally, run the deploy script:\\n\\n```bash\\nnpm run deploy\\n```\\n\\nThis command will create a production build of your React app and deploy it to the `gh-pages` branch of your GitHub repository. GitHub Pages will then serve your application from this branch.\\n\\n### Step 5: Access Your Deployed App\\n\\nAfter deploying, your app should be accessible at `https://<username>.github.io/<repository-name>`.\\n\\nBy following these steps, you will have successfully deployed your React application to GitHub Pages, making it accessible to anyone with the URL. Happy deploying!\\n\\n## Putting it Together\\n\\nWith the GitHub Pages URL ready (e.g.,\xa0`https://yourusername.github.io/drand-notion-widget`), we can embed the drand reactjs application we deployed earlier in Notion.\\n\\nOpen the Notion page where you want to embed the URL, and embed it with the following steps:\\n\\n- Click on the\xa0`+`\xa0button to add a new block or type\xa0`/embed`\xa0to bring up the embed block option.\\n\\n![Screenshot 2024-07-25 at 09.41.46.png](/img/Screenshot_2024-07-25_at_09.41.46.png)\\n\\n![Screenshot 2024-07-25 at 09.41.53.png](/img/Screenshot_2024-07-25_at_09.41.53.png)\\n\\n- Select the\xa0`Embed`\xa0option from the list.\\n- Paste your GitHub Pages URL into the embed block.\\n- Press\xa0`Enter`\xa0or click on the\xa0`Embed link`\xa0button.\\n\\nOnce the URL is embedded, you can resize the embed block by dragging the handles on the sides to fit your content appropriately. Notion might show a preview of your web app directly within the page, depending on how your app is configured and the type of content it displays.\\n\\nAn example drand widget embedded in a Notion page is shown below.\\n\\n![Screenshot 2024-07-24 at 15.36.43.png](/img/Screenshot_2024-07-24_at_15.36.43.png)\\n\\n### To Recap\\n\\nWe have successfully created a ReactJS application that displays the latest drand randomness beacon from both drand main network options (default and quicknet)!\\n\\nWe could do more with our Notion widget, e.g., styling it to our preference. To do this, simply modify the ReactJS code and redeploy it using `gh-pages` and the changes should be reflected at the same URL.\\n\\nHappy coding!"},{"id":"retro-drand-testnet-outage-2024-02-21","metadata":{"permalink":"/blog/retro-drand-testnet-outage-2024-02-21","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2024-02-22-Retro-on-the-drand-testnet-outage-offeb-21-2024.md","source":"@site/blog/2024-02-22-Retro-on-the-drand-testnet-outage-offeb-21-2024.md","title":"Retro on the drand testnet outage of Feb 21, 2024","description":"Retro on the drand testnet outage of Feb 21, 2024","date":"2024-02-22T00:00:00.000Z","tags":[{"inline":false,"label":"News","permalink":"/blog/tags/news","description":"news tag"},{"inline":false,"label":"Postmortem","permalink":"/blog/tags/postmortem","description":"postmortem tag"},{"inline":false,"label":"Ceremony","permalink":"/blog/tags/ceremony","description":"ceremony tag"}],"readingTime":3.9466666666666668,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"retro-drand-testnet-outage-2024-02-21","title":"Retro on the drand testnet outage of Feb 21, 2024","description":"Retro on the drand testnet outage of Feb 21, 2024","authors":["yolan"],"tags":["news","postmortem","ceremony"],"date":"2024-02-22T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Notion Widget for drand Public Randomness!","permalink":"/blog/create-a-notion-widget"},"nextItem":{"title":"quicknet is live!","permalink":"/blog/quicknet-live-on-loe-mainnet"}},"content":"## **TL;DR**\\n- Testnet fell behind for 45 minutes.\\n- The ceremony was aborted.\\n- Fallback to non-TLS on some nodes caused the network to fall behind.\\n- Bugs in migration paths and the state machine blocked the ceremony.\\n- We will re-run the ceremony asynchronously.\\n- Testnet has regained stability and is operating normally.\\n\\n\x3c!-- truncate --\x3e \\n\\n## Background\\n\\nOn February 21, 2024, we had to abort our v2.0.2-testnet ceremony after encountering a series of bugs. The `default`, `testnet-g`, and `testnet-unchained-3s` networks were down for about 45 minutes, while `quicknet-t` remained relatively stable.\\n\\nWhile it felt like a disaster, this is precisely why we have a testnet. It\'s better to face issues here than risk the 100% uptime of the mainnet!\\n\\n### **Prior to the Ceremony**\\n\\nWe\'ll focus on the `default` network for the remainder of this post-mortem, though the issues generally applied to the other networks as well. The prior `default` ceremony was in May 2023, nearly a year before this incident. In that ceremony, 12 nodes participated, with a threshold of 7. Due to known, non-deterministic issues in the codebase, 2 nodes failed to complete the distributed key generation. This left the network with 10 operational nodes.\\n\\nIn a previous testnet upgrade (for `quicknet-t` on January 10, 2024), the network upgraded to v2.0.0-testnet. Due to API incompatibilities, nodes on this version couldn\'t connect to nodes older than v1.5.7. cLabs did not participate in this ceremony and failed to upgrade their node since, causing a fork from the rest of the network, leaving the default network with 9 operational nodes.\\n\\nIn preparation for the same ceremony, a new member of Ken Labs accidentally overwrote their `default` keypair with an erroneous command. We\'ve since published a fix to prevent this. Coupled with reverse proxy issues, the Ken Labs node became inoperative, reducing the `default` network to 8 operational nodes\u2014just 1 above the threshold and at risk of halting.\\n\\n### **The Update Before the Ceremony**\\n\\nProtocol Labs updated their nodes to v2.0.2-testnet first, and initially, everything looked fine.\\n\\nIPFS Force soon reported issues starting their node due to a missing `SchemeName` when loading their key pair. They hadn\'t upgraded their node sequentially to v2.0.2-testnet, so their keys didn\'t contain all the correct fields. We quickly published v2.0.3-testnet, which included a simple patch, allowing IPFS Force to upgrade and start their node successfully.\\n\\nAs others started upgrading, we saw an uptick in `http2: frame too large` messages when connecting to some nodes, reported by Automata Network. Knowing Automata Network uses an nginx reverse proxy, we assumed it was related to misconfigured nginx gRPC proxies. We debugged with Automata Network, restarted the nodes, and the error disappeared temporarily.\\n\\nAs more nodes updated, they reported similar errors, and restarts no longer resolved the issues. Additionally, the `http2: frame too large` error inconsistently affected different nodes. Automata and QRL also reported `error reading server preface: EOF` when connecting to PL nodes.\\n\\nThe network stopped aggregating beacons as usual due to these connectivity issues. Periodic aggregations occurred, but not fast enough to catch up.\\n\\nWhile debugging and assisting DIA data, we found their node had joined `quicknet-t` with the `TLS` field set to false. In v2.0.2-testnet, we removed TLS termination from the drand binary, expecting members to handle TLS via a reverse proxy. Our nodes connected to DIA over plaintext, which was unexpected but not a security issue (everything in drand is signed and verified).\\n\\nThis fallback to non-TLS connections explained the errors we saw. QRL logs confirmed their node dropped to non-TLS connections, causing the `http2: frame too large` and `error reading server preface: EOF` errors. We quickly shipped patch v2.0.4-testnet, and as nodes updated, the network began to recover.\\n\\n### **The Ceremony**\\n\\nAfter allowing the network to catch up, we proceeded with the leader\'s ceremony instructions but encountered an error.\\n\\nDuring the first load of a daemon on v2.x after a v1.5.x ceremony, the group file migrates into the DKG database. This worked as expected, but a change in our signature scheme required fetching new signatures for participating nodes. An oversight caused even the keys for nodes leaving the network to attempt to fetch, leading to failures in generating a valid proposal.\\n\\nTo avoid further updates, we deployed a patched version to our leader node and generated a proposal successfully.\\n\\nWith the patched version, we initiated the resharing on the leader node but encountered an invalid packet signature error. Another node received our packet, attempted to gossip it, and the signature was deemed invalid. Despite our DKG database reporting a successful proposal, we were unsure of other nodes\' states.\\n\\nFacing time pressure, we decided to abort the DKG and retry. The leader can issue aborts unilaterally, and this packet gossiped without issue.\\n\\nIn hindsight, we should have asked other LoE members for their `drand dkg status` output to confirm receipt of the proposal. If all had received it, we could have continued the resharing.\\n\\nAfter aborting, we attempted to restart the ceremony but faced another bug. Nodes keep copies of the last successful DKG state and the most recent interim state. Comparing the new proposal against the interim state, rather than the complete state, caused rejection by the leader node and other nodes.\\n\\nWe instructed LoE members to stop their nodes, run `drand dkg nuke --id default`, and restart their nodes, restoring the v1.5.x DKG state and refreshing the interim state. With some members unable to commit more time, we called off the ceremony.\\n\\n### **Next Steps**\\n\\n- Testnet LoE members who haven\'t run `drand dkg nuke --id default` should do so at their earliest convenience.\\n- The drand team will patch all identified issues and release a new version.\\n- The drand team will add additional testing for erroneous flows and DKG timeouts.\\n- We will instruct LoE members to upgrade more gradually ahead of any ceremony to identify issues sooner.\\n- We will perform an asynchronous testnet ceremony in the coming weeks.\\n- We will run a mainnet ceremony on v1.5.9 to ensure all required upgrade paths are met.\\n\\n### **Final Thoughts**\\n\\nThis was not a good look for the drand team. Drand v2 has been in the pipeline for over a year, and this is the second aborted ceremony in a row. We owe an apology to the League of Entropy members for wasting their time. This shouldn\u2019t happen.\\n\\nAfter numerous ceremonies last year, everyone is experiencing ceremony fatigue. Mandating early or late participation is unsustainable. v2 promises fully asynchronous ceremonies, eliminating the need for everyone to be online at once. The leader can start the ceremony, and members can join anytime over a week.\\n\\nOutages, especially in distributed systems, often result from multiple bugs in succession. This outage was no exception. In v2, many things changed, leading to a confluence of edge cases. We should have done many small releases instead of one large one.\\n\\nThank you to everyone who participated. We are continually impressed by the professionalism and engagement of League of Entropy members. Without you, we wouldn\u2019t be running the flagship threshold network serving over a billion requests per month.\\n\\n---"},{"id":"quicknet-live-on-loe-mainnet","metadata":{"permalink":"/blog/quicknet-live-on-loe-mainnet","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2023-10-15-quicknet-is-live-on-League-of-Entropy-mainnet.md","source":"@site/blog/2023-10-15-quicknet-is-live-on-League-of-Entropy-mainnet.md","title":"quicknet is live!","description":"quicknet is live on League of Entropy mainnet","date":"2023-10-15T00:00:00.000Z","tags":[{"inline":false,"label":"News","permalink":"/blog/tags/news","description":"news tag"}],"readingTime":6.21,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"quicknet-live-on-loe-mainnet","title":"quicknet is live!","description":"quicknet is live on League of Entropy mainnet","authors":["yolan"],"tags":["news"],"date":"2023-10-15T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Retro on the drand testnet outage of Feb 21, 2024","permalink":"/blog/retro-drand-testnet-outage-2024-02-21"},"nextItem":{"title":"Announcing Randamu!","permalink":"/blog/announcing-randamu"}},"content":"## quicknet is live on League of Entropy mainnet\\n\\nWe are thrilled to announce the General Availability (GA) of our brand new `quicknet` drand network running on the `mainnet` nodes. This significant upgrade harnesses the capabilities of the new unchained randomness mode, enables timelock encryption in production, and delivers outputs at a much faster frequency of **3 seconds**!\\n\\nThe network has now been running without issues for a month and a half since its launch on August 23rd, and we\u2019ve seen our first early adopters start transitioning to it successfully.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83c\udf1f Key Features of `quicknet` drand Network\\n\\nKeep reading to learn more details about the new features this network launch enables:\\n\\n- **Unchained randomness mode:** This allows for **faster and simpler beacon verification**. Furthermore, unchained mode allows one to predict the message that will be signed in a future round (but nothing else), thus enabling \u201c**timelock encryption**\u201d!\\n- **Runs on the League of Entropy\u2019s mainnet nodes:** Offers robustness, scalability, and reliability to our users. It runs on the same nodes that have been flawlessly delivering beacons every 30 seconds for the past 3 years without missing a beat.\\n- **3-second frequency:** Quicker generation compared to the legacy frequency, enabling faster applications, better UX, and higher throughput.\\n- **Shorter beacons:** Thanks to the G1-G2 swap that we\u2019re detailing below, we\u2019ve been able to cut our signatures\u2019 size by 50%!\\n\\n## The `quicknet` Details\\n\\nWe successfully launched the `quicknet-t` Testnet beacon chain on July 13th and more recently the `quicknet` one on our Mainnet on August 23rd.\\n\\nThey are both available on our HTTPS relays, just like the previous `default` network.\\n\\nAll available chains on a given relay can be queried using the `/chains` endpoint, e.g. [https://api.drand.sh/chains](https://api.drand.sh/chains) returns:\\n\\n```jsx\\n[\\n  \\"dbd506d6ef76e5f386f41c651dcb808c5bcbd75471cc4eafa3f4df7ad4e4c493\\",\\n  \\"52db9ba70e0cc0f6eaf7803dd07447a1f5477735fd3f661792ba94600c84e971\\",\\n  \\"8990e7a9aaed2ffed73dbd7092123d6f289930540d7651336225dc172e51b2ce\\"\\n]\\n\\n```\\n\\nwhich are the chain-hashes of the `fastnet`, `quicknet`, and `default` chains respectively.\\n\\nThe same holds for our testnet relays, e.g. [https://pl-us.testnet.drand.sh/chains](https://pl-us.testnet.drand.sh/chains) returns the following chains:\\n\\n- `84b2234fb34e835dccd048255d7ad3194b81af7d978c3bf157e3469592ae4e02` our initial, `default` testnet launched in May 2020 and running in chained mode.\\n- `7672797f548f3f4748ac4bf3352fc6c6b6468c9ad40ad456a397545c6e2df5bf` our G2 based unchained testnet, launched in May 2022 and *compatible with timelock on G2*.\\n- `f3827d772c155f95a9fda8901ddd59591a082df5ac6efe3a479ddb1f5eeb202c` our `testnet-g` unchained beacon chain, featuring our non-RFC compliant G1 signature scheme.\\n- `cc9c398442737cbd141526600919edd69f1d6f9b4adb67e4d912fbc64341a9a5` which is our latest `quicknet-t` network, featuring RFC compliant BLS12-381 G1 based BLS signatures!\\n\\nCheck our [DevGuide: HTTP API](https://docs.drand.love/docs/dev-guide/3-4-dev-guide-http-api) for more information about our public endpoints!\\n\\n## `quicknet-t`\\n\\nYou can always get more details about a given chain by querying its `{chainhash}/info` endpoint, e.g. [https://testnet-api.drand.cloudflare.com/cc9c398442737cbd141526600919edd69f1d6f9b4adb67e4d912fbc64341a9a5/info](https://testnet-api.drand.cloudflare.com/cc9c398442737cbd141526600919edd69f1d6f9b4adb67e4d912fbc64341a9a5/info) returns the `quicknet-t` details:\\n\\n```jsx\\n{\\n  \\"public_key\\": \\"b15b65b46fb29104f6a4b5d1e11a8da6344463973d423661bb0804846a0ecd1ef93c25057f1c0baab2ac53e56c662b66072f6d84ee791a3382bfb055afab1e6a375538d8ffc451104ac971d2dc9b168e2d3246b0be2015969cbaac298f6502da\\",\\n  \\"period\\": 3,\\n  \\"genesis_time\\": 1689232296,\\n  \\"hash\\": \\"cc9c398442737cbd141526600919edd69f1d6f9b4adb67e4d912fbc64341a9a5\\",\\n  \\"groupHash\\": \\"40d49d910472d4adb1d67f65db8332f11b4284eecf05c05c5eacd5eef7d40e2d\\",\\n  \\"schemeID\\": \\"bls-unchained-g1-rfc9380\\",\\n  \\"metadata\\": { \\"beaconID\\": \\"quicknet-t\\" }\\n}\\n\\n```\\n\\n## `quicknet`\\n\\nThe same holds for our mainnet relays. Any given beacon chain information can be queried from our HTTP relays, e.g. [https://api.drand.sh/52db9ba70e0cc0f6eaf7803dd07447a1f5477735fd3f661792ba94600c84e971/info](https://api.drand.sh/52db9ba70e0cc0f6eaf7803dd07447a1f5477735fd3f661792ba94600c84e971/info) returns the `quicknet` details:\\n\\n```jsx\\n{\\n  \\"public_key\\": \\"83cf0f2896adee7eb8b5f01fcad3912212c437e0073e911fb90022d3e760183c8c4b450b6a0a6c3ac6a5776a2d1064510d1fec758c921cc22b0e17e63aaf4bcb5ed66304de9cf809bd274ca73bab4af5a6e9c76a4bc09e76eae8991ef5ece45a\\",\\n  \\"period\\": 3,\\n  \\"genesis_time\\": 1692803367,\\n  \\"hash\\": \\"52db9ba70e0cc0f6eaf7803dd07447a1f5477735fd3f661792ba94600c84e971\\",\\n  \\"groupHash\\": \\"f477d5c89f21a17c863a7f937c6a6d15859414d2be09cd448d4279af331c5d3e\\",\\n  \\"schemeID\\": \\"bls-unchained-g1-rfc9380\\",\\n  \\"metadata\\": { \\"beaconID\\": \\"quicknet\\" }\\n}\\n\\n```\\n\\n## Sun-setting of `fastnet`\\n\\nIf you\'ve been following our blog, you\'ll remember our previous post about [Timelock Encryption is now supported on drand mainnet](/blog/timelock-encryption-is-now-supported-on-drand-mainnet) where we announced the launch of our new `fastnet` network that supported our timelock scheme. The League of Entropy launched this new drand network on March 1st, 2023. However, we quickly identified an issue with our BLS signatures on G1 that made them non-compliant with the Hash To Curve [RFC 9380](https://www.ietf.org/rfc/rfc9380.html) specification, as well as most BLS signatures implementations on G1 apart from ours. Therefore, we had to double down and launch the `quicknet` network to fix this issue.\\n\\nWe\u2019ll be sun-setting `fastnet` in the coming months [as announced previously](/blog/fastnet-to-be-sunset). We are currently going to scale down `fastnet` by another 3 nodes in November, and we\u2019ll be shutting it down completely at the earliest opportunity. Please reach out to\\n\\nus if this is a concern for you or your team.\\n\\n> \u2139\ufe0f NOTE: The default chained beacon network remains available with its legacy frequency of 30s for those who require it. We might consider deprecating it at some point in the next 18 months, but nothing is set in stone yet.\\n> \\n\\n## Shoutout to the League of Entropy \ud83e\udd1d\\n\\nOur decentralization journey wouldn\'t be possible without [The League of Entropy][LOE]. We are delighted to share that all members in the League of Entropy are running the `quicknet` drand network alongside the `default` chained beacon network on the League\u2019s network of 23 nodes.\\n\\nA big shoutout to the League of Entropy for their invaluable contributions, running drand nodes for free for anyone to use whenever one needs public, verifiable randomness. Together, we\'re pioneering a faster, more decentralized future for randomness generation, with this new unchained network enabling a host of new possibilities for our users!\\n\\n## Get Started \ud83d\ude80\\n\\nFor developers and users eager to dive into the new `quicknet` drand network, our [official documentation](https://docs.drand.love/docs/category/30-developers-guide) provides detailed resources about using drand relays and beacons.\\n\\nWe also have a blog post about \u201c[drand for beginners](/blog/drand-explainer-for-begginers)\u201d that\u2019s packed with useful information and another one about [using drand on-chain](/blog/drand-on-filecoin-virtual-machine-FVM-draffle) with a demo lottery use-case running on the Filecoin Virtual Machine.\\n\\n## G1 - G2 Swap\\n\\nLet us see what the G1-G2 swap really means!\\n\\nThe BLS signature schemes operate on \u201cpairing-friendly\u201d elliptic curves. These curves typically define 3 groups that are of interest to the cryptographer: the group G1 and G2 and the so-called \u201ctarget group\u201d GT onto which a [pairing operation](https://en.wikipedia.org/wiki/Pairing-based_cryptography) will allow projecting points from the groups G1 and G2 in a bilinear manner.\\n\\nIn the current instantiations of drand networks, we\u2019re relying on the pairing-friendly curve BLS12-381, whose groups G1 and G2 have points that can be encoded in 48 bytes and 96 bytes, respectively.\\n\\nTherefore, it usually makes sense for BLS signatures to be instantiated with the **public key** over G1 and the **signatures** over G2, meaning *shorter* public keys but *longer* signatures. This is so because the BLS signature scheme allows for **signature aggregation**, which means we can aggregate multiple signatures for different public keys into a single aggregated signature that verifies against the many public keys. Using short public keys but long signatures minimizes the overall size of the data required for verification.\\n\\nHowever, this does not apply to drand\u2019s beacons since new ones are generated at a fixed frequency, each with its own signature. Therefore, it makes more sense for drand\u2019s beacons to have shorter signatures and a longer group public key, since we cannot benefit from the aggregation capabilities of BLS signatures and the public key for a given group never changes, and can thus be stored only once, unlike the signatures which need to be stored for each single beacon.\\n\\nThis is the reason why it makes more sense given the way drand beacons work to have the public key of the group on G2 (i.e. be of size 96 bytes) and have the signatures of the beacons on the group G1 of BLS12-381 (i.e. be encoded into only 48 bytes).\\n\\nThis swap allowed us to **reduce the size of the drand beacons emitted by the new `quicknet` network by 50%**, as well as to **increase the performance and reduce the gas cost** of any on-chain operations pertaining to drand beacons produced by `quicknet`.\\n\\n## Unchained Mode\\n\\nWe\u2019ve introduced the notion of [unchained beacons](/blog/multi-frequency-support-and-timelock-encryption-are-coming-to-drand) last year on the blog already. But in essence, the new drand network brings a host of improvements aimed at enhancing the overall UX for drand users and developers. The \'unchained mode\' means that new random beacons are entirely independent from previous ones, meaning that you can now perform stateless verification of a beacon, without having to keep a record of past beacons!\\n\\nThese enhancements are designed to make the drand network more robust, efficient, and user-friendly. They help in reducing the computational and storage load of our users, making drand more cost-effective and faster. The unchained nature of the beacons also means you can now decide to sample only one every 5 beacons to have a frequency of 15s or one every 20 beacons to have a frequency of 1 minute! This significantly improves flexibility and scalability for everyone.\\n\\nWe\u2019re looking forward to your projects and ideas, don\u2019t hesitate to [join our Slack workspace](https://join.slack.com/t/drandworkspace/shared_invite/zt-19u4rf6if-bf7lxIvF2zYn4~TrBwfkiA) to discuss these.\\n\\n## Security Considerations\\n\\nFinally, you might be wondering what these changes might mean from a **security** point of view. On that front, the guarantees of the League of Entropy (LoE) network remain the same:\\n\\n- A random beacon **cannot be predicted** unless a threshold number of LoE nodes collude (current threshold is 12 out of 22 nodes; it should increase as the League of Entropy onboards new members).\\n- A random beacon **cannot be biased** by anybody unless the attacker is able to change the public key of the group, which should be hard-coded in your code.\\n\\nThe fact that the drand beacons are now **unchained** might give the *false impression* that they are *less secure* than the previous ***chained*** ones, however this is not the case:\\n\\n- **Predictability:** An attacker controlling a threshold number of shares is able to predict any arbitrary round in the unchained setting, whereas they would need to compute all intermediary rounds to predict a given future round with the chained setting. *However*, controlling a threshold amount of shares at any point in time allows computation of the shared secret of the group, and nothing can prevent such an attacker having obtained the group secret from then computing all future chained rounds offline much faster than the existing network would have, leading to the same result as in the unchained case: complete predictability of all future rounds in case of a compromise of either scheme.\\n- **Bias:** All future beacons are entirely determined by two things: the initial Distributed Key Generation and their round number. This was already the case for the chained network and hasn\u2019t changed with the unchained schemes. For a given distributed group public key, future rounds cannot be biased in any way after the initial Distributed Key Generation ceremony has been run.\\n\\nWe\u2019ve also made sure our new Timelock Encryption service relying on our new `quicknet` network was [properly audited](/blog/security-assessment-of-tlock). We\u2019ve got you covered!\\n\\n## Extra Liveness!\\n\\nFrom a **liveness** point of view, the way the drand nodes operate hasn\u2019t changed and we are very happy to announce the availability of a new official HTTP relay run by [StorSwift](https://www.storswift.com/), a dear member of the League of Entropy. Their relay is reachable at [https://api.drand.secureweb3.com:6875](https://api.drand.secureweb3.com:6875/) and as you can see by querying [https://api.drand.secureweb3.com:6875/chains](https://api.drand.secureweb3.com:6875/chains), it provides access to both our mainnet `default` and mainnet `quicknet` beacons. It is also located in Asia.\\n\\nAs you can see, the League of Entropy\u2019s and drand\u2019s security, liveness, and availability are not impacted in any way by these changes - on the contrary.\\n\\n## Onward!\\n\\nThat\u2019s it, we\u2019ve launched everything we need to allow you to start using Timelock Encryption or drand random beacons right now in your services! And actually, people do!\\n\\nIf you are already doing so, or plan on doing so, don\u2019t hesitate to join our [drand Slack](https://join.slack.com/t/drandworkspace/shared_invite/zt-19u4rf6if-bf7lxIvF2zYn4~TrBwfkiA), since we love hearing about what people are doing with what we\u2019ve built!\\n\\nUntil next time! \ud83d\ude04\\n\\n---\\n\\n[LOE]: https://drand.love/1e76674b75e249699445799c5083fe78"},{"id":"announcing-randamu","metadata":{"permalink":"/blog/announcing-randamu","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2023-10-03-Announcing-Randamu.md","source":"@site/blog/2023-10-03-Announcing-Randamu.md","title":"Announcing Randamu!","description":"Randamu is a spin off of the drand project with the original team members from Protocol Labs.","date":"2023-10-03T00:00:00.000Z","tags":[{"inline":false,"label":"News","permalink":"/blog/tags/news","description":"news tag"},{"inline":false,"label":"update","permalink":"/blog/tags/update","description":"update tag"},{"inline":false,"label":"League-of-Entropy","permalink":"/blog/tags/League-of_entropy","description":"league of entropy tag"}],"readingTime":1.26,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"},{"name":"Patrick McClurg","title":"Co-founder, CTO (Randamu)","description":"Randamu, drand, threshold cryptography\\nPolyglot developer\\n","page":{"permalink":"/blog/authors/patrick"},"imageURL":"/img/author/patrick.jpeg","key":"patrick"},{"name":"Laith Alissa","title":"Fullstack & DevOps Engineer","description":"I\'m a full stack software engineer & devops who loves to build systems and pipelines meticulously. I care about attention to detail, correctness, and maintainability.\\n","page":{"permalink":"/blog/authors/laith"},"imageURL":"/img/author/laith.jpeg","key":"laith"},{"name":"Erick Watson","title":"Co-Founder & CEO @ Randamu | Decentralized Ecosystem Builder","description":"Erick Watson serves as the CEO of Randamu, a company that specializes in developing leading-edge cryptographic solutions. With over 15 years of experience in leading innovation projects, Erick has a proven track record of delivering value to customers and stakeholders.\\n","page":{"permalink":"/blog/authors/erick"},"imageURL":"/img/author/erick.jpeg","key":"erick"}],"frontMatter":{"slug":"announcing-randamu","title":"Announcing Randamu!","description":"Randamu is a spin off of the drand project with the original team members from Protocol Labs.","authors":["yolan","patrick","laith","erick"],"tags":["news","update","league-of-entropy"]},"unlisted":false,"prevItem":{"title":"quicknet is live!","permalink":"/blog/quicknet-live-on-loe-mainnet"},"nextItem":{"title":"fastnet to be sunset, long live quicknet","permalink":"/blog/fastnet-to-be-sunset"}},"content":"Dear Friends & Colleagues,\\n\\nTOPLINE: After four years of stewarding the [drand](https://github.com/drand) project on behalf of [LoE](https://leagueofentropy.com/), [Protocol Labs](https://protocol.ai/) has decided to spin off our drand team into its own private enterprise, now called [Randamu](https://randa.mu/).\\n\\n\x3c!-- truncate --\x3e\\n\\nBACKGROUND: Protocol Labs is undergoing a slow and steady process of decentralization, expected to culminate by the end of this year. At its conclusion, Protocol Labs will no longer be one company but rather a network of companies known as the Protocol Labs Network (PLN). Today the PLN is already approaching 100 independent companies - each unique, but bound together in common cause to drive breakthroughs in computing that push humanity forward. For more details please visit the [Protocol Labs Blog](https://protocol.ai/blog/).\\n\\nWhat do these changes mean for you, the League of Entropy and the drand codebase?\\n\\nTLDR; not much change in the near term, but expect new opportunities to collaborate in the coming months.\\n\\nBoth Protocol Labs and Randamu remain steadfast in our commitments to public goods, the League of Entropy, open-source software, and the drand codebase. Protocol Labs plans to continue maintaining their nodes through Randamu. We are humbled and honored by the trust they have placed in us to improve and maintain drand, while continuing to shepherd LoE network operations - we don\'t expect any of that to change, but to ensure we aren\u2019t relying on any incorrect assumptions, we will put this to a vote in the loe-governance Slack channel.\\n\\nMoving forward we are updating drand in v2.0 to enable asynchronous ceremonies - no more jumping on the phone at odd hours for periodic key re-sharing. This, plus other improvements should help drand\'s operation to become more automated in the coming weeks, requiring less of your valuable time and attention.\\n\\nThe Randamu team is excited by the opportunities we have before us as an independent organization. We have a growing list of commercial offerings based on threshold cryptography in our development pipeline, several of which benefit from drand, and some of which you, as an LoE member, may wish to partner with us on. We\'ll keep you posted here as these plans develop and mature.\\n\\nPlease accept our deepest thanks for your continued trust and partnership.\\n\\nWarm regards, -- Yolan, Patrick, Laith & Erick (The Randamu Team)"},{"id":"fastnet-to-be-sunset","metadata":{"permalink":"/blog/fastnet-to-be-sunset","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2023-07-02-fastnet-to-be-sunset-long-live-quicknet.md","source":"@site/blog/2023-07-02-fastnet-to-be-sunset-long-live-quicknet.md","title":"fastnet to be sunset, long live quicknet","description":"Last month, we have identified\xa0a minor issue in our implementation of the BLS signature on G1 used in the newly launched\xa0fastnet\xa0network. This is an RFC compliance issue which led us to plan the launch of a new compliant\xa0quicknet\xa0network and to spin down\xa0fastnet.","date":"2023-07-02T00:00:00.000Z","tags":[{"inline":false,"label":"News","permalink":"/blog/tags/news","description":"news tag"}],"readingTime":3.8733333333333335,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"fastnet-to-be-sunset","title":"fastnet to be sunset, long live quicknet","authors":["yolan"],"tags":["news"],"date":"2023-07-02T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Announcing Randamu!","permalink":"/blog/announcing-randamu"},"nextItem":{"title":"Announcing the drand Code Walkthroughs","permalink":"/blog/announcing-drand-code-walkthrough"}},"content":"Last month, we have identified\xa0[**a minor issue](https://github.com/drand/kyber-bls12381/issues/22)** in our implementation of the BLS signature on G1 used in the newly launched\xa0`fastnet`\xa0network. This is an RFC compliance issue which led us to plan the launch of a new compliant\xa0`quicknet`\xa0network and to spin down\xa0`fastnet`.\\n\\n\x3c!-- truncate --\x3e\\n\\n## The Issue\\n\\nWhile not a\xa0*security issue*\xa0for drand, the problem is affecting our \u201chash to curve\u201d function, used to map round numbers to a point on the elliptic curve that get signed using\xa0[**threshold BLS](https://en.wikipedia.org/wiki/BLS_digital_signature)** by the drand network. The issue relates to the upcoming Hash To Curve\xa0[**RFC 9380**](https://www.rfc-editor.org/auth48/rfc9380), which mandates specific \u201cDomain Separation Tags\u201c (DST) for certain curves. In the BLS curve case, where we have two different groups (G1 and G2) that we can map to, the RFC recommends using different DST for both groups (it\u2019s the point of having a DST!). Sadly, our implementation of BLS signatures was initially written to perform signatures on G2 and not on G1\u2026 (Stay tuned for an upcoming blog post about the choice of the group for BLS signatures!) The usage of a global variable in our codebase for the DST meant that both our G1 and G2 implementations were sharing the same DST. Since we don\u2019t have \u201cofficial test vectors\u201d for BLS signatures on G1 and G2, this went unnoticed until\xa0[**someone tried](https://drandworkspace.slack.com/archives/C011JB8NU2E/p1683527867397549?thread_ts=1683197659.071499&cid=C011JB8NU2E)** to verify our signatures done on G1 with a C++ implementation and reported the issue in our Slack.\\n\\nWe launched our\xa0`fastnet`\xa0Testnet in February to try and identify any potential issues, while also allowing people to start building their applications on top of our new design featuring\xa0[**unchained randomness**](https://docs.drand.love/docs/concepts/2-1-concepts-cryptography) and\xa0[**timelock capabilities**](/blog/timelock-encryption-is-now-supported-on-drand-mainnet). Despite this, the issue went unnoticed in all signature verification implementations that we tried with our drand beacons (including our typescript\xa0[**drand-client](https://github.com/drand/drand-client)** codebase and two different third party Rust implementations of drand verification!). Amusingly, within weeks of this issue being identified, a second team, building their own timelock scheme on top of our new\xa0`fastnet`\xa0network, also identified the issue and reported it to us.\\n\\nFor us, the main takeaways here are:\\n\\n- Make sure to have as many test vectors as possible, generated using multiple, different implementations.\\n- Generate more noise and community outreach around new network launches, including new testnets.\\n- Expect early adopters to take at least 2-3 months to start testing their implementations building on top of your new features, and therefore plan your testnet and mainnet launches accordingly.\\n\\n## Next Steps\\n\\nThis issue means that\xa0**all beacons**\xa0emitted for the new\xa0`fastnet`\xa0network that we launched on March 1st are featuring signatures that are non-compliant with the hash to curve spec, and so is the case for beacons from our testnet.\\n\\nWhile not a\xa0*security*\xa0issue for our usage, using the wrong domain separator tag to map points on G1 is non-compliant with the RFC and therefore not great for future compatibility and adoption of our new network. We have\xa0[**already implemented a new, RFC-compliant scheme](https://github.com/drand/drand/pull/1249)** for drand, affectionately named\xa0`bls-unchained-g1-rfc9380`.\\n\\nDuring investigations, we identified 4 main ways to solve this issue:\\n\\n- **Do nothing and document the non-compliance**\xa0of the signatures on the drand website, however this would have caused significant friction for future adoption, reducing the usability and the developer experience of drand.\\n- **Create a new\xa0`quicknet`\xa0network and keep the existing\xa0`fastnet`\xa0network running**, causing a 90% increase of the load of our existing nodes, forcing us to increase our tech debt and maintenance burden but not disrupting any existing users. (The verifiability of drand beacons allows our users to re-use them or redistribute them without us knowing about it. This further means that we do not have visibility into our user-base, and therefore, getting in contact with them to notify them of a \u201c`fastnet`\xa0shutdown\u201d is not an option).\\n- **Create a new**\xa0`fastnet`\xa0**network (`quicknet`)**\xa0using a\xa0**compliant implementation**\xa0of the signature function and\xa0**shutdown**\xa0the existing non-compliant one immediately. This would inevitably cause our current\xa0`fastnet`\xa0users to be completely stranded and having to switch quickly to our new\xa0`quicknet`\xa0network, causing serious disruption for our users.\\n- **Create a new**\xa0`quicknet`\xa0**network**\xa0using a\xa0**compliant implementation**\xa0of the signature function and\xa0**sunset**\xa0the existing one over multiple months before\xa0**shutting it down entirely**. This would allow our users to ensure 100% uptime of their services, while gradually migrating to the new network.\\n\\nGiven the above, [The League of Entropy][LOE] has voted and elected to choose the last option, using its governance process, and therefore will:\\n\\n- **Sunset**\xa0the current\xa0`fastnet`\xa0network, reduce the number of Mainnet nodes running it (from 21 with a\xa0**threshold of 11**\xa0to a committee of 14 with a\xa0**threshold of 8**), stop onboarding new nodes to it, and most importantly\xa0**stop it entirely**\xa0as soon as possible.\\n- launch a new\xa0`quicknet`\xa0network with the same settings, e.g. 3 seconds frequency, 2 seconds catch-up period,\xa0[**unchained randomness](/blog/multi-frequency-support-and-timelock-encryption-are-coming-to-drand)** (thus compatible with timelock schemes), except it would be using our newly released\xa0`bls-unchained-g1-rfc9380`\xa0scheme which is RFC-compliant.\\n- do the same on our Testnet\xa0`testnet-g`\xa0network, shutting it down before Mainnet, in order to allow us to effectively test the shutdown scenario.\\n\\nWe are currently planning to launch these new\xa0`quicknet`\xa0networks in July on both our Testnet and Mainnet.\\n\\n## Consequences\\n\\nThe biggest problem with shutting down our\xa0`fastnet`\xa0network, is that any usage of its public key to perform timelock encryption past the shutdown date will lead to ciphertexts that cannot be decrypted. This is because the required beacon\u2019s signature won\u2019t be emitted by the network. This means that whoever used our timelock system with our\xa0`fastnet`\xa0network (or our\xa0`testnet-g`\xa0one) and set a decryption date after their shutdown date won\u2019t be able to decrypt their ciphertexts.\\n\\nFor \u201cclassical\u201d public randomness usage, switching to a new network does not affect the quality or verifiability of the randomness.\\n\\n## Recommendations\\n\\nFor \u201cpublic verifiable randomness usage\u201d, we recommend always having a way to transition to a new \u201cbeacon chain\u201d easily shall the need arise. This means being able to switch to a new public key and starting to monitor a new chainhash at a given time.\\n\\nIf you are working on a\xa0**timelock**-based system relying on our\xa0`fastnet`\xa0be aware that you\u2019ll need to either launch a new version of your application in July, or plan a way to transition to our new network, and that any ciphertexts meant for December, or later, on\xa0`fastnet`\xa0are not going to be decryptable after that point. The League of Entropy members will be deleting their secret shares allowing them to perform the threshold operations required to produce valid signatures for the group. We recommend communicating to your users that they\u2019ll need to re-issue any such ciphertexts using the new network if they want them to be decryptable after December 2023.\\n\\nIf you are using our\xa0`fastnet`\xa0for randomness, plan your transition to the new network by the end of Q3\u20192023.\\n\\nPlease, don\u2019t hesitate to reach us (for example on\xa0[**our Slack**](https://join.slack.com/t/drandworkspace/shared_invite/zt-19u4rf6if-bf7lxIvF2zYn4~TrBwfkiA)) in case you have any concerns or if your current\xa0`fastnet`\xa0usage cannot accommodate a shutdown of the\xa0`fastnet`\xa0network by the end of the year.\\n\\nStay tuned for more blog posts about the groups G1 and G2 and how to choose the right one when doing BLS signatures, as well as for the quicknet launch announcement after our new upcoming Distributed Key Generation ceremony. See you on quicknet in July!\\n\\n---"},{"id":"announcing-drand-code-walkthrough","metadata":{"permalink":"/blog/announcing-drand-code-walkthrough","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2023-06-05-announcing-the-drand-code-walkthroughs.md","source":"@site/blog/2023-06-05-announcing-the-drand-code-walkthroughs.md","title":"Announcing the drand Code Walkthroughs","description":"code-walkthroughs","date":"2023-06-05T00:00:00.000Z","tags":[{"inline":false,"label":"News","permalink":"/blog/tags/news","description":"news tag"},{"inline":false,"label":"How-to","permalink":"/blog/tags/how-to","description":"how to tag"},{"inline":false,"label":"Code-Walkthrough","permalink":"/blog/tags/code-walkthrough","description":"code walkthrough tag"}],"readingTime":3.533333333333333,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"announcing-drand-code-walkthrough","title":"Announcing the drand Code Walkthroughs","authors":["yolan"],"tags":["news","how-to","code-walkthrough"],"date":"2023-06-05T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"fastnet to be sunset, long live quicknet","permalink":"/blog/fastnet-to-be-sunset"},"nextItem":{"title":"drand Explainer for Beginners","permalink":"/blog/drand-explainer-for-begginers"}},"content":"![code-walkthroughs](https://images.spr.so/cdn-cgi/imagedelivery/j42No7y-dcokJuNgXeA0ig/843ad7ff-c63c-4c1d-86fe-8cb595395f15/drand-code-walkthroughs.5726ed76/w=1080,quality=90,fit=scale-down)\\n\\n## **What, Where, & When**\\n\\nThe drand community and developer base is expanding rapidly. drand usage is gaining momentum with many applications using it to draw randomness for their systems. While our [**slack workspace](https://join.slack.com/t/drandworkspace/shared_invite/zt-19u4rf6if-bf7lxIvF2zYn4~TrBwfkiA)** is a great place to interact with other developers and the drand core maintainers, code walkthroughs are even better if one wants to gain a holistic view of the system, become familiar with nitty gritty details, and ask questions in real time.\\n\\n\x3c!-- truncate --\x3e\\n\\nWith those benefits in mind, we have designed and will be running a series of virtual code walkthroughs on the drand codebase. The series consists of eight (8) sessions, taking place **every other Tuesday at 1430 UTC, starting on the 20th of June**. Each session is scheduled to last approximately 45mins with 30mins for Q&A and pair programming assistance.\\n\\n## **Registration**\\n\\nRegistrations are handled through Lu.ma. Any modifications or updates to the schedule or topics will be reflected on the Lu.ma event page, so the best way to be kept up-to-date is to register for the event series.\\n\\nLu.ma registration page: [**https://lu.ma/drand-code-walkthroughs**](https://lu.ma/drand-code-walkthroughs)\\n\\n## **Sessions in a Nutshell**\\n\\nThe topics and brief descriptions of the code walkthrough sessions are listed below. Note that both topics and dates are subject to change, especially given that the series is scheduled to run through the summer period with several events taking place. The best way to be kept up-to-date is to register through the above Lu.ma link and join our drand slack workspace.\\n\\n### **Session 1: \u201cWhat is drand?: How to use its CLI and Clients\u201d**\\n\\n- **Dates:** Tuesday, **20th June 2023**, 1430 UTC\\n- **Description:** We will explain what the drand binary is, what it does and run through all of the CLI commands and related parameters to explain how to start a node as an operator and how to sync and follow other nodes. We will also run a Distributed Key Generation (DKG), perhaps the most central part of setting up a drand network. In this session we will not go through the DKG code, which is subject to another session. Finally we will do a walkthrough of the drand client libraries. There are currently two drand libraries (in Go and in JS), which we will use to consume drand randomness.\\n\\n### **Session 2: \u201cWhat is a drand beacon? How is it created?\u201d**\\n\\n- **Dates:** Tuesday, **4th July 2023**, 1430 UTC\\n- **Description:** This session will focus on the randomness beacons produced by the drand network. We will explain the different representations of a beacon, as well as the beacon model followed by the drand mainnet. We will also dive into the details of why drand randomness is \u201cverifiable\u201d and how to derive randomness from the signature. drand is based on \u201cthreshold cryptography\u201d, which, in practice, means that every node is producing a \u201cpartial\u201d of the final signature. In this session, we will explain how partials are aggregated to produce the final randomness beacon.\\n\\n### **Session 3: \u201cdrand Cryptographic Primitives\u201d**\\n\\n- **Dates:** Tuesday, **18th July 2023**, 1430 UTC\\n- **Description:** Cryptography is at the heart of drand. In this session, we will dive into the cryptographic primitives on which drand is based on. We will explain and showcase keypairs and distributed keys, the vault and the Kyber library.\\n\\n### **Session 4: \u201cdrand\u2019s Distributed Key Generation (DKG)\u201d**\\n\\n- **Dates:** Tuesday, **1st August 2023**, 1430 UTC\\n- **Description:** Distributed Key Generation is the most central part of the drand network and threshold cryptography more in general. In this session, we will dive into the details of basic concepts, such as the Shamir secret sharing, Pedersen DKG, the \u201cgroup file\u201d and their implementation. We will also go through the lifecycle of a DKG event, relevant security considerations and the difference between \u201cinitial sharing\u201d vs \u201cresharing\u201d.\\n\\n### **Session 5: \u201cThe different layers of the drand system: from the daemon and the beacon process to storage/sync manager and the client\u201d**\\n\\n- **Dates:** Tuesday, **15th August 2023**, 1430 UTC\\n- **Description:** At a high level, drand comes as one coherent system. However, it is composed of several subcomponents that are distinct and play a particular role in the operation of the overall system. In this session, we\u2019re going to put puzzle pieces from previous sessions together, define the taxonomy of the components, specify where does one stop and the other start and how they communicate and interoperate with one another.\\n\\n### **Session 6: \u201cdrand\u2019s Networking Stack & Monitoring Infra\u201d**\\n\\n- **Dates:** Tuesday, **29th August 2023**, 1430 UTC\\n- **Description:** As a distributed, Internet-based system, drand has a number of networking components to distribute randomness beacons across the drand network nodes and make beacons available to its users. In this session we will go through the network-layer protocols used by drand and will also cover the monitoring tools, metrics and infrastructure that we have in place in order to guarantee smooth operation and identify concerning situations before they become serious incidents.\\n\\n### **Session 7: \u201cdrand\u2019s Storage & Sync Functionality\u201d**\\n\\n- **Dates:** Tuesday, **12th September 2023**, 1430 UTC\\n- **Description:** drand beacons are not only valuable at the time they\u2019re produced, but also well after their generation for applications that want to use or verify past beacons. As such, storage of beacons is an important functionality that all nodes in the network should support. In this session, we\u2019ll go through the different types of storage backends. We will also cover the \u201csync\u201d functionality, i.e., the case when a new node (re-)joins the network and needs to sync the history of beacons.\\n\\n### **Session 8: \u201cClient Libraries Deep Dive\u201d**\\n\\n- **Dates:** Tuesday, **26th September 2023**, 1430 UTC\\n- **Description:** In this final session, we will walk through the code of the client libraries in detail. We will also go through examples of using these libraries in practical use-cases to showcase their workflows. In addition, we will dive into the timelock encryption libraries and their code.\\n\\n## **Looking forward**\\n\\nWe\u2019re looking forward to an enlightening series of sessions. Please share your thoughts and feedback by joining the drand slack workspace [**invitation link**](https://join.slack.com/t/drandworkspace/shared_invite/zt-19u4rf6if-bf7lxIvF2zYn4~TrBwfkiA)] and posting questions in the `#code-walkthroughs` channel. Requests for extra topics are more than welcome. The League of Entropy can also be reached through email at: `leagueofentropy [ at ] googlegroups.com`.\\n\\nFinally, don\'t forget to **register for free** to our code walkthroughs on our [**registration page**](https://lu.ma/drand-code-walkthroughs), see you there!\\n\\n---"},{"id":"drand-explainer-for-begginers","metadata":{"permalink":"/blog/drand-explainer-for-begginers","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2023-06-01-drand-explainer-for-beginners.mdx","source":"@site/blog/2023-06-01-drand-explainer-for-beginners.mdx","title":"drand Explainer for Beginners","description":"drand is software for running a threshold network that generates publicly verifiable random numbers.","date":"2023-06-01T00:00:00.000Z","tags":[{"inline":false,"label":"Beginner","permalink":"/blog/tags/beginner","description":"beginner tag"},{"inline":false,"label":"Features","permalink":"/blog/tags/features","description":"begginer tag"},{"inline":false,"label":"How-to","permalink":"/blog/tags/how-to","description":"how to tag"}],"readingTime":5.19,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"drand-explainer-for-begginers","title":"drand Explainer for Beginners","authors":["yolan"],"tags":["beginner","features","how-to"],"date":"2023-06-01T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Announcing the drand Code Walkthroughs","permalink":"/blog/announcing-drand-code-walkthrough"},"nextItem":{"title":"Security Assessment of tlock","permalink":"/blog/security-assessment-of-tlock"}},"content":"**drand is software for running a threshold network that generates publicly verifiable random numbers.**\\n\\nBoy, that\'s a mouthful.\\n\\n{/* truncate */}\\n\\nTo the uninitiated, a bunch of questions spring to mind: What on earth is a threshold network? How can random numbers be verified?! Surely they\'re random? Why would I want my random numbers to be public?\\n\\nWell, this blog post is the right place to uncover all the mysteries of the above statement. Let\'s work backwards to build up a picture of what drand is and how it works.\\n\\n### \ud83d\udd22 **Random Numbers**\\n\\nWhat constitutes a random number?\\n\\nThere are some fancy mathematical definitions, but stated simply: it\'s a number that cannot be guessed at a rate better than chance. Suppose we choose a random number in the range 1 and 100 (including 100). If we asked 100 people to guess our number, on average only one of those people would guess the number correctly, even with a fully random selection process.\\n\\nFor cryptographic purposes, it\'s often important that two people don\'t select the same random number. For example, if two people used the same random number as their Bitcoin private key, they\'d be sharing a wallet (and the wallet\'s funds)!\\n\\nWhile this is impossible to prevent entirely, cryptographic schemes use astronomically large number ranges (on the order of the number of atoms in the universe!) to ensure users get unique random numbers if they use proven selection methods.\\n\\n### \ud83c\udfd9\ufe0f **Public Random Numbers vs. Private Random Numbers**\\n\\nRandom numbers are used by everybody daily: connecting to a website over HTTPS, signing into our bank account, creating a user account, or purchasing an item online generates random identifiers. Most of these are *private* random numbers. If you shared random numbers associated with your bank account publicly, a malicious actor might be able to steal all your money.\\n\\nPublic random numbers are different. These are numbers we *want* everybody to see: think lottery numbers, the roll of a dice in a board game, selecting a business to be audited at random, or a coin flip for who takes the kick-off in a football match. This is exactly the type of randomness that drand provides\u2014you definitely ***shouldn\'t*** generate your Bitcoin private key using drand!\\n\\n### \ud83d\udd0d **Verifiability**\\n\\nIn examples of public randomness, humans have created procedures to ensure fairness: lottery numbers are drawn from fancy machines, dice are shared in board games to prevent cheating, and a referee picks the coin and flips it for a fair start in football.\\n\\nHowever, these solutions are not truly *verifiable* and require trusting third parties (e.g., referees, dice & lotto manufacturers, etc.) For generating random numbers fast and at scale, proving fairness is more challenging:\\n\\n<aside>\\n\u2753\\n\\n- If I trust a third party to generate the random number, how do I know they really chose it randomly?\\n- If I trust a third party to run a random number generator I have audited, how do I know they\'re running the code they say they are?\\n- If I run some code to generate a random number, how do I know the code is statistically random and bug-free?\\n</aside>\\n\\nHuman intuition can mislead us when it comes to randomness. If you were to look at the following binary numbers, which do you think is the most random?\\n\\n```\\n1111111111111111\\n0000000000000000\\n1001011010001001\\n```\\n\\nAt first glance, the first two seem far too uniform to be random, but from a random selection of values from `0000000000000000` to `1111111111111111` (inclusive), they are all equally likely to occur!\\n\\nHow can we verify a randomly selected number was really random? It seems impossible. However, in drand, we exploit some cryptographic principles to make this possible. To fully understand it, we need a bit of background.\\n\\n### \ud83d\udd0f **Digital Signatures**\\n\\nDigital signatures are similar to human signatures: we take some piece of data (like a contract or a letter) and append a message that uniquely identifies us and binds the signature to the data. Digital signatures differ from human signatures in several ways:\\n\\n- Human signatures map to a single person; digital signatures map to a single private key (and a person could own multiple private keys).\\n- Human signatures can be copied to another piece of data and still be valid; digital signatures are bound to a single piece of data, as the data is \'included\' in the signature in a mathematical sense.\\n- Digital signatures are verifiable; we can run mathematical operations to verify that the person who created the signature had access to the data and the private key.\\n\\n<aside>\\n\ud83d\udd10 SIDE NOTE: private keys are like a password. They\'re a huge (private) random number used in lieu of a password. They\'re more secure than passwords due to their size, and users tend to store them somewhere rather than typing them by hand. In digital signature schemes, users also create a public key, a mathematical counterpart to the private key used to verify signatures. The public key can be shared publicly, and anyone can use it to validate signatures.\\n\\n</aside>\\n\\nSo why are we talking about signatures?! This post is about randomness, and I even said we need randomness to generate a signature! Some properties of digital signatures are particularly interesting for randomness. Given some data, an attacker who has our public key but not our private key cannot predict a valid signature for it better than chance. To create a valid signature, they would have to create all possible signatures and verify them against the public key, which would take more computing power than exists in the world. Additionally, there\'s exactly one valid signature for a given message and private key combination.\\n\\nAnother way to look at this: for users without access to a private key, a signature is indistinguishable from a random number and can be verified using the associated message and public key. If we had a way to create signatures with a private key that nobody could access, we would have publicly verifiable random numbers!\\n\\n### \ud83d\udd73\ufe0f **Threshold Cryptography**\\n\\nWe\'re close to explaining drand now. We\'ve identified a way to create publicly verifiable numbers that are random under some assumptions but with a small problem: somebody needs to be a custodian for the private key used to create signatures. That amounts to trusting a third party, which we identified as an issue.\\n\\nEnter threshold cryptography.\\n\\nThreshold cryptography is like a business bank account: to reduce risk, transactions over a certain value require multiple parties to sign off. A threshold signature scheme is similar in that multiple parties must work together to create a valid signature.\\n\\nEach party has their own private key and signs a message with it to create a \'partial signature\'. When enough partial signatures are created, they can be aggregated into a final valid signature. There\'s no hierarchy between signers in a threshold scheme; any group of partial signatures will do. \'Enough\' is a parameter of the protocol called \'threshold\'. It\'s also called a `t of n` signature scheme, where `t` (threshold) of `n` (total) parties must sign to create a valid signature.\\n\\nThreshold signature schemes improve our security model compared to normal signature schemes. Instead of relying on a single trusted third party, we can trust a group of numerous, unrelated parties. The probability that `t` parties collude against us is lower than that of a single party. Another key piece of intuition is that the group shares a public key and private key, but *nobody* has access to the private key. This is created during a distributed key generation protocol at the foundation of a network.\\n\\nThe threshold signing scheme exploits mathematical properties of [**pairing-based cryptography**](https://en.wikipedia.org/wiki/Pairing-based_cryptography), which is outside the scope of this post, to create signatures without ever needing the private key.\\n\\n### \ud83d\udc5f **Tying It All Together**\\n\\nWe\'ve covered a lot of ground, so let\'s pull it back into the real world and show how drand works in practice.\\n\\nAt the foundation of a drand network, all parties generate their own private key and initiate a distributed key generation protocol to create a shared pair of private and public keys. Recall that *NO* single party has access to that private key. Every epoch (30 seconds for our default mainnet network), each party signs the same message (the epoch number) and sends their partial signature to the network. Upon receiving partial signatures from others, each party verifies their validity and, upon reaching a threshold number, aggregates them into a single valid group signature. This single group signature is effectively a random number that can be verified as having been created by the drand network. This randomness is released publicly for others to verify and use. Because drand epochs coincide with times on the clock, consumers can commit to certain future random values for use in their applications (e.g., \\"I will draw the lottery using the random number generated at 12 PM tomorrow by the drand network, which will be epoch 123456\\").\\n\\nThis was a whistle-stop tour of how drand works, and some details were omitted for clarity.\\n\\nIf you\'d like to dive deeper into the cryptography or operation of the drand network, check out our [**documentation**](https://docs.drand.love/docs/category/20-concepts-getting-started), [**join our Slack workspace**](https://join.slack.com/t/drandworkspace/shared_invite/zt-19u4rf6if-bf7lxIvF2zYn4~TrBwfkiA), or email us at: [leagueofentropy@googlegroups.com](mailto:leagueofentropy@googlegroups.com).\\n\\n---\\n\\n### Suggested References for Learning More:\\n\\n- [Random Number](https://en.wikipedia.org/wiki/Random_number)\\n- [Elliptic Curve](https://en.wikipedia.org/wiki/Elliptic_curve)\\n- [Threshold Cryptography](https://en.wikipedia.org/wiki/Threshold_cryptography)\\n- [Digital Signature](https://en.wikipedia.org/wiki/Digital_signature)"},{"id":"security-assessment-of-tlock","metadata":{"permalink":"/blog/security-assessment-of-tlock","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2023-05-25-security-assessment-of-tlock.mdx","source":"@site/blog/2023-05-25-security-assessment-of-tlock.mdx","title":"Security Assessment of tlock","description":"We are happy to announce that our timed release encryption scheme \\"tlock\\" and its implementations, which we introduced in our\xa0previous blog post, have recently undergone a comprehensive security assessment by\xa0Kudelski Security. This was a crucial step in ensuring the robustness and reliability of our encryption system in order to guarantee that timelocked content remains encrypted until the time has come for it to be decrypted and never before.","date":"2023-05-25T00:00:00.000Z","tags":[{"inline":false,"label":"News","permalink":"/blog/tags/news","description":"news tag"},{"inline":false,"label":"Updates","permalink":"/blog/tags/updates","description":"updates tag"}],"readingTime":1.7633333333333334,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"security-assessment-of-tlock","title":"Security Assessment of tlock","authors":["yolan"],"tags":["news","updates"],"date":"2023-05-25T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"drand Explainer for Beginners","permalink":"/blog/drand-explainer-for-begginers"},"nextItem":{"title":"Randomness Summit Tokyo 2023","permalink":"/blog/randomness-summit-tokyo-2023"}},"content":"We are happy to announce that our timed release encryption scheme \\"[**tlock**](https://eprint.iacr.org/2023/189)\\" and its implementations, which we introduced in our\xa0[**previous blog post**](/blog/timelock-encryption-is-now-supported-on-drand-mainnet), have recently undergone a comprehensive security assessment by\xa0[Kudelski Security](https://drand.love/d800657770494c6cb39cffb5480407a4). This was a crucial step in ensuring the robustness and reliability of our encryption system in order to guarantee that timelocked content remains encrypted until the time has come for it to be decrypted and never before.\\n\\n{/* truncate */}\\n\\n## **Overview**\\n\\n[Kudelski Security](https://drand.love/d800657770494c6cb39cffb5480407a4), a renowned provider of cybersecurity solutions, was engaged to review the implementation of drand\u2019s timelock encryption scheme and timelock responsible disclosure demo. The work covered:\\n\\n- `tlock`, our\xa0[**Go implementation](https://github.com/drand/tlock/)** as both a library and a command line tool (`tle`) for timelock encryption.\\n- `tlock-js`, our interoperable\xa0[**TypeScript implementation](https://github.com/drand/tlock-js/)** of timelock encryption.\\n- `timevault`, our web demo for timelock encryption, which is available at\xa0[**https://timevault.drand.love/**](https://timevault.drand.love/).\\n- Their critical security dependencies.\\n\\nThe audit primarily focused on code security, protocol security, and ensuring our implementations matched the\xa0[tlock paper](https://eprint.iacr.org/2023/189).\\n\\n## \ud83d\udccb **Audit Findings**\\n\\nDuring the audit, Kudelski Security identified:\\n\\n- 1 High severity issue\\n- 5 Medium severity issues\\n- 3 Low severity issues\\n\\nIt is worth highlighting that none of the identified issues would have put existing encrypted data at risk. We are pleased to report that all identified issues have been addressed and corrected. The\xa0**detailed audit report is available on IPFS**\xa0with CID\xa0[**QmWQvTdiD3fSwJgasPLppHZKP6SMvsuTUnb1vRP2xM7y4m**](https://ipfs.io/ipfs/QmWQvTdiD3fSwJgasPLppHZKP6SMvsuTUnb1vRP2xM7y4m).\\n\\n## \ud83d\udee1\ufe0f **Security Considerations**\\n\\nThe security of our timelock encryption system relies on four main aspects:\\n\\n1. The security of the\xa0[**Identity Encryption Scheme](https://en.wikipedia.org/wiki/Boneh%E2%80%93Franklin_scheme)** from 2001 that we used, and our implementation of it.\\n2. The security of the underlying threshold\xa0[**BLS scheme](https://en.wikipedia.org/wiki/BLS_digital_signature)** from 2003 that we used, and our implementation of it.\\n3. The security of\xa0`age`\'s underlying primitives, and that of the\xa0`age`\xa0implementation used to encrypt the actual data. (See\xa0[**https://age-encryption.org/](https://age-encryption.org/)** for details about\xa0`age`.)\\n4. The security of the threshold network providing you with its BLS signatures at a given frequency.\\n\\nPlease note that neither the BLS, nor the IBE scheme are \\"quantum resistant\\". However, a quantum computer that is able to break them seems unlikely to be built within the next 5-10 years, therefore we currently believe you can expect a \\"long term security\\" horizon of about five years by relying on our design for timed release encryption.\\n\\n## \ud83c\udfc6 **Conclusion**\\n\\nWe are grateful to the Kudelski Security Research team for their thorough and professional audit. Their expertise has been critical in helping us improve the security of drand\'s timelock encryption functionality. We also want to thank the Kudelski team for the smooth collaboration and availability throughout the assessment.\\n\\nHowever, it\'s important to note that no security assessment can guarantee 100% security. While we\'ve taken extensive measures to ensure the security of our timelock encryption system, we encourage users to understand the security considerations and make informed decisions, especially when encrypting data for a long time period.\\n\\nOur code being entirely open-source, further scrutiny and reviews are always welcome. Don\'t hesitate to\xa0[**join our Slack workspace](https://join.slack.com/t/drandworkspace/shared_invite/zt-19u4rf6if-bf7lxIvF2zYn4~TrBwfkiA)** to discuss our Timelock design, possible use-cases, or to show us what you\'ve done with it!\\n\\nWe look forward to continuing to enhance the security and reliability of our systems, and we remain committed to transparency and collaboration in all our endeavors.\\n\\n---"},{"id":"randomness-summit-tokyo-2023","metadata":{"permalink":"/blog/randomness-summit-tokyo-2023","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2023-04-26-randomness-summit-tokyo-2023.mdx","source":"@site/blog/2023-04-26-randomness-summit-tokyo-2023.mdx","title":"Randomness Summit Tokyo 2023","description":"On the 30th of March, the drand team hosted the second edition of the Randomness Summit alongside Real World Crypto in Tokyo, the first having been online only in 2020 during the COVID pandemic.","date":"2023-04-26T00:00:00.000Z","tags":[{"inline":false,"label":"Conferences-and-Events","permalink":"/blog/tags/conferences-and-events","description":"conferences and events tag"},{"inline":false,"label":"News","permalink":"/blog/tags/news","description":"news tag"}],"readingTime":1.6233333333333333,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"randomness-summit-tokyo-2023","title":"Randomness Summit Tokyo 2023","authors":["yolan"],"tags":["conferences-and-events","news"],"date":"2023-04-26T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Security Assessment of tlock","permalink":"/blog/security-assessment-of-tlock"},"nextItem":{"title":"Timelock Encryption is now supported on drand mainnet","permalink":"/blog/timelock-encryption-is-now-supported-on-drand-mainnet"}},"content":"On the 30th of March, the drand team hosted the second edition of the Randomness Summit alongside [**Real World Crypto**](https://rwc.iacr.org/) in Tokyo, the first having been [**online only in 2020**](https://randomness2020.com/) during the COVID pandemic.\\n\\n{/* truncate */}\\n\\n### Overview\\n\\nThe Randomness Summit was a one day conference consisting of talks from a range of speakers on topics such as verifiable randomness functions, verifiable delay functions, distributed key generation, cryptographic specifications, and more!\\n\\n### Kickoff Presentation\\n\\n- **Speaker:** Patrick McClurg from [Randamu](https://randa.mu/)\\n- **Topic:** Brief overview of drand\'s progress since the 2020 Randomness Summit.\\n\\n### \ud83d\udcfd\ufe0f Presentations\\n\\n1. **Generating Distributed Randomness**\\n    - **Speaker:** Lefteris Kokoris Kogias from IST Austria and Mysten Labs\\n    - **Topic:** Architecting for producing distributed randomness under asynchrony safely.\\n2. **Specification-Writing Tips**\\n    - **Speaker:** Filippo Valsorda\\n    - **Topic:** Recommendations for specification-writers on avoiding common pitfalls when specifying protocols and schemes using randomness.\\n3. **Types of Randomness Beacons**\\n    - **Speaker:** Bernardo David from the University of Copenhagen\\n    - **Topic:** Comprehensive breakdown of different types of randomness beacons, their guarantees, and how to combine them to fit your security model.\\n4. **Supra VRF Architecture**\\n    - **Speaker:** Pratyay Mukherjee\\n    - **Topic:** Challenges faced in designing the [**Supra**](https://supraoracles.com/) VRF and the innovative solutions created.\\n5. **NIST Randomness Efforts**\\n    - **Speaker:** Luis Brand\xe3o from NIST\\n    - **Topic:** Ongoing efforts to standardize randomness beacons and threshold cryptography. Details can be found [**on the NIST website**](https://csrc.nist.gov/projects/interoperable-randomness-beacons).\\n6. **Scalable Byzantine Fault Tolerance Algorithms**\\n    - **Speaker:** Matej Pavlovic from the Consensus Lab team at [Protocol Labs][PROTOCOL]\\n    - **Topic:** Latest research into scalable Byzantine fault tolerance algorithms and how randomness can improve their performance characteristics.\\n7. **Timelock Encryption**\\n    - **Speaker:** Yolan Romailler from [Randamu](https://randa.mu/)\\n    - **Topic:** Shortened version of his talk on timelock encryption from the main Real World Crypto conference. The full talk is available on the [**IACR YouTube channel**](https://www.youtube.com/watch?v=Xh849Ij3lhU).\\n\\n### \ud83c\udf0e Real-World Applications\\n\\n1. **Drand Implementation in Rust and No-Code Tool**\\n    - **Speaker:** Hong Yu from [StorSwift](/blog/storswift-joins-the-league-of-entropy)\\n    - **Topic:** Upcoming drand implementation in Rust and a no-code tool for creating smart contracts using timelock encryption.\\n2. **CLI Tool for Drand and Timelock Encryption**\\n    - **Speaker:** Thibault Meunier from [Cloudflare](https://drand.love/12bbcd90be5f4e42af18599f65019e7e)\\n    - **Topic:** New [**CLI tool**](https://github.com/thibmeu/drand-rs) for drand and timelock encryption.\\n\\n### \ud83d\udcda Resources\\n\\nFor those who couldn\'t attend, we have compiled a YouTube playlist of all the talks available [**here**](https://www.youtube.com/watch?v=U4bEewhZIus&list=PLhuBigpl7lqtE883Z3I6FCrtjmVOJ7A9c). The slide decks are available for download on IPFS: [**Qmd8Hbj31yXq6MDptaiez5JiRiG3vyU672oYTFfaV31NZL**](https://ipfs.io/ipfs/Qmd8Hbj31yXq6MDptaiez5JiRiG3vyU672oYTFfaV31NZL).\\n\\n### \ud83c\udfaa Future Events\\n\\nIt\'s too early to release details of a possible Randomness Summit 2024, but a big thank you to everyone who attended. We look forward to seeing you at future events! Monitor this blog for announcements of future Randomness Summits and other events where the drand team will be present.\\n\\n### \ud83d\udcec Stay Connected\\n\\nJoin our [**drand Slack Workspace**](https://join.slack.com/t/drandworkspace/shared_invite/zt-19u4rf6if-bf7lxIvF2zYn4~TrBwfkiA) to discuss drand and randomness-related topics or share your use cases. Follow us on our newly created [**@drand_loe Twitter account**](https://twitter.com/drand_loe) to stay updated with the latest news from the drand team.\\n\\n---"},{"id":"timelock-encryption-is-now-supported-on-drand-mainnet","metadata":{"permalink":"/blog/timelock-encryption-is-now-supported-on-drand-mainnet","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2023-03-27-timelock-encryption-is-now-supported-on-drand-mainnet.mdx","source":"@site/blog/2023-03-27-timelock-encryption-is-now-supported-on-drand-mainnet.mdx","title":"Timelock Encryption is now supported on drand mainnet","description":"The drand team has been busy during the past year working on delivering an exciting new feature: Timelock Encryption. Timelock encryption enables you to encrypt a message that cannot be decrypted by anyone until a specified time in the future.","date":"2023-03-27T00:00:00.000Z","tags":[{"inline":false,"label":"Conferences-and-Events","permalink":"/blog/tags/conferences-and-events","description":"conferences and events tag"},{"inline":false,"label":"Features","permalink":"/blog/tags/features","description":"begginer tag"},{"inline":false,"label":"News","permalink":"/blog/tags/news","description":"news tag"}],"readingTime":7.163333333333333,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"timelock-encryption-is-now-supported-on-drand-mainnet","title":"Timelock Encryption is now supported on drand mainnet","authors":[],"tags":["conferences-and-events","features","news"],"date":"2023-03-27T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Randomness Summit Tokyo 2023","permalink":"/blog/randomness-summit-tokyo-2023"},"nextItem":{"title":"drand on Filecoin Virtual Machine (FVM) - draffle","permalink":"/blog/drand-on-filecoin-virtual-machine-FVM-draffle"}},"content":"The drand team has been busy during the past year working on delivering an exciting new feature: **Timelock Encryption**. Timelock encryption enables you to encrypt a message that cannot be decrypted by anyone until a specified time in the future.\\n\\n{/* truncate */}\\n\\nYou might have heard about it from us already, since we were proud to present not just one, but *three* new open-source projects in August 2022, bringing a new very exciting feature called \u201ctimelock encryption\u201d to our drand testnet!\\n\\nWell, wait no more: we have now finally reached \u201cGeneral Availability\u201d and our *audited* Timelock Encryption scheme is **now compatible with the drand mainnet**, thanks to our newly launched `fastnet` network which we\u2019ll discuss quickly in this post as well.\\n\\nThanks to the team\'s work, you can now use these features in many ways:\\n\\n- [**Our Timevault web-demo**](https://timevault.drand.love/) using `tlock-js` to perform timelock encryption easily in your browser, locally.\\n- `tlock`, a [**Go library doing Timelock encryption**](https://github.com/drand/tlock/) by relying on drand\u2019s beacon signatures, along with `tle` - a CLI tool allowing you to use timelock encryption just like you would use `gpg` or `age`.\\n- `tlock-js`, a [**TS library doing the same**](https://github.com/drand/tlock-js/) for your browser apps.\\n- Using the unchained drand beacons from our new `fastnet` network: [https://api.drand.sh/dbd506d6ef76e5f386f41c651dcb808c5bcbd75471cc4eafa3f4df7ad4e4c493/public/latest](https://api.drand.sh/dbd506d6ef76e5f386f41c651dcb808c5bcbd75471cc4eafa3f4df7ad4e4c493/public/latest)\\n\\n<aside>\\n\u26a0\ufe0f NOTE: `fastnet` has been deprecated in favor of `quicknet` since the original publication of this blog post.\\n\\n</aside>\\n\\nThese were already [**presented at DEF CON**](https://www.youtube.com/watch?t=1652&v=IW7sdSd2wOQ&feature=youtu.be) when we launched them on our testnet. Check the talk if you want more details about possible applications and the history behind Timelock Encryption.\\n\\nMore recently, we released a [**pre-print paper**](https://eprint.iacr.org/2023/189) explaining the details of our timelock scheme and we have a talk scheduled at Real World Crypto tomorrow, on March 29th, 2023 where we\u2019ll explain more in depth how **we transformed the League of Entropy** and drand into the first practical **Timelock Encryption service** globally available with a **100% uptime history** over the past 3 years!\\n\\nBut for today let\u2019s first see what this \u201cTimelock Encryption\u201d we\u2019re talking about is.\\n\\nP.S.: If this has piqued your interest and you\u2019d rather watch a video about how this works, you can also find more technical explanations about what is coming next in this [**Research Seminar**](https://www.youtube.com/watch?v=Zgsv4LY0Sn0) that we gave in September!\\n\\n## **Timelock Encryption**\\n\\n### **Drand background**\\n\\nIn order to understand how the system works, we need to first recall a few things about how drand functions\u2026\\n\\nFirst things first, let\u2019s recall that `drand`, which stands for \u201c**distributed randomness**\u201d (and thus pronounced \u201cdee-rand\u201d), is our very own [**open-source software**](https://github.com/drand/drand) meant to create distributed randomness networks. These networks emit **random \u201cbeacons\u201d at a given frequency** in a way that you never need to trust any single party in the network, and can ***verify*** that you actually have random values as long as you trust there is **never a threshold number of malicious parties** in the network, thus the security of the threshold BLS signature scheme holds.\\n\\nTo accomplish this drand relies on the threshold BLS signature scheme and its security proof that tells us BLS signatures are indistinguishable from random ones (in the group of all possible signatures). At each epoch, the members of a drand network work together to create an aggregated BLS signature on the message **m = H(round)}**. An important point here for what comes next is that the **message is predictable** according to the target round at a time T (in other words, there is a mapping between time and round numbers, since the network operates at a fixed frequency), when we\u2019re using drand in the so-called unchained mode that [**we presented in a post last year**](/blog/multi-frequency-support-and-timelock-encryption-are-coming-to-drand).\\n\\nYou can learn more about drand and how it works under the hood in our documentation: [**Cryptography Page**](https://docs.drand.love/docs/concepts/2-1-concepts-cryptography)\\n\\n### **The League of Entropy**\\n\\nThe League of Entropy is a consortium of organisations that decided, back in 2019, to start running a global drand network in order to provide free, unbiased, and verifiable public randomness for anyone to use. Since 2019, the League has been growing steadily, with new members joining it regularly and thus increasing the security and trust we can have in the League. You can read more about the League on Cloudflare\u2019s website: [**https://www.cloudflare.com/leagueofentropy/**](https://www.cloudflare.com/leagueofentropy/)\\n\\nAs of March 2023, the League is constituted of over 21 drand nodes operated by 18 organisations, with a threshold of over 50%, and you can follow our blog to see when new partners are joining the League: [Blog](https://docs.drand.love/blog)\\n\\nIn case you were worried after reading our paper, know that whenever new members join the League, we conduct a so-called \u201cresharing\u201d of the League\u2019s group secret key using verifiable secret sharing. This means that **the public keys of the drand networks we run never change** and it is not going to cause an incompatibility issue with our timelock scheme.\\n\\n### **Our \u201ctimed release encryption\u201d scheme**\\n\\nOur timelock scheme, also sometimes called a \u201ctimed release encryption\u201d (TRE) scheme, is a direct application of the [**Identity Based Encryption scheme**](https://crypto.stanford.edu/~dabo/papers/bfibe.pdf) (IBE) from Boneh et al. (section 4.2) to the threshold BLS signature setting of drand.\\n\\nIn IBE, participants are referred to via their **identity** which can be an email, a name, etc. and anyone can encrypt a message to any identity, even if the recipient is not \u201cregistered\u201d with the system. This works because there is a Private Key Generator (PKG) service that distributes the required secret keys to participants depending on their identity.\\n\\nAs it turns out, the League of Entropy is basically acting as a **\u201cDistributed PKG\u201d network** because they\u2019re using the BLS scheme to sign messages and, (as already denoted in the initial 2001 IBE paper), the decryption keys of their IBE scheme can be used as signatures over a given identity, which is exactly what the BLS scheme is accomplishing.\\n\\nMoreover, it uses **the round number as the identity**, **and the corresponding signature becomes the private key to decrypt.** In short:\\n\\nPublic key = **round number**\\n\\nPrivate key = **signature over the round number**\\n\\nGiven this, the flow is as follows:\\n\\n- Anyone can encrypt a message towards a specific round X in advance\\n- When the time has come, the network will generate the BLS signature (i.e. the *private key)* and release it publicly\\n- Anybody can retrieve the BLS signature of the beacon produced at round X and decrypt any message that was encrypted towards that round X.\\n\\nFor more technical information about how this works, you can **check our pre-print paper** about our Timelock Encryption scheme on ePrint [**here**](https://eprint.iacr.org/2023/189).\\n\\n## **Hybrid Encryption**\\n\\nBecause our timed release encryption scheme allows users to **encrypt a fixed sized message**, and also to achieve better performance in general, it relies on \u201c**Hybrid encryption**\u201d to encrypt arbitrary data more easily. Hybrid encryption means that we are using an asymmetric encryption scheme to **encrypt a Data Encryption Key (DEK)** used to subsequently encrypt the actual data we want to transmit with a symmetric encryption scheme. This is commonly known as \u201cwrapping a key\u201d, and it\'s how modern public key encryption schemes function to encrypt more data than their \u201cblock size\u201d. It has the benefit of being much faster than doing asymmetric encryption of each chunk of data. Typically, the DEK is an AES or ChaCha key, both being blazingly fast symmetric encryption schemes compared to the public key scheme used to encrypt the DEK.\\n\\nHybrid encryption also allows users to significantly reduce the size of a ciphertext meant for multiple recipients, since one only needs to wrap the DEK for different recipients while the bulk of the encrypted data remains the same for all recipients since it was encrypted with a single symmetric key.\\n\\nIn practice, we decided the easiest way to implement this was to rely on the existing [**`age`**](https://github.com/FiloSottile/age) library and tool to create new types of \u201crecipients\u201d and \u201cidentities\u201d for it using our timelock scheme to wrap symmetric encryption keys. This is made easier with `age` through the notion of \u201cstanzas\u201d, data itself is encrypted using a `filekey` which is then encrypted (wrapped) using one or multiple stanzas following the battle-tested hybrid encryption technique.\\n\\nWe tried to stay pretty close to the age-plugin format in order to possibly adapt this new scheme into a plugin, perhaps sometime in the future. Here is our custom tlock stanza:\\n\\n```jsx\\n-> tlock {roundnumber} {chainhash}\\n{timelocked-fileKey-for-given-roundnumber-and-chainhash}\\n```\\n\\n## **tlock**\\n\\nWe have implemented the scheme in a **Golang library** [**tlock**](https://github.com/drand/tlock) and a **Typescript library** [**tlock-js**](https://github.com/drand/tlock-js).\\n\\nFor convenience, we have implemented:\\n\\n- **a web demo** at [**https://timevault.drand.love/**](https://timevault.drand.love/) using our tlock-js library\\n- **a CLI utility** `tle` that you can find on the [**tlock repo**](https://github.com/drand/tlock#install-or-build-the-cli)\\n\\nThe `tlock` Go library is a pure Go library implemented on top of an implementation of [**IBE in our Kyber library**](https://github.com/drand/kyber/tree/master/encrypt/ibe) fork and instantiated using [**kilic\u2019s BLS12-381**](https://github.com/kilic/bls12-381) elliptic curve library. The `tle` CLI tool is built following the same kind of flags as used in `age` itself. Here\u2019s a quick demo using it:\\n\\n![https://user-images.githubusercontent.com/181501/177999855-cc1cfef7-ee1c-4193-bea7-4ee2e689f2d1.svg](https://user-images.githubusercontent.com/181501/177999855-cc1cfef7-ee1c-4193-bea7-4ee2e689f2d1.svg)\\n\\nThe `tlock-js` is a pure Typescript implementation of timed encryption using the drand network. Like the `tlock` Go library, it uses [**Age encryption**](http://age-encryption.org/) under the hood to perform symmetric encryption on a given payload using [**chacha20-poly1305**](https://en.wikipedia.org/wiki/ChaCha20-Poly1305) and wraps the symmetric key using timelock encryption. This ciphertext is then (optionally) encoded using ascii armor making it easy to move around and display - similar to what PGP and other utilities do.\\n\\nThe library only has a handful of dependencies:\\n\\n- some of the noble crypto libraries (the de facto standard for many algorithms in js/ts)\\n- Stablelib\u2019s chacha20-poly1305 implementation\\n- a polyfill for node\u2019s `Buffer`\\n\\nIt\u2019s available on npm at [**https://www.npmjs.com/package/tlock-js**](https://www.npmjs.com/package/tlock-js) and github at [**https://github.com/drand/tlock-js**](https://github.com/drand/tlock-js) and is used by our [**Timevault web demo**](https://timevault.drand.love/)!\\n\\nFinally, to ensure the best security guarantees possible to our users, we had both `tlock` and `tlock-js` go through a code assessment by a renowned cybersecurity company, which we\u2019ll be releasing shortly as well.\\n\\n# **Our new `fastnet` network**\\n\\nThe best part about our timelock solution is that it is live on our mainnet! You can try it in your browser here: [**https://timevault.drand.love/**](https://timevault.drand.love/)\\n\\nThis is possible because the League of Entropy actually launched a new drand mainnet network, on March 1st, 2023: the `fastnet` \ud83c\udfce\ufe0f network! It is readily available through our mainnet endpoints: [**https://api.drand.sh/dbd506d6ef76e5f386f41c651dcb808c5bcbd75471cc4eafa3f4df7ad4e4c493/info**](https://api.drand.sh/dbd506d6ef76e5f386f41c651dcb808c5bcbd75471cc4eafa3f4df7ad4e4c493/info)\\n\\n```jsx\\n{\\n\\"public_key\\":\\"a0b862a7527fee3a731bcb59280ab6abd62d5c0b6ea03dc4ddf6612fdfc9d01f01c31542541771903475eb1ec6615f8d0df0b8b6dce385811d6dcf8cbefb8759e5e616a3dfd054c928940766d9a5b9db91e3b697e5d70a975181e007f87fca5e\\",\\n\\"period\\":3,\\n\\"genesis_time\\":1677685200,\\n\\"hash\\":\\"dbd506d6ef76e5f386f41c651dcb808c5bcbd75471cc4eafa3f4df7ad4e4c493\\",\\n\\"groupHash\\":\\"a81e9d63f614ccdb144b8ff79fbd4d5a2d22055c0bfe4ee9a8092003dab1c6c0\\",\\n\\"schemeID\\":\\"bls-unchained-on-g1\\",\\n\\"metadata\\":{\\"beaconID\\":\\"fastnet\\"}\\n}\\n```\\n\\nIt is running at a 3 second frequency, which is 10 times faster than our previous chained `default` mainnet network, and it uses G1 for signatures, which means its random beacons have signatures that are 50% smaller! It is also running in unchained mode, and thus enables timelock encryption on mainnet!\\n\\nYou can start building your very own sealed-bid auction system on top of it, [**do a timelocked responsible disclosure**](https://research.kudelskisecurity.com/2023/02/22/releasing-a-timelocked-responsible-disclosure/), or use it as a [**deadman\u2019s switch by encrypting your bitcoin private key**](https://gwern.net/self-decrypting#uses) with it and giving the timelocked ciphertext to your heirs, while having the full security of running on the League of Entropy mainnet instead of on our testnet, as was the case until now.\\n\\nExpect another blog post in the coming months with more details about the G1/G2 swap in `fastnet`, and what it means for BLS signatures, and for the applications using drand beacons. (Hints: smaller footprint, better performance and, where applicable, much cheaper gas costs!)\\n\\n## **Related works**\\n\\nOur timelock work has already gathered significant interest from the community and we\u2019re happy to report that there already exists:\\n\\n- a [**tlock-rs library**](https://github.com/timoth-y/tlock-rs) prototype by [**Timofey Luin**](https://twitter.com/timoethey) supporting only the timelock part of our scheme without the hybrid encryption using age and not compatible with our `tle` tool. Timofey then used it to benchmark arithmetic circuits doing [**verifiable timelock encryption**](https://github.com/timoftime/zk-timelock) with Arkworks, cool stuff!\\n- the [**tlock_age library**](https://github.com/thibmeu/tlock-rs) by [**Thibault Meunier**](https://twitter.com/thibmeu), which started as a fork of the tlock-rs library adding age support to it and making it compatible with the age-based scheme implemented in our `tlock` and `tlock-js` libraries as well as in our `tle` tool. Thibault also changed the API significantly and is looking at migrating to a much faster Rust BLS12-381 implementation. If you\u2019re looking at using timelock in Rust, search no more!\\n- a [**CLI tool in Rust**](https://github.com/thibmeu/drand-rs), called `dee`, also by [**Thibault**](https://twitter.com/thibmeu), that uses his library in order to be compatible with `tle` but that also has cool drand-related features to get verifiable, public randomness. It also has a different set of flags.\\n\\nWe are also aware of a few blockchain ecosystems that are currently looking into building on top of the BLS signatures emitted by the League of Entropy in order to achieve their own timed release encryption scheme. Stay tuned for more timelock-related news in the coming months!\\n\\nFinally, don\u2019t hesitate to [**join our drand Slack Workspace**](https://join.slack.com/t/drandworkspace/shared_invite/zt-19u4rf6if-bf7lxIvF2zYn4~TrBwfkiA) to discuss timelock encryption, or share with us your cool use cases for it, or follow us on our [**newly created @drand_loe Twitter account**](https://twitter.com/drand_loe) to stay tuned with the latest news from the drand team. Until next time!\\n\\n---"},{"id":"drand-on-filecoin-virtual-machine-FVM-draffle","metadata":{"permalink":"/blog/drand-on-filecoin-virtual-machine-FVM-draffle","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2023-03-15-drand-on-filecoin-virtual-machine-fvm-draffle.mdx","source":"@site/blog/2023-03-15-drand-on-filecoin-virtual-machine-fvm-draffle.mdx","title":"drand on Filecoin Virtual Machine (FVM) - draffle","description":"To mark the launch of user-programmable smart contracts on the Filecoin Virtual Machine (FVM), the drand team is excited to release a three-part blog series on using randomness on the FVM! In this first part, we dive into the prevrandao EVM opcode (the FVM fully supports EVM bytecode!), a sample Solidity contract using it, a UI to interact with it, and some other necessary plumbing to make it all work.","date":"2023-03-15T00:00:00.000Z","tags":[{"inline":false,"label":"FVM","permalink":"/blog/tags/fvm","description":"fvm tag"},{"inline":false,"label":"Features","permalink":"/blog/tags/features","description":"begginer tag"},{"inline":false,"label":"How-to","permalink":"/blog/tags/how-to","description":"how to tag"}],"readingTime":7.846666666666667,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"drand-on-filecoin-virtual-machine-FVM-draffle","title":"drand on Filecoin Virtual Machine (FVM) - draffle","authors":["yolan"],"tags":["FVM","features","how-to"],"date":"2023-03-15T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Timelock Encryption is now supported on drand mainnet","permalink":"/blog/timelock-encryption-is-now-supported-on-drand-mainnet"},"nextItem":{"title":"Automata Network Joins the League of Entropy!","permalink":"/blog/auttomata-network-joins-the-league-of-entropy"}},"content":"To mark the launch of user-programmable smart contracts on the Filecoin Virtual Machine (FVM), the drand team is excited to release a three-part blog series on using randomness on the FVM! In this first part, we dive into the prevrandao EVM opcode (the FVM fully supports EVM bytecode!), a sample Solidity contract using it, a UI to interact with it, and some other necessary plumbing to make it all work.\\n\\n{/* truncate */}\\n\\nIf you want to skip all the wonderful learning, you can jump straight into the demo project we developed [**on GitHub**](https://github.com/drand/draffle) - the contract is deployed at address `0x9D38f3BB80D98cE09C3f0936Bea140181d4CCABA` on the Hyperspace testnet! A little familiarity with [**Solidity**](https://soliditylang.org/) will be helpful to follow along, but anyone familiar with a C-style language should be able to get the gist.\\n\\n## \ud83c\udfb2 **Randomness on the Blockchain** \u26d3\ufe0f\\n\\nWhen developers think of randomness, we most often think of private randomness - for example, [**using a cryptographically secure pseudorandom number generator**](https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator) such as [**/dev/random/**](https://en.wikipedia.org/wiki//dev/random) to generate a private key. When executing a smart contract in a blockchain ecosystem, this poses a few challenges: Who provides the randomness? How do you know it\'s random? If you interact with a smart contract, you can\'t trust the author to generate randomness for you, as they may have a vested interest in the outcome. Similarly, you can\'t trust miners to generate the randomness for you, as they too might have an interest in the outcome (or wish to collude with other participants).\\n\\n---\\n\\nTo be more concrete: **Suppose I\'m running a raffle via a smart contract**, and users enter the draw by calling a function such as the following:\\n\\n```solidity\\naddress[] entrants;\\n\\nfunction enter() external {\\n    entrants.push(msg.sender);\\n}\\n```\\n\\nEverybody who submits a transaction (and has it mined) has their address added to the list of entrants, which will be \\"randomly\\" drawn from. As the *totally unbiased* author of the smart contract, I\'ve provided another function that allows me to draw the randomly chosen participant:\\n\\n```solidity\\nevent Winner(address theWinner);\\n\\nfunction draw(uint32 someTotallyRandomNumber) external {\\n    require(author == msg.sender, \\"Only the completely unbiased author can execute the draw winner!\\"); // assuming we have set the `author` field in the constructor somewhere\\n    emit Winner(entrants[someTotallyRandomNumber]);\\n}\\n```\\n\\nOf course, in blockchain-land, the state of the contract is public to everyone, and you as the author could simply register your own address as an entrant and pass in its index to win the raffle yourself!\\n\\n### **How Ethereum Increases Fairness**\\n\\nTo address the challenges of randomness in smart contracts, the Ethereum community created [**RANDAO**](https://github.com/randao/randao), a Decentralized Autonomous Organization (DAO) for providing randomness.\\n\\n### **How RANDAO Works**\\n\\n1. **Contribution Phase**:\\n    - In each block, 128 addresses from the network can contribute their piece of randomness.\\n    - Contributors send a small amount of ETH to the RANDAO contract along with a hash of their chosen random number.\\n2. **Reveal Phase**:\\n    - Six blocks later, contributors reveal their number.\\n    - Revealing the number earns them an ETH bounty.\\n    - Failing to reveal the number results in the loss of their deposited ETH.\\n3. **Aggregation Phase**:\\n    - Revealed numbers are combined to create a final random number.\\n    - This final random number is included in the block and is available to smart contracts in the next block using the prevrandao opcode.\\n\\n### **Advantages Over Single-Author Randomness**\\n\\n1. **Verifiability**:\\n    - Users can inspect the RANDAO contract state and see all the inputs combined to create the final random number.\\n    - This transparency attests to the method of construction and ensures fairness.\\n2. **Reduced Bias**:\\n    - Instead of relying on a single *totally unbiased* author, up to 128 parties are involved in creating the randomness.\\n    - This makes it much harder to influence the output, raising the bar for any potential bias.\\n\\n### \u26d4 **Challenges and Limitations**\\n\\nWhile RANDAO improves fairness, it is not entirely immune to manipulation. One such challenge is the \'last mover\'s advantage\':\\n\\n- **Commit/Reveal Scheme**: Participants commit to a random number ahead of time by providing the corresponding (SHA-3) hash. Later, they can choose to reveal or not reveal that number.\\n- **Last Mover\'s Advantage**: The last participant to reveal their number can choose to reveal or not reveal it based on the desired outcome, thereby biasing the final output.\\n\\n### **Illustrating Last Mover\'s Advantage**\\n\\nImagine a scenario with 10 slots where each participant decides a single bit of the output number:\\n\\n```\\nNumber | 1 | 1 | 0 | 1 | 0 | 0 | 0 | 1 | 0 | ? |\\nSlot   | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\\n\\n```\\n\\n- Suppose the committed number is `1`.\\n- The last participant can influence the final bit by deciding whether to reveal or not reveal their number.\\n- For example, if a coin-flipping smart contract uses the last bit to determine heads (1) or tails (0), the last participant can ensure a desired outcome by revealing or not revealing their number.\\n\\nIn practice, the influence is probabilistic and not direct. However, larger players who can fill more of the \'slots\' in RANDAO can still exert undue influence.\\n\\nBy involving multiple parties and ensuring transparency, RANDAO significantly enhances the fairness and reliability of randomness in smart contracts, despite its limitations.\\n\\n### **RANDAO on FVM**\\n\\nRANDAO on EVM is still great - the above is more an insight into some of the security assumptions around it, as a way of introducing FVM\'s approach to RANDAO and contrasting it. As the FVM is EVM compatible (i.e., everything possible in EVM bytecode is also possible on the FVM), it must also provide a `prev_randao` opcode for use in smart contracts and compatibility purposes. Instead of bridging to Ethereum or running its own RANDAO (both of which could happen in the future), Filecoin already has its own source of randomness used for leader election: drand.\\n\\n### **Refresher of how drand works**\\n\\n- **Threshold Network**: drand is a [**threshold network**](https://en.wikipedia.org/wiki/Threshold_cryptosystem) that provides publicly verifiable, unbiasable randomness. It exploits the fact that the hash of a signature is indistinguishable from randomness to people without the associated private key.\\n- **Cooperative Action**: A threshold network is a network of nodes that can cooperatively perform actions such as signing. Enough nodes need to work together (referred to as the \'threshold\') to perform these actions.\\n- **Shamir\'s Secret Sharing**: Using a form of [**Shamir\'s Secret Sharing**](https://en.wikipedia.org/wiki/Shamir%27s_secret_sharing), the network creates a cryptographic keypair that no single member of the group has the private key of. Instead, they each get a share of that private key and must aggregate a threshold number of signatures to create a full signature on behalf of the entire group.\\n\\n### **Key Features of drand**\\n\\n- **Unbiasable Randomness**: Unlike RANDAO, nodes in drand cannot influence the final random output. Once the keypair is generated, all future random numbers are deterministically decided, but nobody can get them until they\'ve received a threshold number of signatures for each number.\\n- **Security Considerations**: One drawback is that if a threshold number of nodes were compromised, all future random numbers could be derived.\\n\\n### **drand in Filecoin**\\n\\n- **Inclusion in Blocks**: In Filecoin, the drand randomness beacon for the current time is included in every block\'s headers.\\n- **Usage in Smart Contracts**: When a contract calls the `prevrandao` opcode, the randomness from the previous block is provided to it. This offers a straightforward method of using randomness on-chain, though with some potential pitfalls to consider.\\n\\n---\\n\\nOkay - without further ado let\'s jump into the web app and code!\\n\\n## The UI\\n\\nWhen the user first opens the UI, they should see something like this:\\n\\n![https://drand.love/assets/img/start.bdca1319.png](/img/start.bdca1319.png)\\n\\nOn the left-hand side we see when the next draw is scheduled, the current block and any draws that have already happened. There\u2019s also a button labelled \u2018Enter the next draw\u2019 that we can click to pay the entry fee via our Metamask wallet. When we click it, a popup from Metamask such as the following appears:\\n\\n![https://drand.love/assets/img/connect-wallet.083095e5.png](/img/connect-wallet.083095e5.png)\\n\\nOnce we\u2019ve confirmed the transaction, we\u2019ve now entered the draw:\\n\\n![https://drand.love/assets/img/draw-accepted.2ff1aab6.png](/img/draw-accepted.2ff1aab6.png)\\n\\nIf you\u2019re on hyperspace, we can wait up to 24 hours (the default) until the next draw is scheduled, and we will be able to trigger it (in the next section we\u2019ll find how to reduce that to any time we want for easier testing). At the time of the draw, the right-hand side of the UI will have changed:\\n\\n![https://drand.love/assets/img/trigger-draw.4356efc5.png](/img/trigger-draw.4356efc5.png)\\n\\nAt the draw block height, users will be able to compete to trigger the draw and receive a small payout. Once the draw has been triggered, a new one is scheduled:\\n\\n![https://drand.love/assets/img/draw-triggered.ac101ff4.png](/img/draw-triggered.ac101ff4.png)\\n\\n## The Contract\\n\\nFirst off, in the `./contracts/` directory, we have a single file called [**DRaffle.sol**](https://drand.love/blog/2023/03/16/draffle/contracts/DRaffle.sol). It contains the solidity code which will be run on FVM to manage all the entrants and payouts from the contest. Let\'s take a look at its constructor and fields:\\n\\n```solidity\\nsolidityCopy code\\nuint256 costPerDraw;\\nuint256 drawCutoff;\\nuint256 triggerReward;\\nuint256 nextDrawBlockHeight;\\n\\naddress[] candidates;\\n\\nconstructor(uint256 roundCutoff, uint256 cost, uint256 reward) {\\n    costPerDraw = cost;\\n    triggerReward = reward;\\n    drawCutoff = roundCutoff;\\n\\n    scheduleNext();\\n}\\n```\\n\\n- The first field set in the constructor enables the author of the contract to choose a `cost` of entry (in FIL). All entrants will pay it, and (nearly all of) the total pool for every draw will be paid out to the winning address.\\n- The second field set is a `reward` for users who initiate the draw. As the contract runs on-chain, we can\'t easily (in solidity anyway) schedule future draws automagically - we have to rely on somebody in the ecosystem submitting a transaction to trigger the draw. To incentivise that, we\'ll provide a small FIL bounty to cover the transaction fee plus a little extra, so users will want to trigger the draw.\\n- The final field set - `drawCutOff` - is the number of blocks in advance we wish to close entries for a given draw. Readers with a keen eye will have noticed in the explanation of the `prevrandao` instruction, that it returns the randomness from the *previous* block header, and not the current block. Entrants could therefore know the random number used for a draw in advance of the draw happening.\\n    - *In follow-up blog posts, we\'ll discuss how we can use more current randomness to avoid this pitfall, but for now let\'s close draws a few blocks in advance to eliminate this possibility of gaming the draw.*\\n- Finally the constructor calls the `scheduleNext` function which will set the `nextDrawBlockHeight` field, clear any candidates and emit some convenient events for the UI to consume. It\'s implementation is as follows:\\n\\n```solidity\\nsolidityCopy code\\nfunction scheduleNext() internal {\\n    candidates = new address ;\\n    nextDrawBlockHeight = block.number + 2880;\\n    emit Scheduled(nextDrawBlockHeight);\\n}\\n```\\n\\nWith this implementation a draw will happen once every 24 hours (Filecoin mines a block every 30 seconds, i.e. 2 per minute, 60 minutes per hour, 24 hours per day- 2 * 60 * 24 = 2880), but it can easily be configured to be more frequent.\\n\\nNow to our function users will call to enter the draw:\\n\\n```solidity\\nsolidityCopy code\\nfunction enter() external payable {\\n    require(msg.value == costPerDraw, \\"you have passed too much or too little money to enter the lotto\\");\\n    require(block.number < nextDrawBlockHeight - drawCutoff, \\"It\'s too close to the next draw to participate\\");\\n    candidates.push(msg.sender);\\n}\\n```\\n\\nIt\'s quite simple: users must pass a token amount equal to the `costPerDraw` into the contract with their transaction (hence the `payable` keyword). If they correctly do that and it\'s not too close to the draw (remembering our `prevrandao` limitation discussed above!), their address is added to the candidate list for the draw.\\n\\nThe final important function is the draw function itself:\\n\\n```solidity\\nsolidityCopy code\\nfunction draw() external payable {\\n    // first we ensure that users can\'t trigger the draw too early\\n    // we let them draw late, because perhaps nobody could get a transaction mined for the exact block height!\\n    require(block.number >= nextDrawBlockHeight, \\"it\'s too early to trigger the draw!\\");\\n\\n    // if nobody entered the draw, and thus there is no money to pay out, we send an event that there was no winner and\\n    // just schedule the next draw\\n    uint numberOfEntries = candidates.length;\\n    if (numberOfEntries == 0) {\\n        emit NoWinner(block.number);\\n\\n    // if there are candidates for the draw, we use the `prevrandao` value from the block, and turn it into an index to choose the winner.\\n    // note: using the modulo operation can result in an output bias - check this great blog post on the matter: <https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/>\\n    } else {\\n        address winner = candidates[block.prevrandao % numberOfEntries];\\n        uint256 amount = numberOfEntries * costPerDraw - triggerReward;\\n\\n        // we pay out the chosen winner\\n        payable(winner).transfer(amount);\\n\\n        // and also pay out the `triggerReward` to the address who triggered the draw successfully\\n        // a small point to note is that they won\'t get paid out if there are no entrants...\\n        // paying them out would require the contract to maintain its own balance of tokens to pay out\\n        // raffles with no entries, so it\'s been omitted for convenience, but it\'s something to consider if you\\n        // decide to run your own raffle!\\n        payable(msg.sender).transfer(triggerReward);\\n\\n        // and emit an event to let any listeners know who won!\\n        emit Winner(block.number, winner, amount);\\n    }\\n\\n    // finally, regardless of whether there is a winner or not we want to schedule the next draw as we saw in the constructor\\n    scheduleNext();\\n}\\n\\n```\\n\\nSo that\'s it for part 1 - how to run a raffle using drand on the FVM via solidity. The sample repository contains a lot more useful tooling for deploying your own smart contract to the [**Hyperspace testnet**](https://hyperspace.yoga/) or your own local [**ganache network**](https://trufflesuite.com/ganache/). In our next post, we\'ll discuss how to use more immediate randomness functionality specific to the FVM, stepping outside the bounds of EVM compatibility.\\n\\nUntil then you can find the team on both the [**Filecoin slack**](https://filecoin.io/slack) and our own [**drand slack**](https://join.slack.com/t/drandworkspace/shared_invite/zt-19u4rf6if-bf7lxIvF2zYn4~TrBwfkiA) should you have any questions. Enjoy deploying cool projects to the FVM, and let us know how you\'ve been using the FVM and randomness!\\n\\n---"},{"id":"auttomata-network-joins-the-league-of-entropy","metadata":{"permalink":"/blog/auttomata-network-joins-the-league-of-entropy","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2023-03-14-automata-network-joins-the-league-of-entropy.mdx","source":"@site/blog/2023-03-14-automata-network-joins-the-league-of-entropy.mdx","title":"Automata Network Joins the League of Entropy!","description":"We are proud to announce that Automata Network, a web3 middleware protocol focused on protecting fairness & privacy, is joining forces with the League of Entropy (LoE)! Automata is becoming the 17th member to join the LoE and the first partner joining from Singapore - a significant milestone for the LoE.","date":"2023-03-14T00:00:00.000Z","tags":[{"inline":false,"label":"League-of-Entropy","permalink":"/blog/tags/League-of_entropy","description":"league of entropy tag"},{"inline":false,"label":"New-Members","permalink":"/blog/tags/new-members","description":"new members tag"}],"readingTime":2.6233333333333335,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"auttomata-network-joins-the-league-of-entropy","title":"Automata Network Joins the League of Entropy!","authors":["yolan"],"tags":["league-of-entropy","new-members"],"date":"2023-03-14T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"drand on Filecoin Virtual Machine (FVM) - draffle","permalink":"/blog/drand-on-filecoin-virtual-machine-FVM-draffle"},"nextItem":{"title":"A Guide on how to use drand","permalink":"/blog/a-guide-on-how-to-use-drand"}},"content":"We are proud to announce that [Automata Network](https://www.ata.network/), a web3 middleware protocol focused on protecting fairness & privacy, is joining forces with the League of Entropy (LoE)! Automata is becoming the 17th member to join the LoE and the first partner joining from Singapore - a significant milestone for the LoE.\\n\\n{/* truncate */}\\n\\nWe\u2019ve asked Automata some key questions that we\u2019ve regularly ask of new LoE members - see [**here**](/blog/the-value-of-drand-part-1-of-2), [**here**](/blog/the-value-of-drand-part-2-of-2) and [**here**](/blog/storswift-joins-the-league-of-entropy) - on the value of drand. Here are the team\'s answers.\\n\\n---\\n\\n**Why is drand important as a protocol for the next generation of the Internet in your opinion?**\\n\\n- Randomness plays a critical role in modern infrastructure, but by far the most important and widely used aspect of it is within the field of cryptography. What really impressed us about drand was how the system approaches and realizes randomness - instead of having a single entity that controls the infrastructure where it runs, beacon providers work together and run their own nodes to ensure that no single party can either bias or predict the final output.\\n- A diverse set of stakeholders is important in so many ways; in ensuring the integrity of the randomness being generated; in improving the transparency of the source of randomness; in making it such that no individual party is the single point of failure, be it benign or malicious. While Web3 on its own can sometimes be too vague to be a coherent goal, drand is an excellent example of what it takes to get the job done in a distributed fashion.\\n\\n---\\n\\n**Why did you decide to join the League of Entropy? What value do you see in drand that is important for your mission? What convinced you to join?**\\n\\n- Fairness and privacy are important to us at Automata. The rise of Web3 - which has shown itself to be as much an ideological movement as much as it has been an economic one - has given us reason to believe that its subsequent development will be governed by a set of rules quite unlike its predecessors. A decentralized source of randomness is fundamental to a decentralized Web3.\\n- In particular, there are a few characterizations that are helpful to keep in mind when it comes to considering what constitutes high-quality randomness: Anyone (such as users!) should be able to verify that a number is legitimately random. Randomness needs to be unbiased. No participant should be able to influence the output in any measure or way. Randomness needs to be unpredictable. No participant should be able to predict the output (or its properties) before it has been generated\\n- drand\u2019s passion about verifiable, unpredictable and bias-resistant randomness really spoke to us, and joining the League was an easy decision.\\n\\n---\\n\\n**Please explain briefly how you use drand in your setup.**\\n\\n- Using random numbers generated by drand\u2019s distributed randomness beacon helps to ensure the \u201cfreshness\u201d of the information at the point of computation, a global timestamp if you will. By integrating the latest number by drand - 256 bits of entropy generated every 30 seconds (also available every 3s in the latest deployment) - and ensuring that the random number is only valid during the interval it is generated, attackers are restricted in their ability to perform brute-force attacks, like reversing a one-way function.\\n- Pre-computation is not possible if the number is not yet known and the interval limits the time attackers have to guess for any given valid number.\\n\\n---\\n\\n**Where would you like to see drand in 2 years from now? What should we have achieved?**\\n\\n- We\u2019ve been keeping a keen eye on drand\u2019s roadmap and there have been some pretty exciting developments, including the Time-lock-encryption and Unchained Randomness, which now allows each randomness beacon to be independent of the previous one.\\n- We would love to see drand grow to be the definitive source of randomness for Web3 and for the project to extend its capabilities in more impactful ways, some of which are: a) On-demand randomness for specific requests, such as the generation of random nonces to cater to users who need tailored randomness, b) Verifiable, confidential randomness to enable a wider range of use-cases such as gaming.\\n\\n---\\n\\n*The League of Entropy evaluates, votes on, and onboards new members quarterly. If you want to be a part of the first production-grade distributed randomness beacon and help provide publicly verifiable randomness as a service, contact us at [leagueofentropy@googlegroups.com](mailto:leagueofentropy@googlegroups.com). We are looking for enthusiastic teams with experience running secure production services who are interested in operating drand nodes and relays. We also encourage you to check out the [**drand GitHub repository**](https://github.com/drand) for details and [**join us on slack**](https://join.slack.com/t/drandworkspace/shared_invite/zt-19u4rf6if-bf7lxIvF2zYn4~TrBwfkiA).*\\n\\n---"},{"id":"a-guide-on-how-to-use-drand","metadata":{"permalink":"/blog/a-guide-on-how-to-use-drand","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2023-02-21-a-guide-on-how-to-use-drand.mdx","source":"@site/blog/2023-02-21-a-guide-on-how-to-use-drand.mdx","title":"A Guide on how to use drand","description":"In this blog post, we\u2019ll dive into the fascinating world of public randomness and provide a step-by-step tutorial on how to consume randomness from drand and use it in your applications. Get ready for an exciting journey into the heart of randomness!","date":"2023-02-21T00:00:00.000Z","tags":[{"inline":false,"label":"Features","permalink":"/blog/tags/features","description":"begginer tag"},{"inline":false,"label":"How-to","permalink":"/blog/tags/how-to","description":"how to tag"}],"readingTime":3.3,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"a-guide-on-how-to-use-drand","title":"A Guide on how to use drand","authors":["yolan"],"tags":["features","how-to"],"date":"2023-02-21T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Automata Network Joins the League of Entropy!","permalink":"/blog/auttomata-network-joins-the-league-of-entropy"},"nextItem":{"title":"IPFS Force joins the League of Entropy!","permalink":"/blog/ipfs-force-joins-the-league-of-entropy"}},"content":"In this blog post, we\u2019ll dive into the fascinating world of public randomness and provide a step-by-step tutorial on how to consume randomness from drand and use it in your applications. Get ready for an exciting journey into the heart of randomness!\\n\\n{/* truncate */}\\n\\n---\\n\\n### Why Public Randomness?\\n\\nMost developers are familiar with private randomness: we use randomness to generate keypairs, randomize back off timings in distributed systems, choose stats for games, and a plethora of other things. This makes sense\u2014if the randomness used to generate our keypairs was public, bad actors could intercept all our communications or steal our bitcoin!\\n\\nHowever, some applications that currently use private randomness might be better served using public randomness. For example, online casinos generate random numbers to order cards dealt or determine a winner. We must trust that these casinos use effective random number generators, but [history has shown this is not always the case](http://web.archive.org/web/20210615005520/http://www.lauradhamilton.com/random-lessons-online-poker-exploit). If they committed to a random number generated by a third party (or third parties), or used some kind of *verifiable randomness*, this could improve fairness and increase user trust.\\n\\nFor cases such as random distribution of welfare (e.g., [universal basic income](https://en.wikipedia.org/wiki/Universal_basic_income) experiments), the government could use a third party such as an NGO to draw random numbers. However, this still constitutes a weak link, as a single third party [could be unduly influenced](https://en.wikipedia.org/wiki/Dual_EC_DRBG#Software_and_hardware_which_contained_the_possible_backdoor) to bias the randomness.\\n\\n---\\n\\n### Enter drand\\n\\ndrand is built upon a [threshold network](https://en.wikipedia.org/wiki/Threshold_cryptosystem). Instead of relying on a single third party, multiple third parties work together to generate a random number. It exploits the fact that a hashed signature has all the properties of randomness as long as nobody holds the secret key. Due to the way drand [distributes keys](https://evervault.com/blog/shamir-secret-sharing), no party ever has the whole secret key, and as such no one can ever predict the signature generated\u2014woohoo, randomness! These properties are why projects such as [Social Income](https://socialincome.org/) are building on top of drand for their randomness!\\n\\n---\\n\\n### Using drand\\n\\nPresently, the drand network generates a random hex string every thirty seconds. It can be verified using the public key of the network, so you can receive randomness from an untrusted party and verify that it\u2019s truly been created by the drand network. This powerful property simplifies your trust assumptions: you can receive randomness without having to trust the node that sent you the message because you can verify it for yourself.\\n\\nIn this tutorial, we\'re going to fetch randomness using the [official JavaScript client](https://github.com/drand/drand-client), but you could also use the [official Go client](https://github.com/drand/drand/tree/master/client), one of the [multiple unofficial Rust clients](https://github.com/search?q=drand+rust), or fetch it via curl/libp2p/other channels and verify the BLS signatures yourself.\\n\\n### Setting Up\\n\\nFirst, make sure you have a relatively recent version of Node.js (17+) and npm installed. Instructions can be found [here](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm).\\n\\nThen, create a new folder for your project:\\n\\n```bash\\nmkdir drand-client-tutorial\\ncd drand-client-tutorial\\nnpm init\\nnpm install drand-client\\n```\\n\\nAs the drand client is bundled as an ESM module, add `\\"type\\": \\"module\\"` in your `package.json` to use it.\\n\\nCreate a new file at the root of the project called `index.js` and open it in your editor of choice.\\n\\n### Fetching Randomness\\n\\nThe most basic primitive is a `Chain`\u2014it represents a single network instance hosted by a node. Networks can have different parameters such as frequency, algorithm, and participants, but for our purposes, the default network is enough.\\n\\nWe\'re going to connect to the HTTP API of the drand team\u2019s nodes ([api.drand.sh](https://api.drand.sh/)), but you could also use Cloudflare\'s API endpoint ([drand.cloudflare.com](https://drand.cloudflare.com/)), or StorSwift\u2019s relay ([api.drand.secureweb3.com:6875](https://api.drand.secureweb3.com:6875/)).\\n\\n```jsx\\nimport { HttpChain } from \\"drand-client\\";\\n\\nconst chain = new HttpChain(\\"<https://api.drand.sh>\\");\\nchain.info().then(info => console.log(info));\\n\\n```\\n\\nRun this with:\\n\\n```bash\\nnode --experimental-fetch index.js\\n\\n```\\n\\n(Node versions greater than 18 can skip the `--experimental-fetch` flag!)\\n\\n### Fetching the Latest Beacon\\n\\nTo fetch the latest beacon, use the `fetchBeacon` function:\\n\\n```jsx\\nimport { HttpChain, fetchBeacon } from \\"drand-client\\";\\n\\nconst chain = new HttpChain(\\"<https://api.drand.sh>\\");\\nfetchBeacon(chain, 1).then(beacon => console.log(beacon));\\n\\n```\\n\\nTo get the latest beacon by time:\\n\\n```jsx\\nimport { HttpChain, HttpChainClient, fetchBeaconByTime } from \\"drand-client\\";\\n\\nconst chain = new HttpChain(\\"<https://api.drand.sh>\\");\\nconst client = new HttpChainClient(chain);\\nfetchBeaconByTime(client, Date.now()).then(beacon => console.log(beacon));\\n\\n```\\n\\nFor real-time applications, use the `watch` function to listen for new beacons:\\n\\n```jsx\\nimport { HttpChain, HttpChainClient, watch } from \\"drand-client\\";\\n\\nconst chain = new HttpChain(\\"<https://api.drand.sh>\\");\\nconst client = new HttpChainClient(chain);\\nconst beacons = watch(client, new AbortController());\\n\\nfor await (const beacon of beacons) {\\n  console.log(beacon);\\n}\\n\\n```\\n\\n---\\n\\n### Using Randomness Effectively\\n\\nIf we only ever needed a 64-byte random value in our applications, we\'d be finished now. Unfortunately, real-life applications often require more tailored randomness. Here\u2019s how to handle different use cases:\\n\\n### Coin Flip Example\\n\\n```jsx\\nimport { HttpChain, fetchBeaconByTime } from \\"drand-client\\";\\n\\nconst chain = new HttpChain(\\"<https://api.drand.sh>\\");\\nfetchBeaconByTime(chain, Date.now()).then(beacon => {\\n  const flip = BigInt(\\"0x\\" + beacon.randomness) % BigInt(2);\\n\\n  if (flip === BigInt(0)) {\\n    console.log(beacon.round + \\": HEADS!\\");\\n  } else {\\n    console.log(beacon.round + \\": TAILS!\\");\\n  }\\n});\\n\\n```\\n\\n### Avoiding Bias in Random Selection\\n\\nFor selecting a random winner from a lottery:\\n\\n```jsx\\nimport { HttpChain, fetchBeaconByTime } from \\"drand-client\\";\\n\\nconst participants = [\\"alice\\", \\"bob\\", \\"carol\\", \\"dave\\", \\"edward\\", \\"fiona\\", \\"georgina\\"];\\nconst chain = new HttpChain(\\"<https://api.drand.sh>\\");\\nfetchBeaconByTime(chain, Date.now()).then(beacon => {\\n  const randomNumber = BigInt(\\"0x\\" + beacon.randomness);\\n  let winnerIndex = randomNumber % BigInt(participants.length);\\n\\n  // Rejection sampling to avoid bias\\n  while (winnerIndex >= BigInt(participants.length)) {\\n    winnerIndex = BigInt(\\"0x\\" + crypto.randomBytes(2).toString(\'hex\')) % BigInt(participants.length);\\n  }\\n\\n  console.log(`The winner is ${participants[winnerIndex]}`);\\n});\\n\\n```\\n\\n---\\n\\n### Wrapping Up\\n\\nUsing drand can bring a new level of fairness and verifiability to your applications. Whether you\u2019re flipping coins or selecting lottery winners, drand\'s verifiable randomness ensures transparency and trust. We love hearing about the projects you\u2019re working on, so feel free to [join us on Slack](https://join.slack.com/t/drandworkspace/shared_invite/zt-19u4rf6if-bf7lxIvF2zYn4~TrBwfkiA) and share your stories or ask for help.\\n\\n---\\n\\n### Suggested Readings:\\n\\n- [Random Number](https://en.wikipedia.org/wiki/Random_number)\\n- [Threshold Cryptosystem](https://en.wikipedia.org/wiki/Threshold_cryptosystem)\\n- [Pseudorandom Number Generator](https://en.wikipedia.org/wiki/Pseudorandom_number_generator)\\n- [Universal Basic Income](https://en.wikipedia.org/wiki/Universal_basic_income)\\n- [Shamir\'s Secret Sharing](https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing)\\n- [Timing Attack](https://en.wikipedia.org/wiki/Timing_attack)\\n- [Dual_EC_DRBG](https://en.wikipedia.org/wiki/Dual_EC_DRBG)\\n\\n---\\n\\nUntil next time, happy coding! \ud83d\ude80"},{"id":"ipfs-force-joins-the-league-of-entropy","metadata":{"permalink":"/blog/ipfs-force-joins-the-league-of-entropy","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2023-01-26-ipfs-force-joins-the-league-of-entropy.mdx","source":"@site/blog/2023-01-26-ipfs-force-joins-the-league-of-entropy.mdx","title":"IPFS Force joins the League of Entropy!","description":"https://drand.love/assets/img/ipfs-force-logo.18be5e96.png","date":"2023-01-26T00:00:00.000Z","tags":[{"inline":false,"label":"League-of-Entropy","permalink":"/blog/tags/League-of_entropy","description":"league of entropy tag"},{"inline":false,"label":"New-Members","permalink":"/blog/tags/new-members","description":"new members tag"},{"inline":false,"label":"News","permalink":"/blog/tags/news","description":"news tag"}],"readingTime":1.56,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"ipfs-force-joins-the-league-of-entropy","title":"IPFS Force joins the League of Entropy!","authors":["yolan"],"tags":["league-of-entropy","new-members","news"],"date":"2023-01-26T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"A Guide on how to use drand","permalink":"/blog/a-guide-on-how-to-use-drand"},"nextItem":{"title":"drand: 2022 Year in Review & our 2023 Roadmap","permalink":"/blog/drand-2022-year-in-review-&-our-2023-roadmap"}},"content":"![https://drand.love/assets/img/ipfs-force-logo.18be5e96.png](/img/ipfs-force-logo.18be5e96.png)\\n\\nWe are excited to announce that IPFSForce has joined the League of Entropy!\\n\\n{/* truncate */}\\n\\nIPFSForce has focused on technology research and development in blockchain since 2017. With the vision of being Web 3.0\u2019s infrastructure service provider, IPFSForce is working to make storage more efficient, cost-effective, open, and safer. With \\"Co-built Value, Sharing Honour\\" as a guiding principle, IPFSForce leverages technologies to empower global communities with high-quality services.\\n\\nWe\'ve asked IPFSForce some key questions that we\'ve previously asked other LoE members - see [**here**](/blog/the-value-of-drand-part-1-of-2) and [**here**](/blog/the-value-of-drand-part-2-of-2) - on the value of drand. Check out what they said.\\n\\n---\\n\\n**Why is drand important as a protocol for the next generation of the Internet in your opinion?**\\n\\n- The blockchain industry and the broader Web 3.0 ecosphere are in dire need of a decentralized, scalable, impartial, verifiable, and secure service that delivers randomness, which is exactly the mission of drand: to create and provide such a service. A randomness service is no doubt the most fundamental component to the decentralized world.\\n\\n---\\n\\n**Why did you decide to join the League of Entropy? What value do you see in drand that is important for your mission? In other words, what convinced you to join?**\\n\\n- Our goal is to become a Web 3.0 infrastructure service provider, and drand is envisioned as an Internet infrastructure level service that offers randomness to applications. That\'s where we\'re comparable in certain ways. Furthermore, it has always been in our best interests to assist and participate in such research-based security tech communities and products focusing on advanced technologies.\\n\\n---\\n\\n**How do you use drand in your setup, infrastructure or application?**\\n\\n- As an IPFS/Filecoin service provider, we are using drand to provide Filecoin chain services to our customers. drand acts as a randomness beacon in the Filecoin network and has provided us with crucial services in block generation, various stages of [**Proof of Replication (PoRep) and Proof of Spacetime (PoSt)**](https://spec.filecoin.io/#section-algorithms.pos).\\n\\n---\\n\\n**Where would you like to see drand in 2 years from now?**\\n\\n- We expect that the LoE network will be more accessible to Web 3.0 partners, thereby encouraging more developers to be involved and build infrastructure and dApps utilizing drand as a randomness service. It is only with more partners engaging that the LoE network will be able to grow and better serve the Web 3.0 globe.\\n\\n---\\n\\n*The League of Entropy evaluates, votes on, and onboards new members quarterly. If you want to be a part of the first production-grade distributed randomness beacon and help provide publicly verifiable randomness as a service, contact us at leagueofentropy@googlegroups.com. We are looking for enthusiastic teams with experience running secure production services who are interested in operating drand nodes and relays. We also encourage you to check out the drand GitHub repository for details.*\\n\\n---"},{"id":"drand-2022-year-in-review-&-our-2023-roadmap","metadata":{"permalink":"/blog/drand-2022-year-in-review-&-our-2023-roadmap","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2023-01-22-drand-2022-year-in-review-our-2023-roadmap.mdx","source":"@site/blog/2023-01-22-drand-2022-year-in-review-our-2023-roadmap.mdx","title":"drand: 2022 Year in Review & our 2023 Roadmap","description":"drand: 2022 Year in Review","date":"2023-01-22T00:00:00.000Z","tags":[{"inline":false,"label":"News","permalink":"/blog/tags/news","description":"news tag"}],"readingTime":2.716666666666667,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"drand-2022-year-in-review-&-our-2023-roadmap","title":"drand: 2022 Year in Review & our 2023 Roadmap","authors":["yolan"],"tags":["news"],"date":"2023-01-22T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"IPFS Force joins the League of Entropy!","permalink":"/blog/ipfs-force-joins-the-league-of-entropy"},"nextItem":{"title":"CryptoSat takes drand to Space!","permalink":"/blog/cryptosat-takes-drand-to-space"}},"content":"## drand: 2022 Year in Review\\n\\n{/* truncate */}\\n\\n### \ud83e\udd73 Reflections on a Year of Achievements\\n\\nAs 2022 wrapped up, the drand team took a moment to reflect on the incredible journey we\u2019ve been on. The year was packed with milestones, innovations, and expansions that have set the stage for an exciting future. Here\u2019s a look back at some of the standout moments from our year.\\n\\n---\\n\\n### \ud83c\udd95 New Features That Shaped Our Journey\\n\\nOne of the highlights of 2022 was the development of some game-changing features:\\n\\n### \u26d3\ufe0f Unchained Randomness and Higher Frequency Beacons \ud83d\udea8\\n\\nEarly in the year, we rolled out unchained randomness and higher frequency beacons on our testnet. These features have shown immense potential, and we\u2019ve been thrilled with their performance. They promise to expand the horizons for drand and the applications using it. We\u2019ve been testing them rigorously, and they\u2019ve been operational for several months now.\\n\\n*Want to dive deeper? Check out [Multi-Frequency Support & Timelock Encryption are coming to drand!](/blog/multi-frequency-support-and-timelock-encryption-are-coming-to-drand) for all the details.*\\n\\n### \u23f1\ufe0f Timelock Encryption\\n\\nBuilding on the success of unchained randomness, we developed Timelock Encryption on drand. This feature has been a hit, garnering a lot of attention and excitement. While it\u2019s still in the testnet phase, we\u2019ve already launched a web app, [Timevault](https://timevault.drand.love/), and we\u2019re looking forward to deploying it on the mainnet soon. Stay tuned for updates!\\n\\n---\\n\\n### \ud83d\udd2d Enhancing Network Visibility\\n\\nMonitoring and maintaining a robust network is crucial. This year, we made significant strides in enhancing our visibility into the drand network:\\n\\n- **Integrated Metrics:** We embedded metrics directly into our codebase, providing a clearer view of the network\u2019s health.\\n- **New Dashboard:** We built a comprehensive dashboard that gives us a holistic view of nodes before, during, and after resharing ceremonies. This tool has been instrumental in enabling async ceremonies, making the process more flexible for node operators.\\n\\n*Curious about the technical details? Read more in [Observing Randomness](/blog/observing-randomness)*\\n\\n---\\n\\n### \ud83d\udef0\ufe0f Taking drand to New Heights \u2013 Literally!\\n\\nOne of the most exciting developments of 2022 was our collaboration with CryptoSat. In October, we deployed drand on one of their satellites, sending it into space! This space node interacted with ground station nodes, marking a significant milestone in our journey.\\n\\nWe\u2019re not stopping there. Our goal is to have a permanent drand node operating from space, further enhancing the resilience of our network.\\n\\n*Read all about this groundbreaking achievement in [CryptoSat takes drand to Space!](/blog/cryptosat-takes-drand-to-space)*\\n\\n---\\n\\n### \ud83e\udeb4 Growing the League of Entropy\\n\\n2022 was also a year of growth for the League of Entropy (LoE):\\n\\n- **New Members:** We welcomed four new members to the League and have several more lined up for consideration in the coming months.\\n- **Community Engagement:** We presented drand at several high-profile events, including NorthSec, MCH, and DEFCON. These presentations sparked new collaborations and expanded our community.\\n\\nInterested in joining the League of Entropy? Learn more at [The League of Entropy][LOE]\\n\\n---\\n\\n### Celebrating \ud83d\udcaf% Uptime!\\n\\nWe\u2019re proud to report that our network had 100% uptime throughout the year, with no hiccups or disruptions. This level of reliability is a testament to the hard work and dedication of our team.\\n\\n---\\n\\n### \ud83d\ude0e Looking Ahead: drand in 2023\\n\\nAs we celebrate our successes, we\u2019re also gearing up for an ambitious 2023. Here\u2019s a sneak peek at what\u2019s in store:\\n\\n### \ud83d\udd27 Network Maintenance and Upgrades\\n\\nOur ongoing commitment to maintaining and enhancing the drand network includes:\\n\\n- Optimizing storage for beacons.\\n- Implementing unchained randomness and higher frequency beacons on the mainnet.\\n- Refactoring the Distributed Key Generation (DKG) process to improve resilience and flexibility.\\n\\n### Expanding the League of Entropy\\n\\nWith improved processes, we\u2019re looking to expand the League of Entropy. We\u2019re also exploring incentive structures to reward those who contribute their time and resources to the network.\\n\\n### \ud83e\ude99 Integrating with Filecoin Virtual Machine (FVM)\\n\\nThe Filecoin team is working on the Filecoin Virtual Machine (FVM), and we\u2019re excited to integrate drand beacons into this system. This will significantly broaden drand\u2019s user base and application scope.\\n\\n### \ud83e\udd1d\ud83c\udffd Supporting the drand Community\\n\\nWe\u2019re committed to making drand more user- and developer-friendly. This includes updating our processes, websites, and \u201chow to\u201d guides, and holding regular \u201ccode walkthroughs\u201d and hackathons to engage with our community.\\n\\n---\\n\\n### \ud83d\udee3\ufe0f Join Us on Our Journey!\\n\\n2023 promises to be a year of growth and innovation. We invite you to join us on this exciting journey. Whether you\u2019re a developer, a potential partner, or just a fan of what we\u2019re doing, we\u2019d love to have you involved.\\n\\n- **Monitor Our Progress:** here on this blog!\\n- **Get Involved:** Join the discussion in the drand Slack workspace through this [invitation link](https://join.slack.com/t/drandworkspace/shared_invite/zt-2p00bn43o-qALTK5RZEIK3I4fIO9h8dQ).\\n\\nBest wishes for a productive 2023! \ud83c\udf89\\n\\n---\\n\\nFeel free to let us know if you need more adjustments or further details!\\n\\n[LOE]: https://drand.love/1e76674b75e249699445799c5083fe78"},{"id":"cryptosat-takes-drand-to-space","metadata":{"permalink":"/blog/cryptosat-takes-drand-to-space","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2022-10-19-cryptosat-takes-drand-to-space.mdx","source":"@site/blog/2022-10-19-cryptosat-takes-drand-to-space.mdx","title":"CryptoSat takes drand to Space!","description":"https://drand.love/assets/img/cryptosat-blog-header3.84006631.png","date":"2022-10-19T00:00:00.000Z","tags":[{"inline":false,"label":"News","permalink":"/blog/tags/news","description":"news tag"}],"readingTime":3.506666666666667,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"cryptosat-takes-drand-to-space","title":"CryptoSat takes drand to Space!","authors":["yolan"],"tags":["news"],"date":"2022-10-19T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"drand: 2022 Year in Review & our 2023 Roadmap","permalink":"/blog/drand-2022-year-in-review-&-our-2023-roadmap"},"nextItem":{"title":"Observing Randomness","permalink":"/blog/observing-randomness"}},"content":"![https://drand.love/assets/img/cryptosat-blog-header3.84006631.png](/img/cryptosat-blog-header3.84006631.png)\\n\\n## \ud83c\udfb2 drand & \ud83d\udef0\ufe0f CryptoSat: Pioneering Space-Based Randomness\\n\\n**drand is the next generation distributed randomness service.** It requires several independent organizations to run a node that contributes a part of the randomness to the network. So far, all of the nodes that participate in the [**League of Entropy\u2019s**](https://blog.cloudflare.com/league-of-entropy/) drand network have been placed on Earth. But this has just changed! Temporarily for now, but hopefully more permanently in the near future. Read on to find out all the details.\\n\\n{/* truncate */}\\n\\n### What is CryptoSat?\\n\\n[CryptoSat](http://cryptosat.io/) builds and launches satellites that power blockchain and cryptographic protocols. Satellites are physically inaccessible and can serve as the most secure root-of-trust that guarantees the confidentiality and integrity of sensitive computations and data. Such tamper-proof satellites can serve numerous use-cases including transaction signing, trusted setups for cryptographic schemes, a randomness oracle, a time-oracle (VDF), and more.\\n\\n### What is drand?\\n\\ndrand is designed to be run by a network of nodes to produce verifiable, unpredictable, and non-biasable random values. The primary drand network is operated by a group of partners known as the *League of Entropy* (LoE). The LoE currently consists of 16 independent member organizations located on several continents and operating 23 nodes across different cloud providers, data centers, and geographies.\\n\\ndrand is based on a cryptography model called \u201cThreshold Cryptography.\u201d According to this model, a `threshold` number of \u201cpartial signatures\u201d need to be collected from different nodes to produce a valid signature for the whole group. In the LoE\u2019s drand network, the `threshold` is set to 50% of nodes +1, which gives a `threshold` of 12 for a 23-node network.\\n\\nThe random numbers produced by drand are:\\n\\n- **Verifiable:** Anyone can verify that a random value was indeed produced by the LoE group by checking the signature and re-deriving the randomness from it themselves.\\n- **Unpredictable:** A new random value can only be produced when a `threshold` number of parts (also called partials) of the final signature are collected and aggregated.\\n- **Non-biasable:** It is impossible to influence any future random value without compromising a `threshold` number of nodes.\\n\\nThe LoE drand network has been running since August 2020, has produced more than 2M random values (emitted every 30 seconds) as of September 2022, and has had zero downtime.\\n\\n### \u2697\ufe0f The Experiment\\n\\nOn March 16th, 2022, CryptoSat conducted a series of experiments aboard the International Space Station (ISS). These experiments tested the operational aspects of performing cryptographic operations from space, as a stepping stone towards running such operations in satellites. One important experiment was to run a drand node on a machine on the ISS and connect it to a drand node on the ground.\\n\\nFirst, the two nodes performed a Distributed Key Generation (DKG) procedure. Then, the pair of nodes started periodically producing a random beacon. The experiment established the feasibility of placing a drand node in space, despite operational complexities.\\n\\nLatency between nodes plays an important role in the drand network, and satellite networks may incur increased latency and delays due to the distance between terrestrial nodes and those on satellites. Spotty connectivity due to \u201cline-of-sight\u201d requirements can cause satellite nodes to disappear and experience severe bandwidth fluctuations.\\n\\n*drand was never before tested under such circumstances.* The ISS experiment confirmed the feasibility of using the existing drand implementation on a space node, given unpredictable connectivity. However, the ISS experiment provided only limited insight into the long-term ongoing operation of a drand node in space, due to the very limited time frame of the experiment (under an hour). Spotty connectivity needs to be further simulated before deploying drand on an actual satellite.\\n\\n### \u2757 Importance and Next Steps\\n\\n**A signature from space:** Any computer placed on Earth is vulnerable to physical force and penetration through physical access. Although it is very difficult to simultaneously compromise `threshold` nodes and LoE partners use the highest security standards, a node that operates from space is physically unreachable. This is why CryptoSat\u2019s node, which operates from space, is such an interesting addition to the League of Entropy.\\n\\nThe two teams plan to continue the collaboration and establish CryptoSat\u2019s participation in the League of Entropy as a longer-term commitment. Several things stand out from this vision:\\n\\n1. **Improved Security:** Having a node outside of physical reach further enhances the bias-resistance and resilience of the drand network and randomness service.\\n2. **Latency Testing:** We will be able to test whether higher latencies influence any part of the drand randomness service, including the DKG itself and the aggregation of partials.\\n3. **CryptoSat\'s Cryptographic Use Case:** Running drand is generally lightweight in terms of CPU and bandwidth requirements but has increased availability requirements. Stress-testing cryptographic operations helps CryptoSat focus on increasing availability and showcasing progress through clear metrics.\\n4. **User Flexibility:** Different users have different threat models. CryptoSat provides a node with unique security properties that can withstand coordinated attacks on multiple ground nodes, allowing users to choose whether their use-case requires beacons produced with the participation of CryptoSat.\\n\\n### \ud83d\uddfa\ufe0f What\u2019s Next on Our Roadmap?\\n\\nIn May 2022, [CryptoSat launched its first satellite](https://cointelegraph.com/news/cryptosat-s-first-nanosatellite-blasts-off-wednesday-on-spacex-rocket), Crypto1. While the ISS experiment was a valuable proof of concept for running drand in space, the real value comes from a truly physically isolated satellite supporting the drand protocol. Protocol Labs and CryptoSat are aiming to continue co-development towards a functional drand node running aboard a satellite. This requires some refactoring of the drand implementation to separate the cryptographic module that needs to run in space from the parts that communicate with other drand nodes.\\n\\nAs mentioned, the time-constrained ISS experiment doesn\u2019t provide full insight into the ongoing operation of a node with spotty connectivity. We need to simulate a participant node that is only occasionally available to participate in beacon generation rounds, simulating the conditions of a satellite that is sometimes out of reach of any ground station.\\n\\nThe future is bright for this collaboration\u2014not only for the two parties involved but most importantly for the users of drand as a randomness service! Reach out if you have ideas on how to add further value to our upcoming experiments, or if you want to get involved and contribute to drand\u2019s vision. Make sure to join our [**drand Slack workspace**](https://join.slack.com/t/drandworkspace/shared_invite/zt-2p00bn43o-qALTK5RZEIK3I4fIO9h8dQ), or reach out by email at: leagueofentropy [ at ] googlegroups.com.\\n\\n---"},{"id":"observing-randomness","metadata":{"permalink":"/blog/observing-randomness","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2022-08-25-observing-randomness.mdx","source":"@site/blog/2022-08-25-observing-randomness.mdx","title":"Observing Randomness","description":"Monitoring distributed systems is a challenge. While there are established patterns and solutions for monitoring the most common types of applications, there is usually no silver bullet. In this blog post, we outline the challenges that we faced when implementing monitoring for one such system, drand.","date":"2022-08-25T00:00:00.000Z","tags":[{"inline":false,"label":"Features","permalink":"/blog/tags/features","description":"begginer tag"}],"readingTime":5.486666666666666,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"observing-randomness","title":"Observing Randomness","authors":["yolan"],"tags":["features"],"date":"2022-08-25T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"CryptoSat takes drand to Space!","permalink":"/blog/cryptosat-takes-drand-to-space"},"nextItem":{"title":"drand @ NorthSec","permalink":"/blog/drand-at-northsec"}},"content":"*Monitoring distributed systems is a challenge. While there are established patterns and solutions for monitoring the most common types of applications, there is usually no silver bullet. In this blog post, we outline the challenges that we faced when implementing monitoring for one such system, drand.*\\n\\n{/* truncate */}\\n\\n### What is drand?\\n\\n**Drand** is a public, verifiable, unpredictable, and unbiased randomness beacon. It is based on the idea that to generate randomness in a reliable and trustworthy way, you cannot depend on a single entity to control the infrastructure where it runs. This led us to seek the collaboration of multiple organizations to run their own drand daemons, forming [The League of Entropy][LOE] (LoE)\u2014a distributed organization where each participating partner runs a drand node.\\n\\nA drand *network* is composed of multiple *nodes*. Each network generates separate randomness beacons at specific intervals, called *rounds*. The number of nodes on a network is fixed at any given point in time and only changes during a *ceremony*. During the ceremony, a *threshold* is set, which is the minimum number of nodes that need to be connected to the network at any given time for randomness generation to succeed.\\n\\n### \ud83d\udcc8 The Need for Monitoring\\n\\nTo ensure security, we do not allow just any host to join the network at any time. Whenever a host joins or leaves the network, we hold a \u201cceremony\u201d where cryptographic keys are refreshed and exchanged. In between ceremonies, the list of hosts that participate in a drand network is static. Ceremonies are usually held quarterly, and before each ceremony, an allow list containing the IP addresses of all nodes in the network is distributed to all participants to open the appropriate firewall ports.\\n\\nCoordinating these ceremonies presents several challenges:\\n\\n- **Synchronous Operation**: All node operators need to be online simultaneously to execute commands correctly.\\n- **Version Mismatch**: Nodes might be running different versions of `drand`, leading to failures.\\n- **Connectivity Issues**: Nodes might have connectivity problems that prevent proper participation.\\n\\nTo address these issues, full visibility into the drand network and the state of each node is essential. Our goal is to enable [**asynchronous ceremonies**](https://en.wikipedia.org/wiki/Asynchronous_system) where operators can execute commands within a timeframe without being online simultaneously. A monitoring tool providing an accurate view of nodes and network states is necessary.\\n\\n### \ud83d\udccf Monitoring Architecture Requirements\\n\\nTo properly monitor the drand network, we have the following requirements:\\n\\n1. **Allow any LoE member to create their own monitoring infrastructure**: Organizations can select the metrics aggregation platform that best meets their needs.\\n2. **Ease of deployment**: Modify the drand binary to export metrics without adding a new binary.\\n3. **Minimize the need for opening network ports**: Ideally, no network ports other than the one used for generating randomness should be opened.\\n4. **Use industry-standard formats where possible**: Use an industry-standard format to publish metrics.\\n5. **Ability to see the state of the whole network from any point in the network**: Enable each node to provide a full view of the whole network.\\n6. **(Close to) real-time view of the network state**: Ensure changes in node state are seen quickly, especially during ceremonies.\\n\\n### \ud83d\udcd0 Design Decisions\\n\\nOur requirements led to the following design:\\n\\n- **Each node exposes its own metrics in Prometheus format**: Prometheus is an [**industry-standard**](https://en.wikipedia.org/wiki/Prometheus_(software)) format, and each node exposing its own metrics allows direct monitoring of individual nodes.\\n- **Each node can retrieve other nodes\u2019 metrics and expose them in Prometheus format**: This enables not only Protocol Labs but any LoE member to create their own dashboards showing the state of the whole network.\\n- **Metrics transport uses the same mechanism as inter-node communication for generating randomness (GRPC)**: By using [**GRPC**](https://en.wikipedia.org/wiki/GRPC), we allow metrics to be sent between nodes without requiring additional network ports.\\n- **Gather metrics using Telegraf and export them to InfluxDB, accessed via Grafana Cloud**: This setup centralizes metrics and creates an easy-to-use dashboard with a one-minute scraping interval, which can be lowered during ceremonies for faster updates.\\n\\n### \ud83d\udcca Metrics Design\\n\\nWe decided to monitor the following minimal information for running a smooth ceremony:\\n\\n- Version of `drand` that the node is running.\\n- Whether nodes have restarted their daemon ahead of the ceremony to ensure that the certificate is still valid and to clear the process\u2019 memory and storage.\\n- Whether nodes have connectivity to all other nodes.\\n- The current ceremony state of the node.\\n\\nFor ongoing monitoring, we added the following for each beacon in each node:\\n\\n- When the last randomness was generated.\\n- The last round generated by the node for that beacon chain.\\n- The time difference between nodes (including network round-trip times).\\n\\n### \ud83d\udce1 Inter-Node Communications\\n\\nAs mentioned above, one of the requirements was to be able to view the state of the whole drand network without requiring node operators to open any additional holes in their firewall, nor to connect to any hosts other than those included in the drand network itself. Therefore, it was necessary to enable the possibility of fetching a remote node\u2019s metrics via the same method used to coordinate randomness generation: that is, through [**GRPC**](https://en.wikipedia.org/wiki/GRPC).\\n\\nWe also wanted to reduce the amount of metrics traffic between nodes, so we went with a pull system where any node can pull any other node\u2019s metrics when requested. For that, we exposed an additional HTTP endpoint that includes the peer\u2019s ID to get Prometheus metrics for the associated peer. A request to that endpoint makes a GRPC call to the remote node to get the metrics before returning them to the client. With this, we have the ability to get metrics from all nodes in the drand network without any unnecessary additional traffic.\\n\\nThe Protocol Labs nodes all run instances of [**Telegraf**](https://www.influxdata.com/time-series-platform/telegraf/), whose configuration is hard-coded to get the metrics from all nodes in the drand network. This is possible because the nodes in the network are static and only change during ceremonies. Telegraf then pushes the metrics into [**InfluxDB**](https://www.influxdata.com/). We then use [**Grafana**](https://grafana.com/) to visualize the data.\\n\\nRegarding LoE members, the fact that metrics are exposed using the industry-standard Prometheus format and that any node can gather metrics from any other node in the network makes it possible for any of them to create a setup similar to this and gather metrics into their own observability solution.\\n\\n### \ud83d\udcc9 Dashboard Design\\n\\nAs is usually the case, it took multiple iterations to get to a dashboard design that was useful and also comprehensible. These iterations involved both changing the layout and organization of the presented information, as well as adding metrics that were missed during initial analysis. For example, during ceremonies some of the state changes happen so fast that they were missed by the polling and dashboard refresh intervals, so we added timestamps to be able to see whether a state had changed or not. We also reformulated some metrics labels to reduce cardinality.\\n\\nWe ended up with a dashboard with two sections. The first section includes connectivity information for each node, as well as a connectivity matrix showing which nodes are connected to which other nodes. This has enabled us to find problems such as firewall misconfigurations or bugs impacting connectivity.\\n\\n![https://drand.love/assets/img/drand_dash_1.f1a0b363.png](/img/drand_dash_1.f1a0b363.png)\\n\\nThe second section contains information about each of the beacons in the given network, including the ceremony state for each node. This allows us to track ceremonies, as well as ensuring that all nodes are up to date with all other nodes.\\n\\n![https://drand.love/assets/img/drand_dash_2.f887bda3.png](/img/drand_dash_2.f887bda3.png)\\n\\n### \ud83c\udfc6 Results\\n\\nWe have already deployed and used the new dashboard in the last set of ceremonies that we carried out in our testnet network. It has proven to be an extremely useful tool. We were able to spot connectivity problems and other inconsistencies in a totally asynchronous manner, which in turn enabled us to resolve issues much faster. This has given us confidence to run the next testnet ceremony in an asynchronous manner, without having to coordinate all operators being in front of their keyboards at the same time.\\n\\nBeyond ceremonies, we now have a much more detailed view of the state of the LoE drand network.\\n\\n### Next Steps\\n\\nAs is the case with pretty much any software tool, many more features can be added and several of the existing ones can be optimized. However, what we have is already a big step forward and gives us much higher confidence in the process, compared to the ceremony procedure we used to have.\\n\\nSome of the issues we have found that we would like to fix in future versions of the monitoring infrastructure are:\\n\\n- **Consistency**: We sometimes see some measurements toggling between two numbers in the dashboard. The reason for this is, we are gathering metrics from all hosts and storing them in Influx DB. However, some of these metrics are system-wide, and since this is a distributed system, some hosts might have slightly different views of the state of the network than other hosts (especially during ceremonies). While this is not a widespread problem, it can be confusing.\\n- **Visibility of New Nodes**: When a new node joins the network, we are unable to see\\n\\nit in the dashboard until the ceremony is finished. We would like to have some way of monitoring the state of a new node.\\n\\n- **Visibility in the Case of Connectivity Problems**: Since we are scraping the metrics from the Protocol Labs nodes, if a node cannot connect to any of them, we cannot gather its metrics. While this is mitigated by scraping from all Protocol Labs nodes instead of just one, we still run the risk of missing a node\u2019s metrics if it cannot connect to any Protocol Labs nodes.\\n\\n---\\n\\n### Suggested References for Further Reading:\\n\\n- [Random Number](https://en.wikipedia.org/wiki/Random_number)\\n- [Threshold Cryptography](https://en.wikipedia.org/wiki/Threshold_cryptography)\\n- [Public Key Infrastructure](https://en.wikipedia.org/wiki/Public_key_infrastructure)\\n- [Verifiable Random Function](https://en.wikipedia.org/wiki/Verifiable_random_function)\\n- [Prometheus (software)](https://en.wikipedia.org/wiki/Prometheus_(software))\\n- [GRPC](https://en.wikipedia.org/wiki/GRPC)\\n- [Asynchronous System](https://en.wikipedia.org/wiki/Asynchronous_system)\\n\\n---\\n\\n[LOE]: https://drand.love/1e76674b75e249699445799c5083fe78"},{"id":"drand-at-northsec","metadata":{"permalink":"/blog/drand-at-northsec","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2022-06-23-drand-at-northsec.mdx","source":"@site/blog/2022-06-23-drand-at-northsec.mdx","title":"drand @ NorthSec","description":"Drand was recently presented at the North Sec conference! Here is a brief summary of the event and the drand talk, as well as the answers to a few of the interesting questions we received.","date":"2022-06-23T00:00:00.000Z","tags":[{"inline":false,"label":"Conferences-and-Events","permalink":"/blog/tags/conferences-and-events","description":"conferences and events tag"},{"inline":false,"label":"News","permalink":"/blog/tags/news","description":"news tag"}],"readingTime":7.233333333333333,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"drand-at-northsec","title":"drand @ NorthSec","authors":["yolan"],"tags":["conferences-and-events","news"],"date":"2022-06-23T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Observing Randomness","permalink":"/blog/observing-randomness"},"nextItem":{"title":"StorSwift joins the League of Entropy!","permalink":"/blog/storswift-joins-the-league-of-entropy"}},"content":"*Drand was recently presented at the North Sec conference! Here is a brief summary of the event and the drand talk, as well as the answers to a few of the interesting questions we received.*\\n\\n{/* truncate */}\\n\\nYou can find the slides [**ready to be downloaded on IPFS](https://ipfs.io/ipfs/bafybeigenfo4az5j7abbjc3mbn7i4rl6qto7cca75kednwh73lopzq6foa/Public_verifiable_unbiasable_randomness_wassat-NSec2022-Yolan_Romailler.pdf):**\\n\\n[CID: bafybeigenfo4az5j7abbjc3mbn7i4rl6qto7cca75kednwh73lopzq6foa]\\n\\nA video of the talk is already [**available on Youtube**](https://youtu.be/I1iKtNGRv0s?t=17468).\\n\\n## **What is NorthSec?**\\n\\n[**North Sec**](https://nsec.io/) is the biggest conference in Canada that focuses on IT Security and its many facets. It is traditionally in Montreal in May and starts by featuring a few days of deep dive trainings, followed by two days of conference sessions and finishes with the one of the largest on-site Capture The Flag (CTF) events in the world taking place over the weekend.\\n\\nAt North Sec you find plenty of security professionals and hackers alike in the audience, and the range of talks is usually well balanced, from pen-testing to social impact or legal ones, including cryptography, malware, and more! It features both attack- and defence-focused presentations and is usually very enjoyable.\\n\\n## **Drand @ NorthSec**\\n\\nThe Drand team attended North Sec to present a talk titled \u201cPublic, verifiable, and unbiasable randomness: wassat?\u201d whose goal was to introduce the different flavours of randomness to the audience, as well as to explain some of the quirks that make randomness a sensitive topic, and why it\u2019s especially difficult in the distributed, public case. Finally, we also did a recap about the current drand network being run by the League of Entropy and available to the public as a source of randomness. We have invited interested parties to start using drand in their projects, or to join the [**League of Entropy**](https://www.cloudflare.com/en-gb/leagueofentropy/) to contribute to a secure, distributed randomness network.\\n\\n![https://drand.love/assets/img/northsec-presentation-01.jpg](/img/northsec-presentation-01.jpg)\\n\\n### **Key Takeaways from the Talk**\\n\\nIn case you need a refresher or are just curious about what this talk was about, here are my key takeaways:\\n\\n- **Public randomness is a specific kind of randomness that is typically used in lotteries and other public processes (jury election, population sampling, etc)**, where you want to be able to say \u201cLook, I\u2019ve got nothing up my sleeves, I just took the random value here and anybody can check that I didn\u2019t cheat\u201d.\\n- **Verifiable randomness is another kind of randomness that can be proven to have been generated in a given (honest) way**. This is useful in order to increase public trust in one\u2019s system. If you run a lottery but nobody knows how you\u2019re choosing the winning number, people might be wary, whereas if you chose the winning numbers by picking them live on TV in a jar, then people can see you\u2019re unlikely to bias the result. In the same way, verifiable randomness aims at increasing trust by providing a means of verifying the random value is unbiased and generated in a fair manner.\\n- **Secret randomness is the kind of randomness you\u2019re most used to and is meant to stay secret**: every time you connect to a website, every time you generate a new SSH or PGP key, that\u2019s the kind of randomness you\u2019ll be using. For this kind of randomness, you usually want to source it from your very own computer and to rely on so-called \u201ccryptographic PRNGs\u201d when using it in your code to produce nonces, IVs or secret keys. It\u2019s called \u201csecret\u201d because a leak or bias can have devastating consequences up to secret key leakage from a single signature, for example.\\n\\n![https://drand.love/assets/img/northsec-presentation-02.jpg](/img/northsec-presentation-02.jpg)\\n\\n- **Distributed randomness is what we call randomness that is meant to be used on a distributed system;**\xa0be it a smart contract on a blockchain, or any other random value on which a system needs to achieve consensus, maybe for leader election, or something else. It\u2019s usually fairly difficult to achieve consensus on a random value in a way that will ensure that this random value is neither predictable nor biased. In general, care must be taken in the distributed case to avoid \u201c[**front-running**](https://en.wikipedia.org/wiki/Front_running)\u201d: if someone can race the distributed system as soon as the random value is public and get their own transaction in just after the random value became public, it might have pretty severe consequences for the system. Therefore, if the public randomness is used to designate a winner, or if there is any potential gain from knowing it before others, we recommend relying on a \u201clocking period\u201d just before public release of the random beacon where you stop accepting new submissions, in order to avoid [**MEV attacks**](https://ethereum.org/en/developers/docs/mev/#effects-of-mev-the-bad) and front-running.\\n- **drand and the League of Entropy are running a network of nodes providing public, verifiable, distributed randomness** with 100% uptime since its launch in 2020! You can access it freely using our HTTP endpoints:\\n    - [**https://api.drand.sh/public/latest**](https://api.drand.sh/public/latest)\\n    - [**https://api.drand.sh/info**](https://api.drand.sh/info)\\n    - or Cloudflare\u2019s endpoints:\\n        - [**https://mainnet1-api.drand.cloudflare.com/health**](https://mainnet1-api.drand.cloudflare.com/health)\\n        - [**https://mainnet2-api.drand.cloudflare.com/public/1981367**](https://mainnet2-api.drand.cloudflare.com/public/1981367)\\n\\nJust don\u2019t forget to verify the randomness and don\u2019t use it to produce secret keys!\\n\\n![https://drand.love/assets/img/northsec-presentation-03.jpg](/img/northsec-presentation-03.jpg)\\n\\n## \u2753 **Q&A**\\n\\nWhile we had many interesting questions during the cryptography session panel, here is a selection of questions worth sharing further, along with some answers:\\n\\n- **Q: How is drand and the LoE handling malicious takeover by new nodes?**\\n\\n**A:**\xa0This is mostly a governance question: we are not accepting any random node on the network, new nodes and organizations joining the network need to be \u201cvetted\u201d by the other members. There is no technical countermeasure to this kind of takeover.\\n\\n- **Q: How many rounds per second or per minute can drand generate? What\u2019s the \u201cbandwidth\u201d of the produced randomness?**\\n\\n**A:**\xa0The current mainnet is emitting one round every 30 seconds, and we are testing on our testnet a new, faster network producing a round every 3 seconds. Each round contains 256 bits of \u201crandomness\u201d.\\n\\n- **Q: How can an organization join the League of Entropy and run a drand node?**\\n\\n**A:**\xa0Just [**head to our webpage**](https://drand.love/) and fill the form at the bottom! The LoE will then discuss the application and if there are no blockers, we\u2019ll get in touch with you, help you setup your node and join our testnet. This is a pre-cautionary, short testing period to make sure everything works fine, after which your node can join the mainnet network! There\u2019s almost no paperwork, and it\u2019s a fairly straightforward process.\\n\\n- **Q: How does Time lock encryption work?**\\n\\n**A:**\xa0Stay tuned, we\u2019ll release the details, along with a blog post and a paper, and hopefully a conference talk later this year!\\n\\n- **Q: How about using division and multiplication (r / max * range) instead of using modulo (r % range) to sample a random value in a given range in an unbiased way?**\\n\\n**A:**\xa0This is not a good solution either, as relying on floating point arithmetic also introduces bias, although not necessarily in the same places as a modulo bias. You can find more about the biases of floating point techniques in [**this blog post**](https://www.pcg-random.org/posts/bounded-rands.html#fp-multiply-biased). The real solution to sample an unbiased random value is to [**rely on rejection sampling**](https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/#:~:text=The%20most%20common%20way:%20rejection%20sampling):\\n\\n```jsx\\n1. sample a random r\\n2. check is r < range (alternatively any multiple of range closest to max)\\n    - if yes: return r (or r % range is the check was done against a multiple of range)\\n    - if no: go back to step 1\\n```\\n\\n![https://drand.love/assets/img/biased-randomness.jpeg](/img/biased-randomness.jpeg)\\n\\n## \ud83e\udd47 **Bonus: A Solution to one of the CTF Challenges**\\n\\nDid I mention the Capture The Flag (CTF) session even featured a challenge centered around randomness this year? We solved it together with [**FrenchYeti**](http://twitter.com/frenchYeti), who confessed he hadn\u2019t written Java in years despite working on Android reverse engineering for a living! Here\u2019s how we did it.\\n\\nThe challenge was just a simple webpage with a login form and a basic password-reset functionality relying on UUID version 4 to produce its password-reset URLs. We could query a password-reset URL for any user, including the admin account, but sadly the admin\u2019s URL was sent to them by email, whereas our own user\u2019s password-reset URL was just displayed on the webpage when we queried it.\\n\\nUUID stands for \u201cUniversal Unique Identifiers\u201d and there are 128-bit values used to uniquely identify objects or entities on the internet. They typically look like this: acb44130-856e-499f-b56e-bfce45dd1ae9.\\n\\n\u201cVersion 4\u201d means that the UUID is **generated using random numbers**, and since we had access to the code running on the server side, we could see that the random generator used to generate these UUID was simply Java\u2019s very own Random. Sadly, or luckily for us, Java\u2019s Random is a so-called [**LCG**](https://en.wikipedia.org/wiki/Linear_congruential_generator), which stands for \u201clinear congruential generator\u201d and yes, it\u2019s linear and totally insecure! So if you know its seed or can look at as few as two random values it generated, you can predict all of its output!\\n\\nNext we needed to figure out how these UUID type 4 where generated, and thankfully, since they have 128 bits of entropy, they are just generated by [**calling the RNG `getLong` twice**](https://github.com/cowtowncoder/java-uuid-generator/blob/a28b65dc2d862e6aa3ac7b16584d0e9eb8dd8ff9/src/main/java/com/fasterxml/uuid/impl/RandomBasedGenerator.java#L89-L93):\\n\\n```jsx\\n@Override\\n    public UUID generate()\\n    {\\n        /* 14-Oct-2010, tatu: Surprisingly, variant for reading byte array is\\n         *   tad faster for SecureRandom... so let\'s use that then\\n         */\\n        long r1, r2;\\n\\n        if (_secureRandom) {\\n            final byte[] buffer = new byte[16];\\n            _random.nextBytes(buffer);\\n            r1 = _toLong(buffer, 0);\\n            r2 = _toLong(buffer, 1);\\n        } else {\\n            r1 = _random.nextLong();\\n            r2 = _random.nextLong();\\n        }\\n        return UUIDUtil.constructUUID(UUIDType.RANDOM_BASED, r1, r2);\\n    }\\n```\\n\\nSo, it meant we just needed a single UUID in order to recover Java\u2019s Random seed and predict the next UUID it would generate!\\n\\nThere is a bit of extra complication stemming from the fact that the UUID generator is doing [**some bit-fiddling when constructing the UUID**](https://github.com/cowtowncoder/java-uuid-generator/blob/a28b65dc2d862e6aa3ac7b16584d0e9eb8dd8ff9/src/main/java/com/fasterxml/uuid/impl/UUIDUtil.java#L152-L161):\\n\\n```jsx\\npublic static UUID constructUUID(UUIDType type, long l1, long l2)\\n    {\\n        // first, ensure type is ok\\n        l1 &= ~0xF000L; // remove high nibble of 6th byte\\n        l1 |= (long) (type.raw() << 12);\\n        // second, ensure variant is properly set too (8th byte; most-sig byte of second long)\\n        l2 = ((l2 << 2) >>> 2); // remove 2 MSB\\n        l2 |= (2L << 62); // set 2 MSB to \'10\'\\n        return new UUID(l1, l2);\\n    }\\n```\\n\\nNote that there is even some lost information, so we don\u2019t know for sure what the two longs were when we \u201csplit\u201d the UUID into longs again\u2026 But as you can see, the second long is only losing its 2 MSB, but that\u2019s only 4 trials to bruteforce, so it\u2019s fairly easy to \u201cjust try all possibilities\u201d in that case. A further blessing for us is the fact that we actually only need one long to try and attack Java\u2019s Random, because to generate a long, the random generator is called twice to produce integers and combines them together into a long! So, what we need to do is to:\\n\\n- split the UUID into longs,\\n- recover the possible integers from the longs,\\n- try to see if it gives us a seed once reversed,\\n- if so, validate it\u2019s generating the right longs and generate the next UUID, the one that would have gotten sent to the admin email, then reset the admin password and win our flag!\\n\\nWhich we did using the following code ([**adapted from this StackExchange response**](https://stackoverflow.com/a/20183412/2757014)):\\n\\n```jsx\\npublic static int[] splitLong(long l) {\\n        int[] r = new int[2];\\n        r[1] = (int)(l & (0xffffffff));\\n        r[0] = (int)(l >> 32);\\n        return r;\\n    }\\n\\n    public static long getSeed(int i1, int i2) {\\n        final long multiplier = 0x5DEECE66DL;\\n        final long inv_mult = 0xDFE05BCB1365L;\\n        final long increment = 0xBL;\\n        final long mask = ((1L << 48) - 1);\\n\\n        long suffix = 0L;\\n        long lastSeed;\\n        long currSeed;\\n        int lastInt;\\n\\n        for (long i=0; i < (1<<16); i++) {\\n            suffix = i;\\n            currSeed = ((long)i2 << 16) | suffix;\\n            lastSeed = ((currSeed - increment) * inv_mult) & mask;\\n            lastInt = (int)(lastSeed >>> 16);\\n\\n            if (lastInt == i1) {\\n                currSeed = lastSeed;\\n                lastSeed = ((currSeed - increment) * inv_mult) & mask;\\n                System.out.println(\\" Seed found: \\" + (lastSeed ^ multiplier) );\\n                return  lastSeed ^ multiplier;\\n            }\\n        }\\n\\n        System.out.println(\\"current seed not found\\");\\n        return 0;\\n    }\\n\\n    public static long[] splitUID(UUID uuid){\\n\\n        long l1 = uuid.getMostSignificantBits();\\n        long l2 = uuid.getLeastSignificantBits();\\n\\n        long[] ret =  new long[4];\\n        ret[0] = l2 | (3L << 62);\\n        ret[1] = l2 | (2L << 62);\\n        ret[2] = l2 | (1L << 62);\\n        ret[3] = l2;\\n\\n        return  ret;\\n    }\\n\\n    public static void main(String[] args) {\\n        System.out.println(\\"Starting\\");\\n\\n        Random random;\\n\\t\\t\\t\\t\\t// using the UUID we got from our own password reset request:\\n        UUID uuid = UUID.fromString(\\"7e7c8bd5-1ba9-4419-aea9-8e7f3f3dfe7b\\");\\n\\n        long[] parts = splitUID(uuid);\\n        int[] pp;\\n        long seed4, r2;\\n        for(int i=0; i<4 ; i++){\\n            pp = App.splitLong(parts[i]);\\n            seed4 = App.getSeed( pp[0], pp[1]);\\n            // Test it now:\\n            random = new Random(seed4);\\n            r2 = random.nextLong();\\n            System.out.println(parts[i]+\\": \\"+r2);\\n            // Get the next token\\n            uuid = App.getToken(random);\\n            System.out.println(parts[i]+\\": \\"+uuid.toString());\\n        }\\n    }\\n```\\n\\nWhich gave us the following output:\\n\\n```jsx\\nStarting\\ncurrent seed not found\\n-1249310744445583749: -4962768465676381896\\n-1249310744445583749: 3d93cb79-9b39-40be-a32d-c9f64f1df03a\\n Seed found: 30426537520105\\n-5860996762872971653: -5860996762872971653\\n-5860996762872971653: 6abec385-18e8-4422-9d90-cc2c2e54dc3b\\ncurrent seed not found\\n-1249310744445583749: -4962768465676381896\\n-1249310744445583749: 3d93cb79-9b39-40be-a32d-c9f64f1df03a\\n Seed found: 30426537520105\\n-5860996762872971653: -5860996762872971653\\n-5860996762872971653: 6abec385-18e8-4422-9d90-cc2c2e54dc3b\\n```\\n\\nAnd allowed us to reset the admin password using this newly generated UUID and win an extra CTF flag for our team!\\n\\n---"},{"id":"storswift-joins-the-league-of-entropy","metadata":{"permalink":"/blog/storswift-joins-the-league-of-entropy","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2022-03-29-storswift-joins-the-league-of-entropy.md","source":"@site/blog/2022-03-29-storswift-joins-the-league-of-entropy.md","title":"StorSwift joins the League of Entropy!","description":"\\"StorSwift becomes the newest member of the League of Entropy. We\'ve asked them why they\'re motivated by drand and decided to contribute - check what they said!\\"","date":"2022-03-29T00:00:00.000Z","tags":[{"inline":false,"label":"League-of-Entropy","permalink":"/blog/tags/League-of_entropy","description":"league of entropy tag"},{"inline":false,"label":"New-Members","permalink":"/blog/tags/new-members","description":"new members tag"},{"inline":false,"label":"News","permalink":"/blog/tags/news","description":"news tag"}],"readingTime":1.3366666666666667,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"storswift-joins-the-league-of-entropy","title":"StorSwift joins the League of Entropy!","authors":["yolan"],"tags":["league-of-entropy","new-members","news"],"date":"2022-03-29T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"drand @ NorthSec","permalink":"/blog/drand-at-northsec"},"nextItem":{"title":"Multi-Frequency Support & Timelock Encryption are coming to drand!","permalink":"/blog/multi-frequency-support-and-timelock-encryption-are-coming-to-drand"}},"content":"*\\"StorSwift becomes the newest member of the League of Entropy. We\'ve asked them why they\'re motivated by drand and decided to contribute - check what they said!\\"*\\n\\n\x3c!-- truncate --\x3e\\n\\n![StorSwiftLogo.png](/img/StorSwiftLogo.png)\\n\\nWe are excited to announce that [**StorSwift**](https://storswift.com/), a China-based cloud computing and storage services company, is joining forces with the [**League of Entropy**](https://leagueofentropy.com/) (LoE)! StorSwift is becoming the 15th member to join the LoE and the first partner joining from China - a significant milestone for the LoE!\\n\\nStorSwift has already deployed various workload-scalable enterprise storage systems in video surveillance, HPC, and AI industries and provides support for the many platforms in operation. Based on their extensive experience with large-scale infrastructure projects, StorSwift has recently focused on improving infrastructure management and security techniques for Web3.0 computing platforms - all of which make StorSwift a great addition to the LoE! Welcome!\\n\\nWe\'ve asked StorSwift some key questions that we\'ve previously asked other LoE members - see [**here**](/blog/the-value-of-drand-part-1-of-2) and [**here**](/blog/the-value-of-drand-part-2-of-2) - on the value of drand. Here are the answers.\\n\\n---\\n\\n**In your opinion, why is drand important as a protocol for the next generation of the Internet?**\\n\\n- The drand protocol elegantly provides a truly decentralized robust solution to the random numbers quality problem, which indeed is fundamental for secure computer systems.\\n\\n---\\n\\n**Why did you decide to join the League of Entropy? What value do you see in drand that is important for your mission (what convinced you to join)?**\\n\\n- StorSwift is a technology company focused on distributed computing and storage providing. We are also actively participating in the Web3.0 ecosystem development and we are very proud to be a member of League of Entropy!\\n\\n---\\n\\n**Where would you like to see drand in 2 years from now?**\\n\\n- The growing LoE community is key for robust and fast randomness delivery. We believe that the current and future potential of drand features will be very attractive for all Web3.0 developers and the wider community.\\n\\n---\\n\\n*The League of Entropy evaluates, votes on, and onboards new members quarterly. If you want to be a part of the first production-grade distributed randomness beacon and help provide publicly verifiable randomness as a service, contact us at [leagueofentropy@googlegroups.com](mailto:leagueofentropy@googlegroups.com). We are looking for enthusiastic teams with experience running secure production services who are interested in operating drand nodes and relays. We also encourage you to check out the drand GitHub repository for details.*\\n\\n---"},{"id":"multi-frequency-support-and-timelock-encryption-are-coming-to-drand","metadata":{"permalink":"/blog/multi-frequency-support-and-timelock-encryption-are-coming-to-drand","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2022-02-20-multi-frequency-support-timelock-encryption.mdx","source":"@site/blog/2022-02-20-multi-frequency-support-timelock-encryption.mdx","title":"Multi-Frequency Support & Timelock Encryption are coming to drand!","description":"The drand team has been hard at work the last couple of months to develop and integrate new and extremely valuable features into the drand codebase! We have worked together with Zondax, a research and software development company, and we are extremely excited to announce the completion of a very important project for the future of drand. The project focused on two important features that have the potential to unlock new capabilities for the drand randomness service, enable new application scenarios and make drand able to support many more applications and platforms.","date":"2022-02-20T00:00:00.000Z","tags":[{"inline":false,"label":"Features","permalink":"/blog/tags/features","description":"begginer tag"}],"readingTime":3.8933333333333335,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"multi-frequency-support-and-timelock-encryption-are-coming-to-drand","title":"Multi-Frequency Support & Timelock Encryption are coming to drand!","authors":["yolan"],"tags":["features"],"date":"2022-02-20T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"StorSwift joins the League of Entropy!","permalink":"/blog/storswift-joins-the-league-of-entropy"},"nextItem":{"title":"The Value of drand (Part 2 of 2)","permalink":"/blog/the-value-of-drand-part-2-of-2"}},"content":"The drand team has been hard at work the last couple of months to develop and integrate new and extremely valuable features into the drand codebase! We have worked together with [**Zondax**](https://zondax.ch/), a research and software development company, and we are extremely excited to announce the completion of a very important project for the future of drand. The project focused on two important features that have the potential to unlock new capabilities for the drand randomness service, enable new application scenarios and make drand able to support many more applications and platforms.\\n\\n{/* truncate */}\\n\\nIn summary, the new features include:\\n\\n- **Unchained Randomness**: Each randomness beacon in drand has so far been linked to the previous one, forming a chain of beacons. With this update, each beacon is now independent of (all) the previous one(s).\\n- **Multi-protocol Support**: Drand is now able to support multiple protocols running on the same physical node and the same binary. In other words, a node can now participate in multiple drand networks, each of which having different characteristics. These characteristics can be different frequency of emitting randomness, different thresholds, different participants or having randomness in chained or unchained mode.\\n\\n*We have compiled a comprehensive list of 26 Q&A in this [**FAQ document**](https://docs.google.com/document/d/16QJG3Z-Kr0mN6snQz8cm0NnMXpYBpelKyvCf2oo1Zgc/edit?usp=sharing). Below we provide a base summary of the new features and we encourage you to refer to the document for further details.*\\n\\n## \u26d3\ufe0f **Unchained Randomness & Timed Encryption** \ud83d\udd10\\n\\n### **What is this?**\\n\\nAccording to the original drand design and implementation, every new beacon is linked to the previous one, i.e., simplistically, every new beacon includes a link to the previous beacon, used to derive the new randomness. This creates a chain of randomness beacons from the current one to the genesis beacon, when the drand network was launched. With this upgrade, we provide the option of each beacon becoming independent of the previous one, or, in other words, randomness can be \u201cunchained\u201d. A new drand network can still run in \u201cchained\u201d mode, although we recommend using the \u201cunchained\u201d randomness version.\\n\\n![https://drand.love/assets/img/chained.e448fb8e.jpg](/img/chained.e448fb8e.jpg)\\n\\n![https://drand.love/assets/img/unchained.726b44f8.jpg](/img/unchained.726b44f8.jpg)\\n\\n### **What does it enable?**\\n\\nAlthough chained randomness provides some nice properties, having each beacon independent of the previous one presents a lot of potential for some applications: drand consumers can now enable timelock encryption in their applications, which means that they can securely encrypt a message for a specific round in the future, which can then be decrypted by anyone with the corresponding randomness. This is a very important feature which can mitigate front-running attacks in Decentralized Exchanges, and oracle platforms, as well as enabling sealed bid auctions.\\n\\n### **How does it work?**\\n\\nBoth randomness generation and consumption procedures remain the same as previously. All members of a drand network, e.g., the LoE, need to contribute their part in order for Threshold Cryptography to work. As with the Multi-Frequency support feature, no security property of the protocol is compromised.\\n\\nWe will deliver this API in the coming months but we provide a sneak peek at how it can look like:\\n\\nFirst, a client encrypts a message towards a round in the future.\\n\\n```jsx\\nciphertext := client.EncryptToRound(msg, round)\\n```\\n\\nThen, once the associated randomness is created,\xa0*anybody*\xa0can decrypt the message:\\n\\n```jsx\\n// get the randomness associated with the round\\n\\nrandom := client.Randomness(round)\\n\\nmessage := client.Decrypt(ciphertext,random)\\n```\\n\\nWith this feature, drand has the potential to solve problems that remain unsolved in the Web3.0 space, such as front-running attacks, and puts drand ahead of the competition!\\n\\n## **Multi-Frequency & Multi-Protocol Support**\\n\\n### **What is this?**\\n\\nDrand is producing randomness every 30 seconds, by default, and this is how it has been programmed to operate ever since the network\u2019s launch in August 2020 and up to the present day. However, several applications operate at higher frequencies (and quite likely some others at lower frequencies). We have heard the requests from our ecosystem of users and have worked hard to refactor the codebase and make drand capable of using different randomness schemes and/or frequencies.\\n\\n### **What does it enable?**\\n\\nMulti-protocol support enables a single set of participants to generate multiple randomness beacons of different kinds and at different frequencies. For example, you could think of the LoE-operated network generating randomness at 3s as well as generating post quantum randomness every minute.\\n\\nThe full details of how the refactored protocol works will be made available in our documentation (once the features land in production), but, roughly, it works as follows.\\n\\nIn the next mainnet upgrade, LoE partners will start running a new protocol to generate\xa0*unchained*\xa0randomness at a higher frequency. The current protocol (chained randomness every 30s) will stay in place for the short term. The new base frequency is still to be determined, but let\u2019s assume it is set to 3 seconds. Applications will now be able to consume randomness at any interval that is a multiple of the base frequency. So, for instance, Filecoin, which needs to consume randomness every 30 seconds, will be picking a beacon every 10th randomness generation event (once it starts following the new network). The case would be similar for an application that needs to consume randomness every, say, 6 seconds: the application would pick every other beacon generated by drand.\\n\\nIt is worth noting that all of the properties already natively integrated in drand, that is, verifiability, unpredictability and non-biasability, are kept intact with no compromise being made on the security properties of drand.\\n\\n### **How does it work?**\\n\\nWith the updated setup different frequencies (realized as routines) are generated and live within the same process as separate protocols, although each protocol is completely isolated from each other. Applications that wish to consume randomness at some particular frequency can form a separate network. Nodes that join each network participate in randomness generation and propagation between them and make use of the corresponding protocol.\\n\\n![https://drand.love/assets/img/multi-frequency-diagram.cad03494.jpg](/img/multi-frequency-diagram.avif)\\n\\nMore generally, each new frequency runs as a separate protocol. The new protocol can also choose between chained and unchained randomness. So, for instance, if we assume that the main drand network (the one operated by the LoE) runs at some specific frequency in unchained randomness mode, one can set up a new network with a different frequency and chained randomness.\\n\\nIt has to be highlighted that not all members of a drand network, e.g., the League of Entropy (LoE), have to participate in all frequency networks, but instead, networks can form with a subset of nodes.\\n\\nThis is another hugely valuable addition to drand\u2019s features that make the service suitable for a large variety of applications and will expand drand\u2019s customer base.\\n\\nThe updates have not been integrated into a release yet, but they\u2019re both expected to land in the coming quarter. We hope that you\u2019re as excited about these features as we are and we will be more than happy to discuss the needs of your particular application in order to take advantage of them. Feel free to reach out to us at:\xa0[**leagueofentropy@googlegroups.com**](mailto:leagueofentropy@googlegroups.com), or through [drand\u2019s website](https://drand.love). You can always follow developments in the public [GitHub repository](https://github.com/drand/drand/).\\n\\n---"},{"id":"the-value-of-drand-part-2-of-2","metadata":{"permalink":"/blog/the-value-of-drand-part-2-of-2","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2021-10-27-the-value-of-drand-part-2-of-2.md","source":"@site/blog/2021-10-27-the-value-of-drand-part-2-of-2.md","title":"The Value of drand (Part 2 of 2)","description":"This blog post covers the second set of responses we received from League of Entropy members on our question: \u201cWhat\u2019s the value of drand for your organization and why do you support it\u201d? We hope you enjoyed the first part as much as we did.","date":"2021-10-27T00:00:00.000Z","tags":[{"inline":false,"label":"League-of-Entropy","permalink":"/blog/tags/League-of_entropy","description":"league of entropy tag"}],"readingTime":4.693333333333333,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"the-value-of-drand-part-2-of-2","title":"The Value of drand (Part 2 of 2)","authors":["yolan"],"tags":["league-of-entropy"],"date":"2021-10-27T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Multi-Frequency Support & Timelock Encryption are coming to drand!","permalink":"/blog/multi-frequency-support-and-timelock-encryption-are-coming-to-drand"},"nextItem":{"title":"Discover The Value of drand (Part 1 of 2)","permalink":"/blog/the-value-of-drand-part-1-of-2"}},"content":"*This blog post covers the second set of responses we received from League of Entropy members on our question: \u201cWhat\u2019s the value of drand for your organization and why do you support it\u201d? We hope you enjoyed [**the first part**](/blog/the-value-of-drand-part-1-of-2) as much as we did.*\\n\\n\x3c!-- truncate --\x3e\\n\\n*As a reminder, [The League of Entropy][LOE] (LoE) is a consortium of independent, and diverse organizations that partner together to operate a publicly verifiable, decentralized, bias-resistant, and reliable randomness beacon, called **drand**! The consortium was originally formed in 2019, and is currently supported by 16 member organizations that include: [Cloudflare][CLOUDFLARE], [EPFL Decentralized &amp; Distributed Systems Lab (DeDiS)][DEDIS], [Universidad de Chile][CHILE], [Kudelski Security][KUDELSKI], [Protocol Labs][PROTOCOL], [ChainSafe Systems][CHAINSAFE], [c**\xb7**Labs][CLABS], [EPFL Center for Digital Trust (C4DT)][C4DT], [Emerald Onion][EMERALD], [Ethereum Foundation][EMERALD], [PTisp][PTISP], [Tierion][TIERION], [University College London][UCL], and the [Quantum Resistant Ledger][QUANTUM] Foundation.*\\n\\n---\\n\\n### **\u201cWhy is drand important as a protocol for the next generation of the Internet in your opinion?\u201d**\\n\\n[Universidad de Chile][CHILE]: We think it is important to promote decentralized services on the Internet. Nowadays, a lot of vital services on the Internet are in control of a single entity, who has the capacity to shut it down and control a lot of the communications and processes that occur every single day. Drand comes to establish a new way of providing vital services on the Internet, allowing that several independent organizations share the control and power of a randomness beacon. We are currently running a centralized beacon, but we think that our collaboration with the drand project is a must-do for our organization.\\n\\n[ChainSafe Systems][CHAINSAFE]: We have seen many interesting blockchain applications limited by the availability of reliable, true randomness. Drand presents a novel solution that can enable the next generation of blockchain-based applications.\\n\\n[EPFL Center for Digital Trust (C4DT)][C4DT]: Verifiable randomness greatly simplifies many decentralized protocols. By shifting some trust to Drand, we move to a more stable, better audited and less resource intensive solution for making network-wide choices.\\n\\n[c**\xb7**Labs][CLABS]: Randomness is essential for security in protocols and allows building tools that enable large-scale confidence and fast user experience, down to individuals. Unbiasable, unpredictable and fast randomness even more so, and now that the league of entropy exists, it is safer to claim the public has access to such randomness.\\n\\n[Protocol Labs][PROTOCOL]: Just like many of the protocols that our computers use every day, such as the Domain Name System (DNS) and the Network Time Protocol (NTP), we believe the Internet also needs to have a randomness protocol that is publicly verifiable, bias-resistant and distributed, that is, not controlled by a single organization. Drand ticks all of those boxes!\\n\\n---\\n\\n### **\u201cWhy did you decide to join the League of Entropy? What value do you see in drand that is important for your mission (what convinced you to join)?\u201d**\\n\\n[Universidad de Chile][CHILE]: Because we were (and still are) running a randomness beacon on our own (Random UChile) and we wanted to stay in touch with all the beacons projects around the world. We thought that contributing to a decentralized beacon was a great opportunity to cooperate with other universities and organizations interested in the same subject as we do. We are convinced that randomness beacons must be a foundational part of the Internet; there must exist a lot of beacons with different configurations, algorithms, and geographic footprint around the world. We want to contribute to that idea in the best possible way.\\n\\n[ChainSafe Systems][CHAINSAFE]: We joined LoE primarily because it is used within the Filecoin protocol. As the builders of the secondary implementation of the Filecoin protocol, as well as several user-level applications, we understand the critical nature of drand and are eager to support its development.\\n\\n[EPFL Center for Digital Trust (C4DT)][C4DT]: We support many projects created at EPFL and are historically close to DEDIS. Helping such a publicly funded project take off and see how well it behaves in the wild is important for us.\\n\\n[c**\xb7**Labs][CLABS]: We have been impressed by the quality of drand and the team behind it, and believe that the LoE is capable of creating a secure randomness beacon, and so we\'d like to be a part of it.\\n\\n[Protocol Labs][PROTOCOL]: drand was masterminded by one of PL\u2019s research engineers, Nicolas Gaily, during his time at DEDIS-EPFL. Turning research results to production systems is at the heart of PL\u2019s mission. PL is one of the founding partners of the League of Entropy, as we firmly believe that distributed randomness should be a foundational protocol for the Internet. drand is also a fundamental component of the Filecoin network, which is one of the key projects that PL supports.\\n\\n---\\n\\n### **\u201cHow you use drand in your setup, infrastructure or application?\u201d**\\n\\n[Universidad de Chile][CHILE]: We are not currently using drand in our setup, but we plan to include drand output as a new external source for our own randomness beacon ([**Random UChile**](https://random.uchile.cl/)).\\n\\n[c**\xb7**Labs][CLABS]: We\'ve used drand as the randomness beacon in [**Plumo**](https://medium.com/celoorg/celo-sets-sights-on-becoming-fastest-evm-chain-through-collaboration-with-mysten-labs-e88b426aee83), a SNARK-based ultralight client, and have collaborated with the LoE and have been inspired by the techniques that are used to build randomness beacons, which are an integral part of Celo\'s\\n\\n[Protocol Labs][PROTOCOL]: drand is used in the leader election algorithm of the Filecoin protocol. Having a source of bias-resistant entropy is key to the security of Filecoin and therefore, a healthy and secure drand network is of utmost importance for PL.\\n\\n---\\n\\n### **\u201cWhere would you like to see drand two years from now?\u201d**\\n\\n[Universidad de Chile][CHILE]: We\u2019d like to see drand provide a massively well-known, easy-to-use service on the Internet. It is very important and exciting that drand has left the \u201cacademic-sphere\u201d and now provides a useful application to Internet users.\\n\\n[ChainSafe Systems][CHAINSAFE]: We would like to see the deployments and usage of drand increase dramatically. Simplifying the onboarding process and establishing incentives for participants will lead to more people deploying drand and participating in randomness networks. As distributed applications grow in number, a strong developer community will help onboard new users and expand the impact of drand to more ecosystems.\\n\\n[EPFL Center for Digital Trust (C4DT)][C4DT]: Each new partner increases the general trust of the network, so let\u2019s continue expanding the League of Entropy, and scale it to hundreds of nodes. For the onboarding process, a more streamlined and perhaps more asynchronous protocol would really be an enabler for expanding the LoE network.\\n\\n[c**\xb7**Labs][CLABS]: We hope to see more members join and increase the confidence in the security of the beacon. It will be great to strengthen the resilience of the implementations and have easily accessible tools for consuming and verifying the beacon. We also hope to see it grow to be accepted in important pieces of infrastructure.\\n\\n[Protocol Labs][PROTOCOL]: We are very optimistic about the future of drand! We are eager to welcome more members to the LoE to natively increase the security of the network. We are looking forward to more applications using drand for their protocols and applications. We are working hard to find ways to incentivize the members of the LoE and we welcome ideas from the community. We are integrating many new features in the main drand protocol, such as support for multiple beacons, higher-frequency randomness and time-lock encryption, as also discussed in [drand celebrates One Year as a Randomness Service!](/blog/drand-celebrates-one-year-as-a-randomness-service) These new features will bring drand ahead of the competition, as it will be able to solve pressing problems, such as \u201cfront-running\u201d attacks on decentralized exchanges. Drand is hiring aggressively to increase the capacity of the team and deliver new functionalities faster - come and\xa0**join us**\xa0if you\u2019re passionate about verifiable, unpredictable and bias-resistant randomness!\\n\\nIn short, we are shooting to make drand a foundational protocol for randomness in the Internet, and we are proud of the fact that\xa0[drand celebrates One Year as a Randomness Service!](/blog/drand-celebrates-one-year-as-a-randomness-service), providing more than 1M rounds of randomness!\\n\\n---\\n\\n*[The League of Entropy][LOE] evaluates, votes on, and onboards new members quarterly. If you want to be a part of the first production-grade distributed randomness beacon and help provide publicly verifiable randomness as a service, contact us at leagueofentropy@googlegroups.com. We are looking for enthusiastic teams with experience running secure production services who are interested in operating drand nodes and relays. We also encourage you to check out the\xa0[**drand GitHub repository for details**](https://github.com/drand).*\\n\\n---\\n\\n[LOE]: https://drand.love/1e76674b75e249699445799c5083fe78\\n[CLOUDFLARE]: https://drand.love/12bbcd90be5f4e42af18599f65019e7e\\n[DEDIS]: https://drand.love/e855b8f643d4475aa89a47252e6623d9\\n[CHILE]: https://drand.love/27708a6027104c3ba708e2d8d7508a66\\n[KUDELSKI]: https://drand.love/d800657770494c6cb39cffb5480407a4\\n[PROTOCOL]: https://drand.love/9e18324379574803918146d996c24df5\\n[CHAINSAFE]: https://drand.love/480ac8864a33408dae64fad706c38a8e\\n[CLABS]: https://drand.love/8125559f2fb44804b9e6ca63da70f6b6\\n[C4DT]: https://drand.love/dc94bcdadab64950aa1e6bc96cb1e39a\\n[EMERALD]: https://drand.love/e22d8bdb07ef4198b283d0436bcc9cf4\\n[EMERALD]: https://drand.love/184fc01bc464488c9570eb543d6c386a\\n[PTISP]: https://drand.love/f8fa38c9c36d4b4bbbb40fe785e9ae12\\n[TIERION]: https://drand.love/5b38e1b289f44e9d87498eddb788d38f\\n[UCL]: https://drand.love/af818bec61a542daa950596f01fddf09\\n[QUANTUM]: https://drand.love/b3e60c968098435790c3718f85ed3057"},{"id":"the-value-of-drand-part-1-of-2","metadata":{"permalink":"/blog/the-value-of-drand-part-1-of-2","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2021-09-13-the-value-of-drand-part-1-of-2.md","source":"@site/blog/2021-09-13-the-value-of-drand-part-1-of-2.md","title":"Discover The Value of drand (Part 1 of 2)","description":"\\"We asked the League of Entropy members: \u201cwhat\u2019s the value of drand for you, and why do you support it?\u201d Check out what they said!\\"","date":"2021-09-13T00:00:00.000Z","tags":[{"inline":false,"label":"League-of-Entropy","permalink":"/blog/tags/League-of_entropy","description":"league of entropy tag"}],"readingTime":4.503333333333333,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"the-value-of-drand-part-1-of-2","title":"Discover The Value of drand (Part 1 of 2)","authors":["yolan"],"tags":["league-of-entropy"],"date":"2021-09-13T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"The Value of drand (Part 2 of 2)","permalink":"/blog/the-value-of-drand-part-2-of-2"},"nextItem":{"title":"drand celebrates One Year as a Randomness Service!","permalink":"/blog/drand-celebrates-one-year-as-a-randomness-service"}},"content":"*\\"We asked the League of Entropy members: \u201cwhat\u2019s the value of drand for you, and why do you support it?\u201d Check out what they said!\\"*\\n\\n\x3c!-- truncate --\x3e\\n\\n[The League of Entropy](https://drand.love/1e76674b75e249699445799c5083fe78) (LoE) is a consortium of independent, and diverse organizations that partner together to operate a decentralized, bias-resistant, publicly verifiable, and reliable randomness beacon, called\xa0**drand**! The consortium was originally formed in 2019, and is currently supported by 16 member organizations that includes: [Cloudflare][CLOUDFLARE], [EPFL Decentralized & Distributed Systems Lab (DeDiS)][DEDIS], [Universidad de Chile][CHILE], [Kudelski Security](https://drand.love/d800657770494c6cb39cffb5480407a4), [Protocol Labs][PROTOCOL], [ChainSafe Systems][CHAINSAFE], [c**\xb7**Labs][CLABS], [EPFL Center for Digital Trust (C4DT)][C4DT], [Emerald Onion][EMERALD], [Ethereum Foundation][ETHEREUM], [PTisp][PTISP], [Tierion][TIERION], [University College London][UCL], and [Quantum Resistant Ledger][QUANTUM].\\n\\ndrand recently celebrated 1 year of undisrupted service, and completed 1M+ rounds of randomness (emitted at 30s intervals). You can read more about drand\u2019s recent achievements in our recent\xa0[blog post](/blog/drand-celebrates-one-year-as-a-randomness-service).\\n\\nAs a free, and not-for-profit service, [The League of Entropy](https://drand.love/1e76674b75e249699445799c5083fe78) (LoE) members believe in the value of randomness as a foundational Internet service, and commit resources in order to maintain, and operate the drand network for public use. In order to gain insights into the motivations, and vision for drand shared by the LoE members, we reached out to them with a few questions. In this blog post, we summarize answers shared by five members of the LoE (we will share responses from other members through future blog posts).\\n\\nWe hope you enjoy reading these insights, and come and join the LoE to grow and strengthen the network! The larger the LoE, the stronger the security, and reliability guarantees that drand provides, as any biasing attempt becomes significantly more difficult!\\n\\n---\\n\\n### **\u201cWhy is drand important as a protocol for the next generation of the Internet in your opinion?\u201d**\\n\\n[Cloudflare][CLOUDFLARE]: When the League of Entropy was founded the only available public randomness beacons were provided by individual entities, which require a strong trust model for applications and a potential single point of failure. Drand provides an elegant solution to this problem as a distributed, verifiable randomness beacon, allowing applications to only trust an uncorrupted threshold of parties in the system rather than a single entity. Trusted public randomness has many applications in the modern Internet; for example, it can help to provide auditability of lotteries or transparency in leader election processes.\\n\\n[Kudelski Security][KUDELSKI]: For us, randomness is about fairness. When solutions are fair, they build trust among communities and participants. Public, verifiable randomness is a building block enabling fairness and trust for many protocols and blockchains.\\n\\n[Quantum Resistant Ledger][QUANTUM]: We see decentralization of all aspects of society as crucial to the evolution of a globalized world. Randomness, the hidden component of so many systems, plays a key role in security and trust.\\n\\n[EPFL Decentralized & Distributed Systems Lab (DeDiS)][EPFL]: The quality of the random numbers used in cryptographic systems directly impacts on the security of a system. Randomness plays a key role in establishing secure connections, generating cryptographic key pairs and system\u2019s authentication. As an Internet infrastructure level service, Drand can provide true, verifiable randomness to applications.\\n\\n[Tierion][TIERION]: Security and trust are fundamental to a free and open Internet. Drand helps developers build secure systems that don\u2019t rely on trusted authorities.\\n\\n---\\n\\n### **\u201cWhy did you decide to join the League of Entropy? What value do you see in drand that is important for your mission (what convinced you to join)?\u201d**\\n\\n[Cloudflare][CLOUDFLARE]: Cloudflare is on a mission to help build a better Internet, and that means making it more secure, fast, and reliable for everyone. We see drand and the League of Entropy as foundational Internet infrastructure, and with that we are committed to supporting the project. We aim to be on the forefront of deploying next-generation cryptographic protocols and are excited to support this application of threshold cryptography that solves a real-world problem.\\n\\n[Kudelski Security][KUDELSKI]: We come at this from a bit of a different angle. We are a group of cryptographers who help customers secure their systems. This work involves everything from complex cryptography to public blockchains. In our work, we see lots of customers having a difficult time handling randomness in their applications. This is dangerous because randomness underpins the security of so many cryptographic functions. This makes us obsessed with sources of randomness both public and private.\\n\\n[Quantum Resistant Ledger][QUANTUM]: With a shared vision of decentralization, the aims and objectives of both the QRL Foundation and the League of Entropy are very much aligned. It is important to us that we support innovations at the cutting edge of security.\\n\\n[EPFL Decentralized & Distributed Systems Lab (DeDiS)][EPFL]: Drand was born at our offices. Originally, it was a development by Nicolas Gailly, at that time a PhD student at the DEDIS lab at EPFL, with contributions from Philipp Jovanovic and under the supervision of Bryan Ford.\\n\\nMany protocols need a reliable, unbiased, and publicly-verifiable source of randomness. The DEDIS lab started work on decentralized randomness at Yale. Prof. Ford continued this work when he moved the lab to EPFL in 2015. As part of this mission, the DEDIS lab @ EPFL developed the crypto library Kyber, which provides all the major components to implement an efficient, distributed randomness generation protocol. The DEDIS lab is proud of contributing not just to the foundations, but also to the infrastructure providing public randomness.\\n\\n[Tierion][TIERION]: In 2017 Tierion announced its collaboration with the National Institute of Standards and Technology (NIST) to use the NIST Randomness Beacon to prove a timestamp proof was created between two points in time. Over time, development on the NIST Randomness Beacon slowed down and NIST experienced intermittent reliability issues. We began searching for a replacement and decided drand was by far the best option.\\n\\n---\\n\\n### **\u201cHow you use drand in your setup, infrastructure or application?\u201d**\\n\\n[Tierion][TIERION]: We use drand to prove each\xa0[**Chainpoint proof](https://tierion.com/chainpoint)** was created between two points in time. Every 30 seconds drand publishes a random value which is injected into each Chainpoint Proof. Since drand\u2019s random values can\u2019t be known before they are published, we can assert that each Chainpoint proof was created after the timestamp of the drand value.\\n\\n---\\n\\n### **\u201cWhere would you like to see drand in 2 years from now?\u201d**\\n\\n[Cloudflare][CLOUDFLARE}]: Continue to have more partners join the network with a focus on stability and operational resilience to ultimately strengthen the system, and to see continued growth in client adoption. Cloudflare is proud to be part of this, and we hope to see continued success of the network.\\n\\n[Kudelski Security][KUDELSKI]: Quite simply, our hope is that more projects adopt drand. The more people learn about the project and where it can be used, the better.\\n\\n[Quantum Resistant Ledger][QUANTUM]: First and foremost, we hope the resilience displayed so far continues. Over time, we hope that broadening geographical, and network topology grants ongoing assurance to solutions, projects and ultimately consumers.\\n\\n[EPFL Decentralized & Distributed Systems Lab (DeDiS)][EPFL]: First of all, we would love to see drand scale to thousands of participants by deploying the scalability techniques that we have been studying, e.g. in\xa0[**RandHound and RandHerd**](https://eprint.iacr.org/2016/1067.pdf). Second, we\'d like Drand usage to grow and be leveraged in a fully asynchronous consensus protocol, a path we\'re exploring in our current work on\xa0[**Que Sera Consensus [FIX]**](https://drand.love/blog/2021/09/14/the-value-of-drand/%E2%80%8B%E2%80%8Bhttps://arxiv.org/abs/2003.02291). Finally, we imagine Drand empowering proof of stake, and proof of personhood mechanisms in open member consensus protocols to handle lotteries, committee elections, and similar applications.\\n\\n[Tierion][TIERION]: We\u2019d like to see drand become a dial-tone for randomness that\u2019s reliably available to any application connected to the Internet.\\n\\n---\\n\\n*The League of Entropy evaluates, votes on, and onboards new members quarterly. If you want to be a part of the first production-grade distributed randomness beacon and help provide publicly verifiable randomness as a service, contact us at leagueofentropy@googlegroups.com. We are looking for enthusiastic teams with experience running secure production services who are interested in operating drand nodes and relays. We also encourage you to check out the drand GitHub repository for details.*\\n\\n---\\n\\n[CLOUDFLARE]: https://drand.love/12bbcd90be5f4e42af18599f65019e7e\\n[DEDIS]: https://drand.love/e855b8f643d4475aa89a47252e6623d9\\n[CHILE]: https://drand.love/27708a6027104c3ba708e2d8d7508a66\\n[KUDELSKI]: https://drand.love/d800657770494c6cb39cffb5480407a4\\n[PROTOCOL]: https://drand.love/9e18324379574803918146d996c24df5\\n[CHAINSAFE]: https://drand.love/480ac8864a33408dae64fad706c38a8e\\n[CLABS]: https://drand.love/8125559f2fb44804b9e6ca63da70f6b6\\n[C4DT]: https://drand.love/dc94bcdadab64950aa1e6bc96cb1e39a\\n[EMERALD]: https://drand.love/e22d8bdb07ef4198b283d0436bcc9cf4\\n[EMERALD]: https://drand.love/184fc01bc464488c9570eb543d6c386a\\n[PTISP]: https://drand.love/f8fa38c9c36d4b4bbbb40fe785e9ae12\\n[TIERION]: https://drand.love/5b38e1b289f44e9d87498eddb788d38f\\n[UCL]: https://drand.love/af818bec61a542daa950596f01fddf09\\n[QUANTUM]: https://drand.love/b3e60c968098435790c3718f85ed3057"},{"id":"drand-celebrates-one-year-as-a-randomness-service","metadata":{"permalink":"/blog/drand-celebrates-one-year-as-a-randomness-service","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2021-08-09-drand-celebrates-one-year-as-a-randomness-service.mdx","source":"@site/blog/2021-08-09-drand-celebrates-one-year-as-a-randomness-service.mdx","title":"drand celebrates One Year as a Randomness Service!","description":"drand, the distributed randomness beacon that aims to serve as a foundational randomness service for the Internet, surpassed 1M rounds on July 7, 2021! The drand mainnet was launched in July 2020 and received a significant update on August 10, 2020. This update included a number of key features, such as its 3-layer network architecture, client implementations in Go, and JavaScript,\xa0round to timestamp\xa0guarantees, deployment monitoring, and\xa0many other improvements.","date":"2021-08-09T00:00:00.000Z","tags":[{"inline":false,"label":"Anniversary","permalink":"/blog/tags/anniversary","description":"anniversary tag"},{"inline":false,"label":"Jobs","permalink":"/blog/tags/jobs","description":"jobs tag"},{"inline":false,"label":"Updates","permalink":"/blog/tags/updates","description":"updates tag"}],"readingTime":1.8933333333333333,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"drand-celebrates-one-year-as-a-randomness-service","title":"drand celebrates One Year as a Randomness Service!","authors":["yolan"],"tags":["anniversary","jobs","updates"],"date":"2021-08-09T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Discover The Value of drand (Part 1 of 2)","permalink":"/blog/the-value-of-drand-part-1-of-2"},"nextItem":{"title":"The League of Entrophy welcomes Quantum Resistant Ledger (QRL)","permalink":"/blog/the-league-of-entrophy-welcomes-quantum-resistant-ledger"}},"content":"drand, the distributed randomness beacon that aims to serve as a foundational randomness service for the Internet, surpassed 1M rounds on July 7, 2021! The drand mainnet was launched in July 2020 and received a significant update on August 10, 2020. This update included a number of key features, such as its 3-layer network architecture, client implementations in Go, and JavaScript,\xa0*round to timestamp*\xa0guarantees, deployment monitoring, and\xa0many other improvements.\\n\\n{/* truncate */}\\n\\nWe have two reasons to celebrate today:\\n\\n- drand is celebrating its first anniversary since the launch of a significant upgrade to the mainnet on August 10, 2020, that enabled it to be used as a production-grade network! Drand has served as critical off-chain infrastructure for\xa0[Filecoin](https://filecoin.io/)\xa0(the world\u2019s largest decentralized storage network) since its mainnet launch in Oct 2020 and several other projects in Web3 and beyond.\\n- drand has been running smoothly without disruptions since its launch in July 2020 and recently completed 1M rounds - a significant milestone for this distributed randomness service for Web3 and the Internet at large! We would like to congratulate [](https://drand.love/89fecb56737044e5bdfbbb3f6864a422) for achieving this milestone, and thank them for operating a reliable randomness service for the Internet ([The League of Entropy](https://drand.love/1e76674b75e249699445799c5083fe78) is a collection of independent randomness beacon providers who work together to produce collective, publicly verifiable, unbiased, and unpredictable random values at fixed intervals).\\n\\nThere are also several reasons that\xa0*you*\xa0should be excited about the future of drand, which include:\\n\\n- An exciting roadmap of new capabilities planned such as:\\n    - *Time-lock-encryption*\xa0for mitigating threats related to Maximal Extractable Value (also referred to as MEV on Ethereum or\xa0*front running*, in DeFi and traditional financial exchanges),\\n    - Availability of a higher frequency randomness beacon, running in parallel to the current 30-second beacon. This update will enable drand to be leveraged by a broader set of use cases across Web2 and Web3.\\n    - Expanding the global distribution network operated by a growing number of Drand partners as part of the League of Entropy.\\n    - New collaborations with projects in Web3 and DeFi that aim to enable applications across multiple ecosystems to leverage drand as a reliable and trustworthy source of randomness in a convenient, and effective manner.\\n- The drand team has a new Project Lead, who will focus on driving future development and growth of drand in collaboration with the League of Entropy.\\n- Drand is hiring! The team is looking for top talent to join our efforts to establish drand as the default random value generator for the Internet. Open positions include Senior Software Engineer in Distributed Systems, and Infrastructure Engineer.\xa0[Take a look at our open roles](https://jobs.lever.co/protocol?team=Engineering).\\n\\n> *Filecoin is a decentralized storage network that relies on drand as an off-chain source of randomness, and has benefited greatly from having a reliable, performant, and trustworthy randomness service that itself is decentralized. Using drand has reduced the complexity involved in building, and operating large scale Layer 1 blockchain protocols such as Filecoin.* -\xa0Molly Mackinlay, Filecoin & IPFS Project Lead at\xa0Protocol Labs\\n>\\n\\nStay tuned for more exciting updates!\\n\\nOnwards to 2M rounds, and beyond!\\n\\n---\\n\\nThe League of Entropy evaluates, votes on, and onboards new members quarterly. If you want to be a part of the first production-grade distributed randomness beacon and help provide publicly verifiable randomness as a service, contact us at\xa0[leagueofentropy@googlegroups.com](mailto:leagueofentropy@googlegroups.com). We are looking for enthusiastic teams with experience running secure production services who are interested in\xa0operating a drand node.\\n\\n---"},{"id":"the-league-of-entrophy-welcomes-quantum-resistant-ledger","metadata":{"permalink":"/blog/the-league-of-entrophy-welcomes-quantum-resistant-ledger","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2021-01-11-the-league-of-entropy-welcomes-quantum-resistant-ledger-qrl.mdx","source":"@site/blog/2021-01-11-the-league-of-entropy-welcomes-quantum-resistant-ledger-qrl.mdx","title":"The League of Entrophy welcomes Quantum Resistant Ledger (QRL)","description":"On Wednesday, December 16, 2020, The League of Entropy, running an upgraded version of drand, proudly welcomed The Quantum Resistant Ledger (QRL) to its list of esteemed members. QRL is an enterprise-grade blockchain platform that is secure from the quantum computing advances of tomorrow, as verified by external audits. The QRL Foundation, a not-for-profit organization, supports the research and development of open-source post-quantum blockchain solutions.","date":"2021-01-11T00:00:00.000Z","tags":[{"inline":false,"label":"League-of-Entropy","permalink":"/blog/tags/League-of_entropy","description":"league of entropy tag"},{"inline":false,"label":"New-Members","permalink":"/blog/tags/new-members","description":"new members tag"},{"inline":false,"label":"News","permalink":"/blog/tags/news","description":"news tag"}],"readingTime":0.39,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"the-league-of-entrophy-welcomes-quantum-resistant-ledger","title":"The League of Entrophy welcomes Quantum Resistant Ledger (QRL)","authors":["yolan"],"tags":["league-of-entropy","new-members","news"],"date":"2021-01-11T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"drand celebrates One Year as a Randomness Service!","permalink":"/blog/drand-celebrates-one-year-as-a-randomness-service"},"nextItem":{"title":"Join the Randomness Revolution: Drand is hiring!","permalink":"/blog/join-th-randomness-revolution-drand-is-hiring"}},"content":"On Wednesday, December 16, 2020, The League of Entropy, running an [upgraded version of drand](https://github.com/drand/drand/releases/tag/v1.2.5), proudly welcomed The [Quantum Resistant Ledger][QUANTUM] (QRL) to its list of esteemed members. QRL is an enterprise-grade blockchain platform that is secure from the quantum computing advances of tomorrow, as verified by external audits. The [QRL Foundation](https://qrl.foundation/), a not-for-profit organization, supports the research and development of open-source post-quantum blockchain solutions.\\n\\n{/* truncate */}\\n\\nThe League of Entropy evaluates, votes on, and onboards new members quarterly. If you have experience running secure production services and are interested in operating a drand node, we\u2019d love to hear from you. Contact us at [leagueofentropy@googlegroups.com](mailto:leagueofentropy@googlegroups.com).\\n\\nJoin us and be a part of the randomness revolution!\\n\\n---"},{"id":"join-th-randomness-revolution-drand-is-hiring","metadata":{"permalink":"/blog/join-th-randomness-revolution-drand-is-hiring","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2020-08-27-join-the-randomness-revolution-drand-is-hiring.mdx","source":"@site/blog/2020-08-27-join-the-randomness-revolution-drand-is-hiring.mdx","title":"Join the Randomness Revolution: Drand is hiring!","description":"Are you passionate about randomness, dependable public services, and collaborative endeavors? Protocol Labs is on the lookout for talented individuals to join the drand team. If you thrive in innovative environments and want to shape the future of decentralized randomness, check out these exciting opportunities:","date":"2020-08-27T00:00:00.000Z","tags":[{"inline":false,"label":"League-of-Entropy","permalink":"/blog/tags/League-of_entropy","description":"league of entropy tag"},{"inline":false,"label":"News","permalink":"/blog/tags/news","description":"news tag"}],"readingTime":0.45666666666666667,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"join-th-randomness-revolution-drand-is-hiring","title":"Join the Randomness Revolution: Drand is hiring!","authors":["yolan"],"tags":["league-of-entropy","news"],"date":"2020-08-27T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"The League of Entrophy welcomes Quantum Resistant Ledger (QRL)","permalink":"/blog/the-league-of-entrophy-welcomes-quantum-resistant-ledger"},"nextItem":{"title":"drand v1.0 and the League of Entropy: Two Weeks In","permalink":"/blog/drand-v1.0-and-the-league-of-entropy-two-weeks-in"}},"content":"Are you passionate about randomness, dependable public services, and collaborative endeavors? Protocol Labs is on the lookout for talented individuals to join the drand team. If you thrive in innovative environments and want to shape the future of decentralized randomness, check out these exciting opportunities:\\n\\n{/* truncate */}\\n\\n- **Project Operator**: Drive the future growth and development of drand, working closely with the League of Entropy. This role is perfect for someone with a strategic mindset and a knack for fostering collaborative initiatives.\\n- **Infrastructure Engineer**: Take charge of maintaining and deploying Protocol Labs\' drand infrastructure. Provide support and guidance to other League of Entropy members, ensuring the robustness and reliability of our network.\\n\\nApply today and be a part of the randomness revolution. Together, we can make the internet a more secure and trustworthy place.\\n\\n---"},{"id":"drand-v1.0-and-the-league-of-entropy-two-weeks-in","metadata":{"permalink":"/blog/drand-v1.0-and-the-league-of-entropy-two-weeks-in","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2020-08-24-drand-v1-0-two-weeks-in.md","source":"@site/blog/2020-08-24-drand-v1-0-two-weeks-in.md","title":"drand v1.0 and the League of Entropy: Two Weeks In","description":"Two weeks ago, we announced the launch of drand v1.0, the League of Entropy production-level service, and this very website. Here is a roundup of related blog posts and news items from around the web:","date":"2020-08-24T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/blog/tags/release","description":"release tag"},{"inline":false,"label":"Major","permalink":"/blog/tags/major","description":"major tag"},{"inline":false,"label":"League-of-Entropy","permalink":"/blog/tags/League-of_entropy","description":"league of entropy tag"}],"readingTime":0.71,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"drand-v1.0-and-the-league-of-entropy-two-weeks-in","title":"drand v1.0 and the League of Entropy: Two Weeks In","authors":["yolan"],"tags":["release","major","league-of-entropy"],"date":"2020-08-24T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Join the Randomness Revolution: Drand is hiring!","permalink":"/blog/join-th-randomness-revolution-drand-is-hiring"},"nextItem":{"title":"The League of Entropy launches drand v1.0 to become the Internet\u2019s first production-grade, publicly verifiable, randomness beacon!","permalink":"/blog/the-league-of-entropy-launches-drand"}},"content":"Two weeks ago, we announced the launch of drand v1.0, the League of Entropy production-level service, and this very website. Here is a roundup of related blog posts and news items from around the web:\\n\\n\x3c!-- truncate --\x3e\\n\\n- [The League of Entropy launches drand v1.0 to become the Internet\u2019s first production-grade, publicly verifiable randomness beacon!](/blog/the-league-of-entropy-launches-drand), drand, Aug 10\\n- [The League of Entropy Launches Production Drand Network, Providing the First Publicly Verifiable Distributed Randomness Beacon](https://www.notion.so/League-of-Entropy-Launches-Production-drand-Network-dfc17d24f35d4558b6fd909276d573c1?pvs=21), League of Entropy press release, Aug 10 (picked up by\xa0[Yahoo! Finance](https://finance.yahoo.com/news/league-entropy-launches-production-drand-140000595.html)\xa0and others)\\n- [How a Decentralized Randomness Beacon Could Boost Cryptographic Security](https://www.notion.so/How-a-Decentralized-Randomness-Beacon-Could-Boost-Cryptographic-Security-c880532146ff464eb953d388292b126e?pvs=21), CoinDesk, Aug 10\\n- [Tierion Joins the League of Entropy \u2014 Replaces NIST Randomness Beacon with Drand in Chainpoint Proofs](https://www.notion.so/Tierion-joins-LoE-replaces-NIST-Beacon-with-drand-in-Chainpoint-639248133237404cbc0ecf1dc42e598c?pvs=21), Tierion, Aug 10\\n- [Liga de la Entrop\xeda entra en etapa de producci\xf3n.](https://www.clcert.cl/2020/08/11/drand_uchile.html), University of Chile, Aug 11 (in Spanish)\\n- [A PTisp juntou-se \xe0 \u201cLeague of Entropy\u201d](https://blog.ptisp.pt/a-ptisp-juntou-se-league-of-entropy/), PTisp, Aug 11 (in Portuguese)\\n- [Announcing the League of Entropy Mainnet Upgrade](https://protocol.ai/blog/announcing-league-of-entropy-mainnet-upgrade/), Protocol Labs, Aug 12\\n- [Filecoin Features: Distributed Randomness & Leader Elections](https://filecoin.io/blog/distributed-randomness-and-leader-elections/), Filecoin, Aug 12\\n- [drand: um servi\xe7o p\xfablico de n\xfameros aleat\xf3rios](https://pplware.sapo.pt/internet/drand-um-servico-publico-de-numeros-aleatorios/), Pplware, Aug 26 (in Portuguese)\\n\\nIf you missed the\xa0[Randomness Summit](https://randomness2020.com/), stay tuned. We\'ll post individual talk videos soon, or you can watch the full summit now on the event website.\\n\\n---"},{"id":"the-league-of-entropy-launches-drand","metadata":{"permalink":"/blog/the-league-of-entropy-launches-drand","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2020-08-10-the-league-of-entropy-launches-drand-v1-0-to-becom.md","source":"@site/blog/2020-08-10-the-league-of-entropy-launches-drand-v1-0-to-becom.md","title":"The League of Entropy launches drand v1.0 to become the Internet\u2019s first production-grade, publicly verifiable, randomness beacon!","description":"Welcome to the brand-new website for the drand project! We are thrilled to announce that drand is now in production, offering publicly verifiable randomness as a foundational internet service.","date":"2020-08-10T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/blog/tags/release","description":"release tag"},{"inline":false,"label":"Major","permalink":"/blog/tags/major","description":"major tag"},{"inline":false,"label":"League-of-Entropy","permalink":"/blog/tags/League-of_entropy","description":"league of entropy tag"}],"readingTime":2.8966666666666665,"hasTruncateMarker":true,"authors":[{"name":"Yolan Romailler","title":"Co-Founder & Cryptographer","description":"Applied cryptographer with a leaning for broader security/vulnerability research. \\n\\nWorked on the Distributed Randomness project, drand, at Protocol Labs and also on CBDC and SSI at SICPA, as well as broader cryptographic engineering at Kudelski Security. I\'ve also been a Security Engineer on the Diem security team for Novi (Facebook/Meta).\\nA subject matter expert in secure coding. As a consultant, I\'ve supported customers by answering complex questions on security critical systems such as blockchain technologies, and by designing, evaluating and implementing complex cryptography such as key management systems or cryptographic primitives.\\n","page":{"permalink":"/blog/authors/yolan"},"imageURL":"/img/author/yolan.jpeg","key":"yolan"}],"frontMatter":{"slug":"the-league-of-entropy-launches-drand","title":"The League of Entropy launches drand v1.0 to become the Internet\u2019s first production-grade, publicly verifiable, randomness beacon!","authors":["yolan"],"tags":["release","major","league-of-entropy"],"date":"2020-08-10T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"drand v1.0 and the League of Entropy: Two Weeks In","permalink":"/blog/drand-v1.0-and-the-league-of-entropy-two-weeks-in"}},"content":"Welcome to the brand-new website for the drand project! We are thrilled to announce that drand is now in production, offering publicly verifiable randomness as a foundational internet service.\\n\\n\x3c!-- truncate --\x3e\\n\\nIn this post, we\'ll introduce drand, highlight recent protocol upgrades, share details about the expansion of the League of Entropy\'s largest deployment, and provide a glimpse into the future of drand and the League of Entropy.\\n\\n## New to drand? Here\'s a Primer\\n\\nRandomness is crucial for many business-critical operations and protocols we use daily, such as secure communications cryptography and public lotteries. Despite its importance, there hasn\'t been a source of public randomness capable of delivering truly unbiased randomness at scale\u2014until now. Drand was created to fill this gap.\\n\\nDrand provides a universally accessible source of publicly verifiable, unbiasable, and unpredictable randomness. After an initial multi-party computation to establish a distributed key, drand nodes operated by independent parties periodically broadcast information. This data is aggregated into a final random beacon, whose validity users can easily verify.\\n\\nDrand originated as a research project in the [DEDIS lab at EPFL](https://dedis.epfl.ch/) and launched its first network experiment in 2019. After nearly a year of research, drand transitioned into a production-level public service. Recently, we introduced several changes and improvements and deployed drand\'s largest network, the [League of Entropy](https://leagueofentropy.com/).\\n\\nWe believe drand can become a foundational internet service for randomness, accessible to everyone online, much like DNS or NTP.\\n\\n## drand v1.1\\n\\ndrand v1.0 launched in July, and we upgraded to v1.1 in August with many new features and architectural improvements. Key updates include:\\n\\n### Three-Layered Architecture\\n\\nThe network architecture is now divided into three layers, enhancing node protection and scalability. This includes a distribution network utilizing [HTTP CDNs](https://api.drand.sh/public/latest), [libp2p Gossipsub](https://blog.ipfs.io/2020-05-20-gossipsub-v1.1/) relays, a [Tor hidden service](https://drandeokfd5aaz3hr4hfk7mlr23vc63boxrpr44ertumtbousmdgbhad.onion/public/latest), and a [Twitter bot](https://twitter.com/loebot).\\n\\n### New Features\\n\\n- **Round-to-timestamps guarantees**: Nodes quickly generate randomness to catch up after downtime.\\n- **Chain download functionality**: Nodes can download a full copy of an existing chain before joining.\\n- **Enhanced security**: New curve ([BLS12-381](https://electriccoin.co/blog/new-snark-curve/)) for better security and compatibility with major blockchains like Filecoin and Ethereum 2.0.\\n- **Improved client implementation**: Failover and optimizations in Go and JS.\\n- **Broadcast channel**: Enables more robust setup ceremonies.\\n\\n### Deployment Monitoring\\n\\nWe\'ve introduced tools to monitor drand nodes and alert operators to incidents. A [status page](https://drand.statuspage.io/) shows system status and planned maintenance. Additionally, a network observatory measures performance and reliability from global vantage points.\\n\\n### drand\u2019s Specification & Security Model\\n\\nThe drand protocol now has a [full specification](https://www.notion.so/2-3-Concepts-Specification-3c6b9de90dfd4ccbbdce860edc19b238?pvs=21) and a documented [security model](https://www.notion.so/2-2-Concepts-Security-Model-e28de9e2a7a94dcab08d06160879b6c5?pvs=21).\\n\\n### Security Audit\\n\\ndrand underwent a thorough end-to-end security audit by [SigmaPrime](https://sigmaprime.io/). Check out the [full report](https://drive.google.com/file/d/1fCy1ynO78gJLCNbqBruzHx7bh72Tu-q2/view?usp=sharing) to learn about the findings and our collaborative process with SigmaPrime.\\n\\n### Code Quality, Refactor & Testing\\n\\nWe\u2019ve improved our development practices, including a testnet for pre-deployment evaluations, increased code coverage, linting, and regression testing. We\'ve merged over 400 pull requests in the past few months, ensuring drand is a reliable production environment.\\n\\n## New Website & Logo\\n\\nOur new website is the primary repository for drand\'s growing documentation. It\'s also the home for our community of developers, operators, and end-users, where we\u2019ll share important updates and news. We also unveiled a new logo for the drand project.\\n\\n## The League of Entropy Main Network (LoE mainnet) Becomes a Production Service\\n\\nDrand\u2019s true power comes from its decentralized network of independent nodes. With significant protocol upgrades, we\u2019ve strengthened the League of Entropy.\\n\\nIn 2019, Cloudflare, EPFL, the University of Chile, Kudelski Security, and Protocol Labs formed the League of Entropy to run the drand network. Since then, it has expanded to include partners from six countries, spanning universities and infrastructure companies.\\n\\n### New League of Entropy Partners\\n\\nWith the LoE Main Network upgrade, new partners have joined, increasing robustness and quality of service. Current members include:\\n\\n- [EPFL Center for Digital Trust (C4DT)](https://drand.love/dc94bcdadab64950aa1e6bc96cb1e39a)\\n- [ChainSafe Systems](https://drand.love/480ac8864a33408dae64fad706c38a8e)\\n- [c**\xb7**Labs](https://drand.love/8125559f2fb44804b9e6ca63da70f6b6)\\n- [Cloudflare](https://drand.love/12bbcd90be5f4e42af18599f65019e7e)\\n- [Emerald Onion](https://emeraldonion.org/)\\n- [EPFL](https://www.epfl.ch/labs/dedis/)\\n- [Ethereum Foundation](https://ethereum.foundation/)\\n- [IC3](https://www.initc3.org/)\\n- [Kudelski Security](https://www.kudelskisecurity.com/)\\n- [Protocol Labs](https://protocol.ai/)\\n- [PTisp](https://ptisp.pt/)\\n- [Tierion](https://tierion.com/)\\n- [UCL](https://www.ucl.ac.uk/)\\n- [University of Chile](https://www.uchile.cl/)\\n\\nWe\u2019ll continue growing the network over the years to come.\\n\\n### League of Entropy\u2019s Governance\\n\\nDrand\u2019s strength lies in its decentralized governance model. We\u2019ve established rules and requirements to maintain high network security, ensure effective operation, and foster continuous improvement. This model also outlines procedures for adding new members equitably.\\n\\n## Filecoin Becomes Drand\u2019s First High-Profile Production User\\n\\nWe\u2019re thrilled to announce that the [Filecoin project](https://filecoin.io/blog/filecoin-testnet-phase-2-is-here/) at Protocol Labs is adopting drand for unbiased randomness in leader election on its blockchain. This is a significant milestone, showcasing drand\u2019s potential in the blockchain space. Filecoin\u2019s integration will drive innovation, testing, and development for drand.\\n\\n## Join Us on August 13 for The Randomness Summit\\n\\nTo celebrate this launch, the drand team, ETHGlobal, Protocol Labs Research, and ResNetLab are hosting a [one-day virtual summit](https://randomness2020.com/) on the state of the art and future directions for randomness beacons. [Register now](https://airtable.com/shrTsIV4Btd8Wugqb) to learn from top cryptographers and randomness beacon experts, League of Entropy partners, and drand developers. Hear from Ethereum and Filecoin project leads about the critical role of randomness in their networks.\\n\\nThat\u2019s all for now! Stay tuned for more updates on drand\u2019s new online home.\\n\\n---"}]}}')}}]);