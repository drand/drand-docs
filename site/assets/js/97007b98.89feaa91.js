"use strict";(self.webpackChunkdrand_docs=self.webpackChunkdrand_docs||[]).push([[683],{4414:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var r=t(4848),s=t(8453);const o={id:"4-1-ops-guide-deployment",title:"4.1 Deployment",description:"Detailed instructions for how to deploy one or more drand nodes."},i="4.1 Deployment",d={id:"ops-guide/4-1-ops-guide-deployment",title:"4.1 Deployment",description:"Detailed instructions for how to deploy one or more drand nodes.",source:"@site/docs/04_ops-guide/04-01-Deployment.md",sourceDirName:"04_ops-guide",slug:"/ops-guide/4-1-ops-guide-deployment",permalink:"/docs/ops-guide/4-1-ops-guide-deployment",draft:!1,unlisted:!1,editUrl:"https://github.com/drand/drand-docs/tree/master/docs/04_ops-guide/04-01-Deployment.md",tags:[],version:"current",frontMatter:{id:"4-1-ops-guide-deployment",title:"4.1 Deployment",description:"Detailed instructions for how to deploy one or more drand nodes."},sidebar:"docsSidebar",previous:{title:"4.0 Getting Started - Ops",permalink:"/docs/ops-guide/4-0-getting-started-ops"},next:{title:"4.2 Docker Install",permalink:"/docs/ops-guide/4-2-ops-guide-docker-install"}},a={},l=[{value:"<strong>Setup</strong>",id:"setup",level:2},{value:"<strong>Beacon ID</strong>",id:"beacon-id",level:3},{value:"<strong>Long-term Key</strong>",id:"long-term-key",level:3},{value:"<strong>Starting the drand Daemon</strong>",id:"starting-the-drand-daemon",level:3},{value:"<strong>TLS setup: Nginx with Let&#39;s Encrypt</strong>",id:"tls-setup-nginx-with-lets-encrypt",level:3},{value:"<strong>TLS Setup: Apache for HTTP</strong>",id:"tls-setup-apache-for-http",level:3},{value:"<strong>Test the Connection to a Node</strong>",id:"test-the-connection-to-a-node",level:3},{value:"<strong>Test the Connection to a Network</strong>",id:"test-the-connection-to-a-network",level:3},{value:"<strong>Run the Setup Phase</strong>",id:"run-the-setup-phase",level:3},{value:"<strong>Custom Entropy Source</strong>",id:"custom-entropy-source",level:3},{value:"<strong>Group TOML File</strong>",id:"group-toml-file",level:3},{value:"<strong>Randomness Generation</strong>",id:"randomness-generation",level:2},{value:"<strong>Timings</strong>",id:"timings",level:3},{value:"<strong>Daemon Downtime and Chain Sync</strong>",id:"daemon-downtime-and-chain-sync",level:3},{value:"<strong>drand Network Failure</strong>",id:"drand-network-failure",level:3},{value:"<strong>Control Functionalities</strong>",id:"control-functionalities",level:2},{value:"<strong>Long-term Private Key</strong>",id:"long-term-private-key",level:3},{value:"<strong>Long-term Public Key</strong>",id:"long-term-public-key",level:3},{value:"<strong>Private Key Share</strong>",id:"private-key-share",level:3},{value:"<strong>Chain Information</strong>",id:"chain-information",level:3},{value:"<strong>Updating drand Group</strong>",id:"updating-drand-group",level:2},{value:"<strong>Metrics</strong>",id:"metrics",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"41-deployment",children:"4.1 Deployment"})}),"\n",(0,r.jsx)(n.h1,{id:"deployment-guide",children:(0,r.jsx)(n.strong,{children:"Deployment guide"})}),"\n",(0,r.jsx)(n.p,{children:"This document explains the workflow to have a working group of drand nodes generate randomness. There are four sections to this guide:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Start the daemons."}),"\n",(0,r.jsx)(n.li,{children:"Choose a beacon id."}),"\n",(0,r.jsx)(n.li,{children:"Generate the long-term key pairs and the group file."}),"\n",(0,r.jsx)(n.li,{children:"Have each node collectively participate in the distributed key generation (DKG)."}),"\n",(0,r.jsx)(n.li,{children:"Generate randomness."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["You can repeat these steps every time you want to start a new network for randomness generation. If the drand daemon is already running, please skip that step. For each new network, a unique identifier, known as\xa0",(0,r.jsx)(n.code,{children:"Beacon ID"}),"\xa0is required."]})}),"\n",(0,r.jsx)(n.h2,{id:"setup",children:(0,r.jsx)(n.strong,{children:"Setup"})}),"\n",(0,r.jsx)(n.p,{children:"The setup process for a drand node consists of the following steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Start the drand daemon on each node."}),"\n",(0,r.jsx)(n.li,{children:"Choose a beacon id for the new network."}),"\n",(0,r.jsx)(n.li,{children:"Generate the long-term key pair for each new network."}),"\n",(0,r.jsx)(n.li,{children:"The leader starts the command as a coordinator & every participant connects to the coordinator to setup the network."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This document explains how to do the setup with the drand binary itself. If you want to install drand using Docker, follow the\xa0",(0,r.jsx)(n.a,{href:"4-2-ops-guide-docker-install",children:(0,r.jsx)(n.strong,{children:"Docker instructions instead"})}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"beacon-id",children:(0,r.jsx)(n.strong,{children:"Beacon ID"})}),"\n",(0,r.jsxs)(n.p,{children:["Each drand network needs a\xa0",(0,r.jsx)(n.strong,{children:"unique identifier"}),"\xa0to run. The only constraint regarding possible values is it could not have been used before on another network. If you leave the id empty, the node will set it to\xa0",(0,r.jsx)(n.code,{children:"default"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"long-term-key",children:(0,r.jsx)(n.strong,{children:"Long-term Key"})}),"\n",(0,r.jsxs)(n.p,{children:["Each drand network needs a public and secret key to interact with the rest of the nodes. To generate these keys run\xa0",(0,r.jsx)(n.a,{href:"https://drand.love/operator/drand-cli/#drand-generate-keypair",children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"drand generate-keypair"})})}),"\xa0followed by the address of your node:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand generate-keypair --id {beacon-id} drand.example.com:443\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The address must be reachable over a TLS connection through a reverse proxy doing gRPC TLS termination. Disabling TLS can be done when running a development or test deployment by building drand with the ",(0,r.jsx)(n.code,{children:"-tags=conn_insecure"})," build tag."]}),"\n",(0,r.jsxs)(n.p,{children:["The default location for your keys is\xa0",(0,r.jsx)(n.code,{children:"~/.drand"}),". You can specify where you want the keys to be saved by using the\xa0",(0,r.jsx)(n.code,{children:"--folder"}),"\xa0flag:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand generate-keypair --folder ~/.drand-node-0 --id {beacon-id} drand0.example.com:443\n"})}),"\n",(0,r.jsx)(n.h3,{id:"starting-the-drand-daemon",children:(0,r.jsx)(n.strong,{children:"Starting the drand Daemon"})}),"\n",(0,r.jsxs)(n.p,{children:["The daemon does not automatically run in the background. To run the daemon in the background, you must add\xa0",(0,r.jsx)(n.code,{children:"&"}),"\xa0to the end of your command. Docker users can use the\xa0",(0,r.jsx)(n.code,{children:"-d"}),"\xa0option. Once the daemon is running, the best way to issue commands is to use the control functionalities. The control client has to run on the same server as the drand daemon, so only drand administrators can issue a command to their drand daemons."]}),"\n",(0,r.jsxs)(n.p,{children:["To choose where drand listens, use the\xa0",(0,r.jsx)(n.code,{children:"--private-listen"}),"\xa0flag. You can also use the\xa0",(0,r.jsx)(n.code,{children:"--public-listen"}),"\xa0flag to specify the address of the public API. Both these flags allow specifying the interface and/or port for drand to listen on. The\xa0",(0,r.jsx)(n.code,{children:"--private-listen"}),"\xa0flag is the primary listener used to expose a gRPC service for inter-group-member communication. The\xa0",(0,r.jsx)(n.code,{children:"--public-listen"}),"\xa0flag exposes a public and limited HTTP service designed to be CDN friendly with caching header, and provide basic information for drand users."]}),"\n",(0,r.jsxs)(n.p,{children:["To get TLS certificates for free, you can use, for example,\xa0",(0,r.jsx)(n.a,{href:"https://letsencrypt.org/",children:"Let's Encrypt"})," with its official CLI tool\xa0",(0,r.jsx)(n.a,{href:"https://certbot.eff.org/",children:"EFF's certbot"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"tls-setup-nginx-with-lets-encrypt",children:(0,r.jsx)(n.strong,{children:"TLS setup: Nginx with Let's Encrypt"})}),"\n",(0,r.jsxs)(n.p,{children:["Running drand behind a reverse proxy is the\xa0",(0,r.jsx)(n.strong,{children:"default"}),"\xa0method of deploying drand. Such a setup greatly simplifies TLS management issues (renewal of certificates, etc.). We provide here the minimum setup using\xa0",(0,r.jsx)(n.a,{href:"https://www.nginx.com/",children:"Nginx"})," ****and\xa0",(0,r.jsx)(n.a,{href:"https://certbot.eff.org/instructions/",children:"certbot"}),"- make sure you have both binaries installed with the latest version; Nginx version must be at least >=\xa0",(0,r.jsx)(n.code,{children:"1.13.10"}),"\xa0for gRPC compatibility."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"First, add an entry in the Nginx configuration for drand:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"# /etc/nginx/sites-available/default\nserver {\n    server_name drand.example.xyz;\n    listen 80;\n    location / {\n      proxy_pass http://localhost:8080;\n      proxy_set_header Host $host;\n    }\n}\n\nserver {\n  server_name drand.example.xyz;\n  listen 443 ssl http2;\n  location / {\n    grpc_pass grpc://localhost:4444;\n    grpc_set_header X-Real-IP $remote_addr;\n  }\n\n\t# Add ssl certificates by running certbot --nginx\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can change:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["the port on which you want drand to be accessible by changing the line\xa0",(0,r.jsx)(n.code,{children:"listen 443 ssl http2"}),"\xa0to use any port."]}),"\n",(0,r.jsxs)(n.li,{children:["the port on which the drand binary will listen locally by changing the line\xa0",(0,r.jsx)(n.code,{children:"grpc_pass grpc://localhost:4444;"}),"\xa0to the private API port and\xa0",(0,r.jsx)(n.code,{children:"proxy_pass http://localhost:8080;"}),"\xa0to the public API port."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["You can use different\xa0",(0,r.jsx)(n.code,{children:"server"}),"\xa0blocks to apply different configurations (DNS names, for example) for the private and public API."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Run certbot to get a TLS certificate:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"sudo certbot --nginx\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Running drand uses two ports: one for group member communication, and one for a public-facing API for distributing randomness. These ports and interfaces should be specified with flags."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand start --private-listen 127.0.0.1:4444 --public-listen drand0.example.com:8080\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The\xa0",(0,r.jsx)(n.code,{children:"--private-listen"}),"\xa0flag tells drand to listen on the given address. The public-facing address associated with this listener is given to other group members in the setup phase (see below)."]}),"\n",(0,r.jsxs)(n.p,{children:["If no\xa0",(0,r.jsx)(n.code,{children:"private-listen"}),"\xa0address is provided, it will default to the discovered public address of the drand node."]}),"\n",(0,r.jsxs)(n.p,{children:["If no\xa0",(0,r.jsx)(n.code,{children:"public-listen"}),"\xa0flag is provided, drand will not expose a public HTTP interface."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"tls-setup-apache-for-http",children:(0,r.jsx)(n.strong,{children:"TLS Setup: Apache for HTTP"})}),"\n",(0,r.jsx)(n.p,{children:"The equivalent Apache config block to the NGinX config above for forwarding HTTP requests back to the drand public port would be:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"ProxyPreserveHost On\nSSLProxyEngine on\nSSLProxyCheckPeerCN off\nProxyPass / https://127.0.0.1:8080/\nProxyPassReverse / https://127.0.0.1:8080/\n<Proxy *>\nallow from all\n</Proxy>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"test-the-connection-to-a-node",children:(0,r.jsx)(n.strong,{children:"Test the Connection to a Node"})}),"\n",(0,r.jsxs)(n.p,{children:["Use\xa0",(0,r.jsx)(n.code,{children:"drand util check <address>"}),"\xa0to test the gRPC endpoint on a drand node (like a ping to the node)."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand util check example.com:443\n\n> drand: id example.com:443 answers correctly\n"})}),"\n",(0,r.jsx)(n.p,{children:"If the address used is a DNS name, this command will try to resolve the DNS name to IP."}),"\n",(0,r.jsx)(n.h3,{id:"test-the-connection-to-a-network",children:(0,r.jsx)(n.strong,{children:"Test the Connection to a Network"})}),"\n",(0,r.jsxs)(n.p,{children:["Use\xa0",(0,r.jsx)(n.code,{children:"drand util check --id <beacon-id> <address>"})," \xa0to test the gRPC endpoint of a drand network which has a specific beacon id."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand util check --id <beacon-id> example.com:443\n\n> drand: id example.com:443 answers correctly\n"})}),"\n",(0,r.jsx)(n.p,{children:"If the address used is a DNS name, this command will try to resolve the DNS name to IP."}),"\n",(0,r.jsx)(n.h3,{id:"run-the-setup-phase",children:(0,r.jsx)(n.strong,{children:"Run the Setup Phase"})}),"\n",(0,r.jsx)(n.p,{children:"To setup a new network, drand uses the notion of a coordinator that collects the public key of the participants, setups the group configuration once all keys are received, and then start the distributed key generation phase. Once the DKG phase is performed, the participants can see the list of members in the group configuration file."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Coordinator"}),": The designated coordinator node must run the following command\xa0",(0,r.jsx)(n.strong,{children:"before"}),"\xa0everyone else:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand dkg init --threshold 6 --proposal /path/to/proposal/file --period 30s --id {beacon-id} --scheme {scheme-id}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Rest of participants"}),": Once the coordinator has run the previous command, the rest of the participants must run the following command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand dkg join --id {beacon-id}\n"})}),"\n",(0,r.jsx)(n.p,{children:"The flags usage is as follows:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Flag"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--leader"}),(0,r.jsx)(n.td,{children:"This\xa0node is the group coordinator."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--nodes"}),(0,r.jsx)(n.td,{children:"The number of nodes in this group."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--threshold"}),(0,r.jsx)(n.td,{children:"The minimum number of nodes that need to be online for the network to be live."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--period"}),(0,r.jsxs)(n.td,{children:["The period of the randomness beacon to use. It must be a valid duration as parsed by Golang's\xa0",(0,r.jsx)(n.a,{href:"https://golang.org/pkg/time/#ParseDurationhttps://golang.org/pkg/time/#ParseDurationmethod",children:"https://golang.org/pkg/time/#ParseDurationhttps://golang.org/pkg/time/#ParseDurationmethod"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--catchup-period"}),(0,r.jsx)(n.td,{children:"The period of randomness when recovering from a failure. A valid Golang duration, it may be 0 to catch up as fast as possible."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--secret-file"}),(0,r.jsx)(n.td,{children:"The file that contains the password that the leader uses to authenticate nodes that want to participate in the group. This password must be at least 32 characters long. This variable contains the path and name of the file. Notice that this flag takes precedence over the\xa0DRAND_SHARE_SECRET\xa0env variable if set."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--id"}),(0,r.jsx)(n.td,{children:"The unique identification for this new network. It allows drand to handle various networks running at the same time."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"--scheme"}),(0,r.jsx)(n.td,{children:"The scheme the new network will use. It allows the network to work on chain or unchained mode."})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["The\xa0",(0,r.jsx)(n.code,{children:"drand share"}),"\xa0command will run until the DKG has finished. If you quit the command, the DKG will continue, but the group file will not be created. In that case, once the DKG is done, you can get the group file by running:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand show group --out group.toml --id {beacon-id}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If you specified a\xa0",(0,r.jsx)(n.code,{children:"--control"}),"\xa0in when you started the drand node, you will have to supply the same port with this command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand show group --out group.toml --control 3001 --id {beacon-id}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"custom-entropy-source",children:(0,r.jsx)(n.strong,{children:"Custom Entropy Source"})}),"\n",(0,r.jsxs)(n.p,{children:["Drand takes its entropy for the setup phase from the OS's entropy source by default. This source is\xa0",(0,r.jsx)(n.code,{children:"/dev/urandom"}),"\xa0on Unix systems. However, it is possible for a participant to inject their own entropy source into the creation of their secret."]}),"\n",(0,r.jsx)(n.h3,{id:"group-toml-file",children:(0,r.jsx)(n.strong,{children:"Group TOML File"})}),"\n",(0,r.jsxs)(n.p,{children:["Once the DKG phase is done, each node has both a private share and a group file containing the distributed public key. Using the previous commands, the group file will be written to\xa0",(0,r.jsx)(n.code,{children:"group.toml"}),". That updated group file is needed by drand to securely contact drand nodes on their public interface to gather private or public randomness. To view this file, run\xa0",(0,r.jsx)(n.code,{children:"drand show group"}),". If you want to save the output to a file, add the\xa0",(0,r.jsx)(n.code,{children:"--out <file>"}),"\xa0flag:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand show group --out ~/group-config.toml --id {beacon-id}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"randomness-generation",children:(0,r.jsx)(n.strong,{children:"Randomness Generation"})}),"\n",(0,r.jsxs)(n.p,{children:["After a successful setup phase, drand will switch to the randomness generation mode\xa0",(0,r.jsx)(n.em,{children:"at the genesis time"}),"\xa0specified in the group file. Each node broadcasts\xa0",(0,r.jsx)(n.em,{children:"randomness shares"}),"\xa0at regular intervals. Every new random beacon is linked to the previous one in a chain of randomness. Once a node has collected a threshold of shares in the current round, it computes the public, random value, and stores it in its local instance of\xa0",(0,r.jsx)(n.a,{href:"https://github.com/coreos/bbolt",children:"BoltDB"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"For third party implementations of randomness beacon verification, you need:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The distributed public key generated during the setup phase."}),"\n",(0,r.jsx)(n.li,{children:"The period."}),"\n",(0,r.jsx)(n.li,{children:"The genesis time of the chain."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"As an administrator of a drand node, you can use the control port to access a series of important information:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"For listing all running networks:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand util status --list-ids\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"For accessing the chain information of a network:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand show chain-info --id {beacon-id}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Non-administrators can contact an external drand node to ask for its current distributed public key:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand get chain-info --id {beacon-id} <address>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this command,\xa0",(0,r.jsx)(n.code,{children:"<address>"}),"\xa0is the address of a drand node. Use the",(0,r.jsx)(n.code,{children:"--tls-cert"}),"\xa0flag to specify the server's certificate if needed. The\xa0",(0,r.jsx)(n.code,{children:"group.toml"}),"\xa0file does not need to be updated with the collective key."]}),"\n",(0,r.jsxs)(n.p,{children:["When using the\xa0",(0,r.jsx)(n.code,{children:"get chain-info"}),"\xa0method, a drand node\xa0",(0,r.jsx)(n.em,{children:"can"}),"\xa0lie about the key if no out-of-band verification is performed. That information is usually best gathered from a trusted drand operator and then embedded in any applications using drand."]}),"\n",(0,r.jsx)(n.h3,{id:"timings",children:(0,r.jsx)(n.strong,{children:"Timings"})}),"\n",(0,r.jsx)(n.p,{children:"At each new period, each node will try to broadcast their partial signatures for the corresponding round and try to generate full randomness from the partial signatures. The corresponding round is the number of rounds elapsed from the genesis time. That means there is a 1-1 mapping between a given time and a drand round."}),"\n",(0,r.jsx)(n.h3,{id:"daemon-downtime-and-chain-sync",children:(0,r.jsx)(n.strong,{children:"Daemon Downtime and Chain Sync"})}),"\n",(0,r.jsxs)(n.p,{children:["Due to the threshold nature of drand, a drand network can support some numbers of nodes offline at any given point. This number is determined by the threshold:\xa0",(0,r.jsx)(n.code,{children:"max_offline = group_len - threshold"}),". When a drand node goes back up, it will sync rapidly with the other nodes to catch up its local chain and participate in the next upcoming drand round."]}),"\n",(0,r.jsx)(n.h3,{id:"drand-network-failure",children:(0,r.jsx)(n.strong,{children:"drand Network Failure"})}),"\n",(0,r.jsxs)(n.p,{children:["If, for some reason, drand goes down for some time and then backs up, the new random beacon will be built over the\xa0",(0,r.jsx)(n.em,{children:"last successfully generated beacon"}),". For example, if the network goes down at round\xa0",(0,r.jsx)(n.code,{children:"10"}),"\xa0(i.e., the last beacon generated contained\xa0",(0,r.jsx)(n.code,{children:"round: 10"}),"), and back up again at round\xa0",(0,r.jsx)(n.code,{children:"20"}),"\xa0(i.e., field\xa0",(0,r.jsx)(n.code,{children:"round: 20"}),"), then this new randomness contains the field\xa0",(0,r.jsx)(n.code,{children:"previous_round:10"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"control-functionalities",children:(0,r.jsx)(n.strong,{children:"Control Functionalities"})}),"\n",(0,r.jsxs)(n.p,{children:["Drand's local administrator interface provides further functionality, e.g., to update group details or retrieve secret information. By default, the daemon listens on\xa0",(0,r.jsx)(n.code,{children:"127.0.0.1:8888"}),", but you can specify another control port when starting the daemon with:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand start --control 1234\n"})}),"\n",(0,r.jsx)(n.p,{children:"In that case, you need to specify the control port for each of the following commands."}),"\n",(0,r.jsx)(n.h3,{id:"long-term-private-key",children:(0,r.jsx)(n.strong,{children:"Long-term Private Key"})}),"\n",(0,r.jsx)(n.p,{children:"To retrieve the long-term private key of our node, run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand show private --id {beacon-id}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"long-term-public-key",children:(0,r.jsx)(n.strong,{children:"Long-term Public Key"})}),"\n",(0,r.jsx)(n.p,{children:"To retrieve the long-term public key of our node, run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand show public --id {beacon-id}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"private-key-share",children:(0,r.jsx)(n.strong,{children:"Private Key Share"})}),"\n",(0,r.jsx)(n.p,{children:"To retrieve the private key share of our node, as determined during the DKG, run the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand show share --id {beacon-id}\n"})}),"\n",(0,r.jsx)(n.p,{children:"The JSON-formatted output has the following form:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'{\n  "index": 1,\n  "share": {\n    "gid": 22,\n    "scalar": "764f6e3eecdc4aba8b2f0119e7b2fd8c35948bf2be3f87ebb5823150c6065764"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:'The "gid" simply indicates which group the data belongs to. It is present for scalar and points on the curve, even though scalars are the same on the three groups of bls12-381. The field is present already to be able to accommodate different curves later on.'}),"\n",(0,r.jsx)(n.h3,{id:"chain-information",children:(0,r.jsx)(n.strong,{children:"Chain Information"})}),"\n",(0,r.jsx)(n.p,{children:"To retrieve information about the chain this node participates in, run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand show chain-info --id {beacon-id}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"updating-drand-group",children:(0,r.jsx)(n.strong,{children:"Updating drand Group"})}),"\n",(0,r.jsxs)(n.p,{children:['Drand allows for "semi-dynamic" group update with a\xa0',(0,r.jsx)(n.em,{children:"resharing"}),"\xa0protocol that offers the following:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["New nodes can join an existing group and get new shares. Note that, in fact, all nodes get\xa0",(0,r.jsx)(n.em,{children:"new"}),"\xa0shares after running the resharing protocol."]}),"\n",(0,r.jsx)(n.li,{children:"Nodes can leave their current group. It may be necessary for nodes that do not wish to operate drand anymore."}),"\n",(0,r.jsx)(n.li,{children:"Nodes can update the threshold associated with their current distributed public key."}),"\n",(0,r.jsx)(n.li,{children:"refresh the shares (similar to using a new private key)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The main advantage of this method is that the distributed public key stays the\xa0",(0,r.jsx)(n.em,{children:"same"}),"\xa0even with new nodes coming in. That can be useful when the distributed public key is embedded inside the application using drand, and hence is difficult to update."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Setting up the coordinator"}),": The coordinator must be a member of the current network. To run the coordinator, run the following:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand share --leader --transition --secret-file /path/to/my/secret/file --nodes 15 --threshold 10 --out group2.toml --id {beacon-id}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Setting up the current members for the resharing"}),": The current members can simply run the following command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand share --connect <coordinator> --transition --secret-file /path/to/my/secret/file --out group2.toml --id {beacon-id}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Setting up the new members"}),": The new members need the current group file to proceed. Check how to get the group file in the\xa0",(0,r.jsx)(n.a,{href:"4-1-ops-guide-deployment",children:"Deployment"})," section."]}),"\n",(0,r.jsx)("aside",{children:(0,r.jsxs)(n.p,{children:["\ud83d\udca1 ",(0,r.jsx)(n.strong,{children:"TIP"}),": A new member will need the full history of randomness beacons to participate in a group so that the new node can field requests for previous rounds. Getting the full history can take a while."]})}),"\n",(0,r.jsx)(n.p,{children:"A new member can synchronize with a chain before joining. This can be done by anyone, and does not require resharing to have started."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand follow --sync-nodes <coordinator> --chain-hash <chain hash>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This command will not exit, but will keep adding new beacons to the local database as they are produced. If you wish for the command to terminate once it has synchronized up to\xa0",(0,r.jsx)(n.em,{children:"now"}),", you can add the option\xa0",(0,r.jsx)(n.code,{children:"--up-to=<round>"}),"\xa0where\xa0",(0,r.jsx)(n.code,{children:"round"}),"\xa0is the current randomness round."]}),"\n",(0,r.jsx)(n.p,{children:"To join the group, the incoming member should execute:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"drand share connect <coordinator> --from group.toml --secret-file /path/to/my/secret/file --out group2.toml\n"})}),"\n",(0,r.jsxs)(n.p,{children:["After the protocol is finished, each node will have the new group file written out as\xa0",(0,r.jsx)(n.code,{children:"group2.toml"}),". The randomness generation starts only at the specified transition time specified in the new group file."]}),"\n",(0,r.jsxs)(n.p,{children:["In this case, the\xa0",(0,r.jsx)(n.code,{children:"Beacon ID"}),"\xa0is not required as it is taken from the group file."]}),"\n",(0,r.jsx)(n.h2,{id:"metrics",children:(0,r.jsx)(n.strong,{children:"Metrics"})}),"\n",(0,r.jsxs)(n.p,{children:["The\xa0",(0,r.jsx)(n.code,{children:"--metrics <metrics-address>"}),"\xa0flag may be used to launch a metrics server at the provided address. The address may be specified as\xa0",(0,r.jsx)(n.code,{children:"127.0.0.1:port"}),", or as\xa0",(0,r.jsx)(n.code,{children:":port"}),"\xa0to bind to the default network interface. The webserver at this port will serve\xa0",(0,r.jsx)(n.a,{href:"https://golang.org/pkg/net/http/pprof/",children:"pprof"})," runtime profiling data at\xa0",(0,r.jsx)(n.code,{children:"<metrics>/debug/pprof"}),", allow triggering golang garbage collection at\xa0",(0,r.jsx)(n.code,{children:"<metrics>/debug/gc"}),", and will serve\xa0",(0,r.jsx)(n.a,{href:"https://prometheus.io/docs/guides/go-application/",children:"Prometheus"}),"\xa0metrics at\xa0",(0,r.jsx)(n.code,{children:"<metrics>:/metrics"}),". Prometheus counters track the number of gRPC requests sent and received by the drand node, as well as the number of HTTP API requests. This endpoint should not be exposed publicly. If desired, prometheus metrics can be used as a data source for\xa0",(0,r.jsx)(n.a,{href:"https://grafana.com/docs/grafana/latest/features/datasources/prometheus/",children:"grafana dashboards"}),"\xa0or other monitoring services."]}),"\n",(0,r.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var r=t(6540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);