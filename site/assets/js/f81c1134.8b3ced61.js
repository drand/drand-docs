"use strict";(self.webpackChunkdrand_docs=self.webpackChunkdrand_docs||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"drand-greetings","metadata":{"permalink":"/blog/drand-greetings","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2024-08-19-greetings.md","source":"@site/blog/2024-08-19-greetings.md","title":"Greetings!","description":"Congratulations, you have made your first post!","date":"2024-08-19T00:00:00.000Z","tags":[{"inline":false,"label":"Hello","permalink":"/blog/tags/hello","description":"Hello tag description"}],"readingTime":0.345,"hasTruncateMarker":true,"authors":[{"name":"Kent Bull","title":"drand Community Manager","url":"https://kentbull.com","page":{"permalink":"/blog/authors/kentbull"},"socials":{"x":"https://x.com/kentopbull","github":"https://github.com/kentbull"},"imageURL":"https://avatars.githubusercontent.com/u/65027257?v=4","key":"kentbull"},{"name":"Dave Grantham","title":"drand Community Scout Master","url":"https://cryptid.tech","page":{"permalink":"/blog/authors/all-dave-grantham-articles"},"socials":{"github":"https://github.com/dhuseby"},"imageURL":"https://avatars.githubusercontent.com/u/5017470?v=4","key":"dgrantham"}],"frontMatter":{"slug":"drand-greetings","title":"Greetings!","authors":["kentbull","dgrantham"],"tags":["hello"]},"unlisted":false,"nextItem":{"title":"Creating a Notion Widget to display the latest Public Randomness from drand!","permalink":"/blog/create-a-notion-widget"}},"content":"Congratulations, you have made your first post!\\n\\nFeel free to play around and edit this post as much as you like.\\n\\n\x3c!-- truncate --\x3e\\n\\nWe are building a replacement for the drand community docs.\\n\\nOnce we are done then all of the docs will be done with docusaurus.\\n\\nHow is line six?\\n\\n:::tip[Or eight?]\\n\\nOr eight lines?\\n\\n:::\\n\\n:::danger[Or ten?]\\n\\nOr even ten? Oh no!\\n\\n:::\\n\\nHow about twenty?"},{"id":"create-a-notion-widget","metadata":{"permalink":"/blog/create-a-notion-widget","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2024-07-26-creating-a-notion-widget-to-display-the-latest-pub.md","source":"@site/blog/2024-07-26-creating-a-notion-widget-to-display-the-latest-pub.md","title":"Creating a Notion Widget to display the latest Public Randomness from drand!","description":"Date Published: July 26, 2024","date":"2024-07-26T00:00:00.000Z","tags":[{"inline":false,"label":"How-to","permalink":"/blog/tags/how-to","description":"how to tag"},{"inline":false,"label":"Begginer","permalink":"/blog/tags/begginer","description":"begginer tag"},{"inline":false,"label":"Features","permalink":"/blog/tags/features","description":"begginer tag"}],"readingTime":8.27,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"create-a-notion-widget","title":"Creating a Notion Widget to display the latest Public Randomness from drand!","tags":["how-to","begginer","features"]},"unlisted":false,"prevItem":{"title":"Greetings!","permalink":"/blog/drand-greetings"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"Date Published: July 26, 2024\\nTags: Beginner, Features, How-to\\n\\nIn this blog post, we\u2019ll dive into creating a simple Notion widget that displays the latest public randomness from drand (for both the `default` and `quicknet` beacons from the League of Entropy network).\\n\\n## An overview of drand\\n\\nOur earlier [blog](https://drand.love/blog/a-guide-on-how-to-use-drand) post titled \\"A Guide on How to Use drand\\", explains the importance of public randomness and how drand provides it using a threshold network. It offers a step-by-step tutorial on setting up and using drand\'s randomness in applications, including fetching randomness with JavaScript, verifying it, and using it in real-life scenarios like coin flips and random selection. The guide emphasizes fairness and verifiability in applications requiring random numbers.\\n\\nIn a nutshell, drand uses a threshold network, where multiple parties collaborate to generate random numbers, ensuring no single entity can predict or bias the outcome. By leveraging hashed signatures without a complete secret key held by any party, drand achieves verifiable randomness. This system\'s reliability and unpredictability make it ideal for projects with a dependency on secure and verifiable randomness.\\n\\n## Step into Notion Widgets\\n\\nNotion widgets are customizable, embedded elements that can be added to Notion pages to enhance functionality and interactivity. These widgets can display real-time information, like clocks, weather updates, calendars, or external content such as videos, and integrate third-party services directly within Notion. They are typically created using code snippets or widget creation tools and then embedded in Notion using the embed block feature. This enhances productivity and information accessibility within Notion workspaces.\\n\\nLet\u2019s make a drand notion widget!\\n\\n## ReactJS Component\\n\\nThe first step is to create a basic ReactJS application that can be embedded in any Notion page. To fetch the latest randomness beacon, the application will need to integrate drand JavaScript client. The client is publicly available https://github.com/drand/drand-client.\\n\\nFirstly, we will create a new React project and then install the [drand client](https://www.npmjs.com/package/drand-client). It is the same client used in the previous blog post. We will use it to interact with the drand randomness beacon networks (default network and quicknet) in our ReactJS code. \\n\\n```bash\\nnpm install drand-client\\n```\\n\\nOnce the drand client is installed, we\u2019re ready to start implementing our simple ReactJS application! The application will allow users to select their desired network (i.e., default or quicknet) from a dropdown menu and display the latest randomness after each round, the round number and a countdown to the next randomness generation round or ETA. \\n\\nAppropriate API URLs for the mainnet default and quicknet networks can be found here: [https://drand.love/docs/developers-guide](https://drand.love/docs/developers-guide)\\n\\nLet\u2019s implement the reactjs component in our `App.js` file.\\n\\n```jsx\\n// React is the main library for building the UI components\\n// useState, useEffect, useRef are React hooks for managing state, side effects, and mutable references, respectively.\\nimport React, { useState, useEffect, useRef } from \'react\';\\n// This library is used to interact with the drand (decentralized randomness) network.\\nimport { watch, FastestNodeClient } from \'drand-client\';\\n// A built-in JavaScript object for handling large integers, declared global to avoid ESLint issues.\\n/* global BigInt */\\n```\\n\\nThe main functional component of the React app is the App() function. Let\u2019s go ahead and start implementing it.\\n\\n```jsx\\nfunction App() {\\n```\\n\\nLet\u2019s add some state variables!\\n\\n```jsx\\n// The latest randomness value\\nconst [latestRandomness, setLatestRandomness] = useState(null);\\n// The estimated time of arrival of the next randomness\\nconst [eta, setETA] = useState(null);\\n// The current round number\\nconst [round, setRound] = useState(null);\\n// The current selected network\\nconst [network, setNetwork] = useState(\'default\');\\n// A reference to the drand client instance\\nconst clientRef = useRef(null);\\n// A reference to an AbortController for managing asynchronous tasks\\nconst abortControllerRef = useRef(null);\\n```\\n\\nFollowing the state variables, we will implement the rest of the JavaScript fo the App component.\\n\\n```jsx\\n// useEffect runs the fetchLatestRandomness function when the component \\n// mounts or when network changes.\\nuseEffect(() => {\\n\\t\\t// fetchLatestRandomness async function to fetch randomness data.\\n    const fetchLatestRandomness = async () => {\\n      try {\\n\\t      // chainHash, publicKey are set based on the selected network.\\n        let chainHash, publicKey;\\n        let updateInterval = 30 * 1000;\\n\\n        if (network === \'default\') {\\n          chainHash = \'8990e7a9aaed2ffed73dbd7092123d6f289930540d7651336225dc172e51b2ce\';\\n          publicKey = \'868f005eb8e6e4ca0a47c8a77ceaa5309a47978a7c71bc5cce96366b5d7a569937c529eeda66c7293784a9402801af31\';\\n        } else if (network === \'quicknet\') {\\n          chainHash = \'52db9ba70e0cc0f6eaf7803dd07447a1f5477735fd3f661792ba94600c84e971\';\\n          publicKey = \'83cf0f2896adee7eb8b5f01fcad3912212c437e0073e911fb90022d3e760183c8c4b450b6a0a6c3ac6a5776a2d1064510d1fec758c921cc22b0e17e63aaf4bcb5ed66304de9cf809bd274ca73bab4af5a6e9c76a4bc09e76eae8991ef5ece45a\';\\n          updateInterval = 3 * 1000;\\n        }\\n\\n        const options = {\\n          disableBeaconVerification: false,\\n          noCache: false,\\n          chainVerificationParams: { chainHash, publicKey }\\n        };\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// List of drand API endpoints\\n        let urls = [\\n          \'https://api.drand.sh\',\\n          \'https://api2.drand.sh\',\\n          \'https://api3.drand.sh\',\\n          \'https://drand.cloudflare.com\'\\n        ];\\n\\n        if (network === \'quicknet\') {\\n          urls = urls.map(url => `${url}/${chainHash}`);\\n        }\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// Create an instance of FastestNodeClient from drand-client\\n        const headers = { \'Access-Control-Allow-Origin\': \'*\', \'Access-Control-Allow-Credentials\': \'true\' };\\n        const client = new FastestNodeClient(urls, options, { headers });\\n\\n        if (clientRef.current) {\\n          clientRef.current.stop();\\n        }\\n        if (abortControllerRef.current) {\\n          abortControllerRef.current.abort();\\n        }\\n\\n        clientRef.current = client;\\n        client.start();\\n\\n        const abortController = new AbortController();\\n        abortControllerRef.current = abortController;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// Asynchronously iterates over beacons (randomness values) \\n\\t\\t\\t\\t// from the drand network\\n        for await (const beacon of watch(client, abortController)) {\\n          const currentTime = new Date().getTime();\\n          // Calculate and set the next ETA for randomness\\n          const nextETA = new Date(currentTime + updateInterval);\\n          // Update state with new randomness data\\n          setETA(nextETA.toLocaleTimeString());\\n          setRound(beacon.round);\\n          setLatestRandomness(BigInt(`0x${beacon.randomness}`).toString());\\n        }\\n      } catch (error) {\\n        console.error(\'Error fetching randomness:\', error);\\n      }\\n    };\\n\\n    fetchLatestRandomness();\\n\\n    return () => {\\n      if (clientRef.current) {\\n        clientRef.current.stop();\\n      }\\n      if (abortControllerRef.current) {\\n        abortControllerRef.current.abort();\\n      }\\n    };\\n  }, [network]);\\n```\\n\\nNext, we will add a function called `handleNetworkChange` to update the `network` state when the user selects a different network.\\n\\n```jsx\\nconst handleNetworkChange = (event) => {\\n    setNetwork(event.target.value);\\n  };\\n```\\n\\nIn the next part of the react component implementation, customise the JSX to render the UI as preferred. In our example, the UI displays a dropdown menu for users to select the preferred network (i.e., default or quicknet), the ETA of the next randomness, the latest round and the latest randomness.\\n\\n```jsx\\nreturn (\\n    <div className=\\"App\\">\\n      <header className=\\"App-header\\">\\n        <h1>Latest Randomness from drand Beacon</h1>\\n\\n        <div>\\n          Select Beacon Network:\\n          <select value={network} onChange={handleNetworkChange} style={{ marginLeft: \'10px\' }}>\\n            <option value=\\"default\\">Default</option>\\n            <option value=\\"quicknet\\">Quicknet</option>\\n          </select>\\n        </div>\\n\\n        <br />\\n\\n        Next Randomness ETA: {eta ? (\\n          <p>{eta}</p>\\n        ) : (\\n          <p>Loading...</p>\\n        )}\\n\\n        Latest Round: {round ? (\\n          <p>{round}</p>\\n        ) : (\\n          <p>Loading...</p>\\n        )}\\n\\n        Latest Randomness: {latestRandomness ? (\\n          <p>{latestRandomness}</p>\\n        ) : (\\n          <p>Loading...</p>\\n        )}\\n      </header>\\n    </div>\\n  );\\n\\nexport default App;\\n```\\n\\nOnce implemented, to start the React application, run \\n\\n```bash\\nnpm start\\n```\\n\\nThis will launch the application on\xa0`http://localhost:3000`. Open this URL in your browser to see the latest randomness from the drand beacon.\\n\\nAt this point, you\'ve successfully created a React web page that fetches and displays randomness from the drand distributed randomness beacon! This setup can be a foundation for more complex applications requiring secure and verifiable randomness. \\n\\nBefore embedding our react app into a Notion page, we need to create a GitHub repository and push our code to the repository. This will allow us to use GitHub Pages to publish our React application to the web!\\n\\n## GitHub Pages Component\\n\\nNow that you\'ve built a React app to display randomness from the drand beacon, the next step is to deploy it on GitHub Pages. This will make your application accessible on the web.\\n\\n### Step 1: Install GitHub Pages Package\\n\\nFirst, you need to install the\xa0[`gh-pages`](https://www.npmjs.com/package/gh-pages)\xa0package, which will help you deploy your app to GitHub Pages.\\n\\n### Step 2: Update\xa0`package.json`\\n\\nNext, update your\xa0`package.json`\xa0file to include the homepage, predeploy, and deploy scripts.\\n\\n1. **Homepage**: Add a\xa0`homepage`\xa0field to specify the URL where your app will be hosted. This is typically\xa0`https://<username>.github.io/<repository-name>`.\\n2. **Scripts**: Add\xa0`predeploy`\xa0and\xa0`deploy`\xa0scripts.\\n\\nHere\u2019s an example of how your\xa0`package.json`\xa0should look:\\n\\n```jsx\\n{\\n  \\"name\\": \\"drand-notion-widget\\",\\n  \\"version\\": \\"0.1.0\\",\\n  \\"private\\": true,\\n  \\"homepage\\": \\"<https://yourusername.github.io/drand-notion-widget>\\",\\n  \\"dependencies\\": {\\n    \\"drand-client\\": \\"^0.3.1\\",\\n    \\"react\\": \\"^17.0.2\\",\\n    \\"react-dom\\": \\"^17.0.2\\",\\n    \\"react-scripts\\": \\"4.0.3\\"\\n  },\\n  \\"scripts\\": {\\n    \\"start\\": \\"react-scripts start\\",\\n    \\"build\\": \\"react-scripts build\\",\\n    \\"predeploy\\": \\"npm run build\\",\\n    \\"deploy\\": \\"gh-pages -d build\\"\\n  },\\n  \\"devDependencies\\": {\\n    \\"gh-pages\\": \\"^3.2.3\\"\\n  }\\n}\\n```\\n\\nReplace\xa0`<username>`\xa0with your GitHub username and\xa0`<repository-name>`\xa0with the name of your GitHub repository.\\n\\n### Step 3: Initialize Git Repository\\n\\nGo to [GitHub](https://github.com/) and create a new repository with the same name you used in the `homepage` field of your `package.json`. \\n\\nFollow the instructions provided by GitHub to link your local repository to the newly created GitHub repository. \\n\\n### Step 4: Deploy to GitHub Pages\\n\\nFinally, run the deploy script:\\n\\n```bash\\nnpm run deploy\\n```\\n\\nThis command will create a production build of your React app and deploy it to the `gh-pages` branch of your GitHub repository. GitHub Pages will then serve your application from this branch.\\n\\n### Step 5: Access Your Deployed App\\n\\nAfter deploying, your app should be accessible at `https://<username>.github.io/<repository-name>`.\\n\\nBy following these steps, you will have successfully deployed your React application to GitHub Pages, making it accessible to anyone with the URL. Happy deploying!\\n\\n## Putting it Together\\n\\nWith the GitHub Pages URL ready (e.g.,\xa0`https://yourusername.github.io/drand-notion-widget`), we can embed the drand reactjs application we deployed earlier in Notion.\\n\\nOpen the Notion page where you want to embed the URL, and embed it with the following steps:\\n\\n- Click on the\xa0`+`\xa0button to add a new block or type\xa0`/embed`\xa0to bring up the embed block option.\\n\\n![Screenshot 2024-07-25 at 09.41.46.png](/img/Screenshot_2024-07-25_at_09.41.46.png)\\n\\n![Screenshot 2024-07-25 at 09.41.53.png](/img/Screenshot_2024-07-25_at_09.41.53.png)\\n\\n- Select the\xa0`Embed`\xa0option from the list.\\n- Paste your GitHub Pages URL into the embed block.\\n- Press\xa0`Enter`\xa0or click on the\xa0`Embed link`\xa0button.\\n\\nOnce the URL is embedded, you can resize the embed block by dragging the handles on the sides to fit your content appropriately. Notion might show a preview of your web app directly within the page, depending on how your app is configured and the type of content it displays.\\n\\nAn example drand widget embedded in a Notion page is shown below.\\n\\n![Screenshot 2024-07-24 at 15.36.43.png](/img/Screenshot_2024-07-24_at_15.36.43.png)\\n\\n### To Recap\\n\\nWe have successfully created a ReactJS application that displays the latest drand randomness beacon from both drand main network options (default and quicknet)!\\n\\nWe could do more with our Notion widget, e.g., styling it to our preference. To do this, simply modify the ReactJS code and redeploy it using `gh-pages` and the changes should be reflected at the same URL.\\n\\nHappy coding!"},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2021-08-26-welcome/index.md","source":"@site/blog/2021-08-26-welcome/index.md","title":"Welcome","description":"Docusaurus blogging features are powered by the blog plugin.","date":"2021-08-26T00:00:00.000Z","tags":[{"inline":false,"label":"Facebook","permalink":"/blog/tags/facebook","description":"Facebook tag description"},{"inline":false,"label":"Hello","permalink":"/blog/tags/hello","description":"Hello tag description"},{"inline":false,"label":"Docusaurus","permalink":"/blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":0.465,"hasTruncateMarker":true,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","page":{"permalink":"/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/","github":"https://github.com/slorber","newsletter":"https://thisweekinreact.com"},"imageURL":"https://github.com/slorber.png","key":"slorber"},{"name":"Yangshun Tay","title":"Front End Engineer @ Facebook","url":"https://github.com/yangshun","page":{"permalink":"/blog/authors/yangshun"},"socials":{"x":"https://x.com/yangshunz","github":"https://github.com/yangshun"},"imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["slorber","yangshun"],"tags":["facebook","hello","docusaurus"]},"unlisted":false,"prevItem":{"title":"Creating a Notion Widget to display the latest Public Randomness from drand!","permalink":"/blog/create-a-notion-widget"},"nextItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"}},"content":"[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\\n\\nHere are a few tips you might find useful.\\n\\n\x3c!-- truncate --\x3e\\n\\nSimply add Markdown files (or folders) to the `blog` directory.\\n\\nRegular blog authors can be added to `authors.yml`.\\n\\nThe blog post date can be extracted from filenames, such as:\\n\\n- `2019-05-30-welcome.md`\\n- `2019-05-30-welcome/index.md`\\n\\nA blog post folder can be convenient to co-locate blog post images:\\n\\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\\n\\nThe blog supports tags as well!\\n\\n**And if you don\'t want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."},{"id":"mdx-blog-post","metadata":{"permalink":"/blog/mdx-blog-post","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2021-08-01-mdx-blog-post.mdx","source":"@site/blog/2021-08-01-mdx-blog-post.mdx","title":"MDX Blog Post","description":"Blog posts support Docusaurus Markdown features, such as MDX.","date":"2021-08-01T00:00:00.000Z","tags":[{"inline":false,"label":"Docusaurus","permalink":"/blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":0.235,"hasTruncateMarker":true,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","page":{"permalink":"/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/","github":"https://github.com/slorber","newsletter":"https://thisweekinreact.com"},"imageURL":"https://github.com/slorber.png","key":"slorber"}],"frontMatter":{"slug":"mdx-blog-post","title":"MDX Blog Post","authors":["slorber"],"tags":["docusaurus"]},"unlisted":false,"prevItem":{"title":"Welcome","permalink":"/blog/welcome"},"nextItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\\n\\n:::tip\\n\\nUse the power of React to create interactive blog posts.\\n\\n:::\\n\\n{/* truncate */}\\n\\nFor example, use JSX to create an interactive button:\\n\\n```js\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n```\\n\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>"},{"id":"long-blog-post","metadata":{"permalink":"/blog/long-blog-post","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2019-05-29-long-blog-post.md","source":"@site/blog/2019-05-29-long-blog-post.md","title":"Long Blog Post","description":"This is the summary of a very long blog post,","date":"2019-05-29T00:00:00.000Z","tags":[{"inline":false,"label":"Hello","permalink":"/blog/tags/hello","description":"Hello tag description"},{"inline":false,"label":"Docusaurus","permalink":"/blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":2.06,"hasTruncateMarker":true,"authors":[{"name":"Yangshun Tay","title":"Front End Engineer @ Facebook","url":"https://github.com/yangshun","page":{"permalink":"/blog/authors/yangshun"},"socials":{"x":"https://x.com/yangshunz","github":"https://github.com/yangshun"},"imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"long-blog-post","title":"Long Blog Post","authors":"yangshun","tags":["hello","docusaurus"]},"unlisted":false,"prevItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"},"nextItem":{"title":"First Blog Post","permalink":"/blog/first-blog-post"}},"content":"This is the summary of a very long blog post,\\n\\nUse a `\x3c!--` `truncate` `--\x3e` comment to limit blog post size in the list view.\\n\\n\x3c!-- truncate --\x3e\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"},{"id":"first-blog-post","metadata":{"permalink":"/blog/first-blog-post","editUrl":"https://github.com/drand/drand-docs/tree/master/blog/2019-05-28-first-blog-post.md","source":"@site/blog/2019-05-28-first-blog-post.md","title":"First Blog Post","description":"Lorem ipsum dolor sit amet...","date":"2019-05-28T00:00:00.000Z","tags":[{"inline":false,"label":"Hola","permalink":"/blog/tags/hola","description":"Hola tag description"},{"inline":false,"label":"Docusaurus","permalink":"/blog/tags/docusaurus","description":"Docusaurus tag description"}],"readingTime":0.135,"hasTruncateMarker":true,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","page":{"permalink":"/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/sebastienlorber","linkedin":"https://www.linkedin.com/in/sebastienlorber/","github":"https://github.com/slorber","newsletter":"https://thisweekinreact.com"},"imageURL":"https://github.com/slorber.png","key":"slorber"},{"name":"Yangshun Tay","title":"Front End Engineer @ Facebook","url":"https://github.com/yangshun","page":{"permalink":"/blog/authors/yangshun"},"socials":{"x":"https://x.com/yangshunz","github":"https://github.com/yangshun"},"imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"first-blog-post","title":"First Blog Post","authors":["slorber","yangshun"],"tags":["hola","docusaurus"]},"unlisted":false,"prevItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Lorem ipsum dolor sit amet...\\n\\n\x3c!-- truncate --\x3e\\n\\n...consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"}]}}')}}]);